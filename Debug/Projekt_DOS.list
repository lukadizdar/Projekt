
Projekt_DOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd94  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800bf1c  0800bf1c  0000cf1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf40  0800bf40  0000d87c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf40  0800bf40  0000cf40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf48  0800bf48  0000d87c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf48  0800bf48  0000cf48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf4c  0800bf4c  0000cf4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000087c  20000000  0800bf50  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d87c  2**0
                  CONTENTS
 10 .bss          00002228  2000087c  2000087c  0000d87c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002aa4  20002aa4  0000d87c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d87c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000222de  00000000  00000000  0000d8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057bb  00000000  00000000  0002fb8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c00  00000000  00000000  00035348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000155a  00000000  00000000  00036f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288e7  00000000  00000000  000384a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026e0e  00000000  00000000  00060d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4777  00000000  00000000  00087b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000b3  00000000  00000000  0016c30e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007734  00000000  00000000  0016c3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00173af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000ed7  00000000  00000000  00173b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000000c8  00000000  00000000  00174a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000087c 	.word	0x2000087c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bf04 	.word	0x0800bf04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000880 	.word	0x20000880
 80001c4:	0800bf04 	.word	0x0800bf04

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ca:	4b22      	ldr	r3, [pc, #136]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004cc:	4a22      	ldr	r2, [pc, #136]	@ (8000558 <MX_ADC1_Init+0xa0>)
 80004ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004d0:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004de:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004f2:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80004f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80004fa:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000500:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000502:	4b14      	ldr	r3, [pc, #80]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000508:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800050a:	2201      	movs	r2, #1
 800050c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800050e:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000510:	2201      	movs	r2, #1
 8000512:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000516:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <MX_ADC1_Init+0x9c>)
 8000518:	2201      	movs	r2, #1
 800051a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800051c:	480d      	ldr	r0, [pc, #52]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800051e:	f001 f8a3 	bl	8001668 <HAL_ADC_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000528:	f000 fd7e 	bl	8001028 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800052c:	2301      	movs	r3, #1
 800052e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000530:	2301      	movs	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <MX_ADC1_Init+0x9c>)
 800053e:	f001 f9fb 	bl	8001938 <HAL_ADC_ConfigChannel>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000548:	f000 fd6e 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000898 	.word	0x20000898
 8000558:	40012000 	.word	0x40012000

0800055c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a2f      	ldr	r2, [pc, #188]	@ (8000638 <HAL_ADC_MspInit+0xdc>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d157      	bne.n	800062e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	4b2e      	ldr	r3, [pc, #184]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000586:	4a2d      	ldr	r2, [pc, #180]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800058c:	6453      	str	r3, [r2, #68]	@ 0x44
 800058e:	4b2b      	ldr	r3, [pc, #172]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b27      	ldr	r3, [pc, #156]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a26      	ldr	r2, [pc, #152]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b24      	ldr	r3, [pc, #144]	@ (800063c <HAL_ADC_MspInit+0xe0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b6:	2302      	movs	r3, #2
 80005b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ba:	2303      	movs	r3, #3
 80005bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	481d      	ldr	r0, [pc, #116]	@ (8000640 <HAL_ADC_MspInit+0xe4>)
 80005ca:	f002 f8d7 	bl	800277c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80005ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000648 <HAL_ADC_MspInit+0xec>)
 80005d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80005d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005da:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e0:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005e6:	4b17      	ldr	r3, [pc, #92]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80005f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005f6:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 80005f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005fe:	4b11      	ldr	r3, [pc, #68]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000600:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000604:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000606:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800060c:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000612:	480c      	ldr	r0, [pc, #48]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000614:	f001 fd42 	bl	800209c <HAL_DMA_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800061e:	f000 fd03 	bl	8001028 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a07      	ldr	r2, [pc, #28]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 8000626:	639a      	str	r2, [r3, #56]	@ 0x38
 8000628:	4a06      	ldr	r2, [pc, #24]	@ (8000644 <HAL_ADC_MspInit+0xe8>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	@ 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40012000 	.word	0x40012000
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000
 8000644:	200008e0 	.word	0x200008e0
 8000648:	40026410 	.word	0x40026410

0800064c <init_AudioReset>:
#include "i2s.h"
#include "spi.h"
#include "usb_host.h"
#include "gpio.h"
#include "audio.h"
void init_AudioReset() {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2110      	movs	r1, #16
 8000654:	4802      	ldr	r0, [pc, #8]	@ (8000660 <init_AudioReset+0x14>)
 8000656:	f002 fa2d 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020c00 	.word	0x40020c00

08000664 <configAudio>:
void configAudio() {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af02      	add	r7, sp, #8
    uint8_t bytes[2];
    init_AudioReset();
 800066a:	f7ff ffef 	bl	800064c <init_AudioReset>

    /* Power sequence */
    // Set Power Control Register to "on" state
    bytes[0] = 0x02;
 800066e:	2302      	movs	r3, #2
 8000670:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x01;
 8000672:	2301      	movs	r3, #1
 8000674:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000676:	1d3a      	adds	r2, r7, #4
 8000678:	2364      	movs	r3, #100	@ 0x64
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2302      	movs	r3, #2
 800067e:	2194      	movs	r1, #148	@ 0x94
 8000680:	486f      	ldr	r0, [pc, #444]	@ (8000840 <configAudio+0x1dc>)
 8000682:	f004 fca9 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    /* Initialization sequence */
    bytes[0] = 0x00;
 8000686:	2300      	movs	r3, #0
 8000688:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x99;
 800068a:	2399      	movs	r3, #153	@ 0x99
 800068c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800068e:	1d3a      	adds	r2, r7, #4
 8000690:	2364      	movs	r3, #100	@ 0x64
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2302      	movs	r3, #2
 8000696:	2194      	movs	r1, #148	@ 0x94
 8000698:	4869      	ldr	r0, [pc, #420]	@ (8000840 <configAudio+0x1dc>)
 800069a:	f004 fc9d 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x47;
 800069e:	2347      	movs	r3, #71	@ 0x47
 80006a0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 80006a2:	2380      	movs	r3, #128	@ 0x80
 80006a4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006a6:	1d3a      	adds	r2, r7, #4
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2302      	movs	r3, #2
 80006ae:	2194      	movs	r1, #148	@ 0x94
 80006b0:	4863      	ldr	r0, [pc, #396]	@ (8000840 <configAudio+0x1dc>)
 80006b2:	f004 fc91 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 80006b6:	2332      	movs	r3, #50	@ 0x32
 80006b8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 80006ba:	2380      	movs	r3, #128	@ 0x80
 80006bc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	2364      	movs	r3, #100	@ 0x64
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2302      	movs	r3, #2
 80006c6:	2194      	movs	r1, #148	@ 0x94
 80006c8:	485d      	ldr	r0, [pc, #372]	@ (8000840 <configAudio+0x1dc>)
 80006ca:	f004 fc85 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 80006ce:	2332      	movs	r3, #50	@ 0x32
 80006d0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 80006d2:	2300      	movs	r3, #0
 80006d4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006d6:	1d3a      	adds	r2, r7, #4
 80006d8:	2364      	movs	r3, #100	@ 0x64
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2302      	movs	r3, #2
 80006de:	2194      	movs	r1, #148	@ 0x94
 80006e0:	4857      	ldr	r0, [pc, #348]	@ (8000840 <configAudio+0x1dc>)
 80006e2:	f004 fc79 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x00;
 80006e6:	2300      	movs	r3, #0
 80006e8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80006ee:	1d3a      	adds	r2, r7, #4
 80006f0:	2364      	movs	r3, #100	@ 0x64
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2302      	movs	r3, #2
 80006f6:	2194      	movs	r1, #148	@ 0x94
 80006f8:	4851      	ldr	r0, [pc, #324]	@ (8000840 <configAudio+0x1dc>)
 80006fa:	f004 fc6d 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    /* Ctl registers configuration */
    bytes[0] = 0x04;
 80006fe:	2304      	movs	r3, #4
 8000700:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xAF;
 8000702:	23af      	movs	r3, #175	@ 0xaf
 8000704:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000706:	1d3a      	adds	r2, r7, #4
 8000708:	2364      	movs	r3, #100	@ 0x64
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2302      	movs	r3, #2
 800070e:	2194      	movs	r1, #148	@ 0x94
 8000710:	484b      	ldr	r0, [pc, #300]	@ (8000840 <configAudio+0x1dc>)
 8000712:	f004 fc61 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0D;
 8000716:	230d      	movs	r3, #13
 8000718:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x70;
 800071a:	2370      	movs	r3, #112	@ 0x70
 800071c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800071e:	1d3a      	adds	r2, r7, #4
 8000720:	2364      	movs	r3, #100	@ 0x64
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2302      	movs	r3, #2
 8000726:	2194      	movs	r1, #148	@ 0x94
 8000728:	4845      	ldr	r0, [pc, #276]	@ (8000840 <configAudio+0x1dc>)
 800072a:	f004 fc55 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x05;
 800072e:	2305      	movs	r3, #5
 8000730:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x81;
 8000732:	2381      	movs	r3, #129	@ 0x81
 8000734:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000736:	1d3a      	adds	r2, r7, #4
 8000738:	2364      	movs	r3, #100	@ 0x64
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2302      	movs	r3, #2
 800073e:	2194      	movs	r1, #148	@ 0x94
 8000740:	483f      	ldr	r0, [pc, #252]	@ (8000840 <configAudio+0x1dc>)
 8000742:	f004 fc49 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x06;
 8000746:	2306      	movs	r3, #6
 8000748:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x07;
 800074a:	2307      	movs	r3, #7
 800074c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800074e:	1d3a      	adds	r2, r7, #4
 8000750:	2364      	movs	r3, #100	@ 0x64
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2302      	movs	r3, #2
 8000756:	2194      	movs	r1, #148	@ 0x94
 8000758:	4839      	ldr	r0, [pc, #228]	@ (8000840 <configAudio+0x1dc>)
 800075a:	f004 fc3d 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0A;
 800075e:	230a      	movs	r3, #10
 8000760:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000762:	2300      	movs	r3, #0
 8000764:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000766:	1d3a      	adds	r2, r7, #4
 8000768:	2364      	movs	r3, #100	@ 0x64
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2302      	movs	r3, #2
 800076e:	2194      	movs	r1, #148	@ 0x94
 8000770:	4833      	ldr	r0, [pc, #204]	@ (8000840 <configAudio+0x1dc>)
 8000772:	f004 fc31 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x27;
 8000776:	2327      	movs	r3, #39	@ 0x27
 8000778:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800077e:	1d3a      	adds	r2, r7, #4
 8000780:	2364      	movs	r3, #100	@ 0x64
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2302      	movs	r3, #2
 8000786:	2194      	movs	r1, #148	@ 0x94
 8000788:	482d      	ldr	r0, [pc, #180]	@ (8000840 <configAudio+0x1dc>)
 800078a:	f004 fc25 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x1F;
 800078e:	231f      	movs	r3, #31
 8000790:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x0F;
 8000792:	230f      	movs	r3, #15
 8000794:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000796:	1d3a      	adds	r2, r7, #4
 8000798:	2364      	movs	r3, #100	@ 0x64
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2302      	movs	r3, #2
 800079e:	2194      	movs	r1, #148	@ 0x94
 80007a0:	4827      	ldr	r0, [pc, #156]	@ (8000840 <configAudio+0x1dc>)
 80007a2:	f004 fc19 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x22;
 80007a6:	2322      	movs	r3, #34	@ 0x22
 80007a8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xC0;
 80007aa:	23c0      	movs	r3, #192	@ 0xc0
 80007ac:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007ae:	1d3a      	adds	r2, r7, #4
 80007b0:	2364      	movs	r3, #100	@ 0x64
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2302      	movs	r3, #2
 80007b6:	2194      	movs	r1, #148	@ 0x94
 80007b8:	4821      	ldr	r0, [pc, #132]	@ (8000840 <configAudio+0x1dc>)
 80007ba:	f004 fc0d 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x14;
 80007be:	2314      	movs	r3, #20
 80007c0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007c6:	1d3a      	adds	r2, r7, #4
 80007c8:	2364      	movs	r3, #100	@ 0x64
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2302      	movs	r3, #2
 80007ce:	2194      	movs	r1, #148	@ 0x94
 80007d0:	481b      	ldr	r0, [pc, #108]	@ (8000840 <configAudio+0x1dc>)
 80007d2:	f004 fc01 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x15;
 80007d6:	2315      	movs	r3, #21
 80007d8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007de:	1d3a      	adds	r2, r7, #4
 80007e0:	2364      	movs	r3, #100	@ 0x64
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2302      	movs	r3, #2
 80007e6:	2194      	movs	r1, #148	@ 0x94
 80007e8:	4815      	ldr	r0, [pc, #84]	@ (8000840 <configAudio+0x1dc>)
 80007ea:	f004 fbf5 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x20;
 80007ee:	2320      	movs	r3, #32
 80007f0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80007f2:	2318      	movs	r3, #24
 80007f4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80007f6:	1d3a      	adds	r2, r7, #4
 80007f8:	2364      	movs	r3, #100	@ 0x64
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2302      	movs	r3, #2
 80007fe:	2194      	movs	r1, #148	@ 0x94
 8000800:	480f      	ldr	r0, [pc, #60]	@ (8000840 <configAudio+0x1dc>)
 8000802:	f004 fbe9 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x21;
 8000806:	2321      	movs	r3, #33	@ 0x21
 8000808:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 800080a:	2318      	movs	r3, #24
 800080c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800080e:	1d3a      	adds	r2, r7, #4
 8000810:	2364      	movs	r3, #100	@ 0x64
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2302      	movs	r3, #2
 8000816:	2194      	movs	r1, #148	@ 0x94
 8000818:	4809      	ldr	r0, [pc, #36]	@ (8000840 <configAudio+0x1dc>)
 800081a:	f004 fbdd 	bl	8004fd8 <HAL_I2C_Master_Transmit>

    /* Power up */
    bytes[0] = 0x02;
 800081e:	2302      	movs	r3, #2
 8000820:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x9E;
 8000822:	239e      	movs	r3, #158	@ 0x9e
 8000824:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000826:	1d3a      	adds	r2, r7, #4
 8000828:	2364      	movs	r3, #100	@ 0x64
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2302      	movs	r3, #2
 800082e:	2194      	movs	r1, #148	@ 0x94
 8000830:	4803      	ldr	r0, [pc, #12]	@ (8000840 <configAudio+0x1dc>)
 8000832:	f004 fbd1 	bl	8004fd8 <HAL_I2C_Master_Transmit>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000940 	.word	0x20000940

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_DMA_Init+0x78>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a1a      	ldr	r2, [pc, #104]	@ (80008bc <MX_DMA_Init+0x78>)
 8000854:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_DMA_Init+0x78>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_DMA_Init+0x78>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a13      	ldr	r2, [pc, #76]	@ (80008bc <MX_DMA_Init+0x78>)
 8000870:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_DMA_Init+0x78>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2011      	movs	r0, #17
 8000888:	f001 fbd1 	bl	800202e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800088c:	2011      	movs	r0, #17
 800088e:	f001 fbea 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	202f      	movs	r0, #47	@ 0x2f
 8000898:	f001 fbc9 	bl	800202e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800089c:	202f      	movs	r0, #47	@ 0x2f
 800089e:	f001 fbe2 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	2038      	movs	r0, #56	@ 0x38
 80008a8:	f001 fbc1 	bl	800202e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008ac:	2038      	movs	r0, #56	@ 0x38
 80008ae:	f001 fbda 	bl	8002066 <HAL_NVIC_EnableIRQ>

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	@ 0x30
 80008c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	4b72      	ldr	r3, [pc, #456]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a71      	ldr	r2, [pc, #452]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 80008e0:	f043 0310 	orr.w	r3, r3, #16
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b6f      	ldr	r3, [pc, #444]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0310 	and.w	r3, r3, #16
 80008ee:	61bb      	str	r3, [r7, #24]
 80008f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	4b6b      	ldr	r3, [pc, #428]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a6a      	ldr	r2, [pc, #424]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b68      	ldr	r3, [pc, #416]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b64      	ldr	r3, [pc, #400]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a63      	ldr	r2, [pc, #396]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b61      	ldr	r3, [pc, #388]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b5d      	ldr	r3, [pc, #372]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a5c      	ldr	r2, [pc, #368]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b5a      	ldr	r3, [pc, #360]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b56      	ldr	r3, [pc, #344]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a55      	ldr	r2, [pc, #340]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b53      	ldr	r3, [pc, #332]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b4f      	ldr	r3, [pc, #316]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a4e      	ldr	r2, [pc, #312]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa4 <MX_GPIO_Init+0x1e4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	2108      	movs	r1, #8
 8000982:	4849      	ldr	r0, [pc, #292]	@ (8000aa8 <MX_GPIO_Init+0x1e8>)
 8000984:	f002 f896 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2101      	movs	r1, #1
 800098c:	4847      	ldr	r0, [pc, #284]	@ (8000aac <MX_GPIO_Init+0x1ec>)
 800098e:	f002 f891 	bl	8002ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000992:	2200      	movs	r2, #0
 8000994:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000998:	4845      	ldr	r0, [pc, #276]	@ (8000ab0 <MX_GPIO_Init+0x1f0>)
 800099a:	f002 f88b 	bl	8002ab4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800099e:	2308      	movs	r3, #8
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	483c      	ldr	r0, [pc, #240]	@ (8000aa8 <MX_GPIO_Init+0x1e8>)
 80009b6:	f001 fee1 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4836      	ldr	r0, [pc, #216]	@ (8000aac <MX_GPIO_Init+0x1ec>)
 80009d2:	f001 fed3 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009d6:	2308      	movs	r3, #8
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009e6:	2305      	movs	r3, #5
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	482e      	ldr	r0, [pc, #184]	@ (8000aac <MX_GPIO_Init+0x1ec>)
 80009f2:	f001 fec3 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	482a      	ldr	r0, [pc, #168]	@ (8000ab4 <MX_GPIO_Init+0x1f4>)
 8000a0c:	f001 feb6 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a10:	2304      	movs	r3, #4
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	4825      	ldr	r0, [pc, #148]	@ (8000ab8 <MX_GPIO_Init+0x1f8>)
 8000a24:	f001 feaa 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	481c      	ldr	r0, [pc, #112]	@ (8000ab8 <MX_GPIO_Init+0x1f8>)
 8000a46:	f001 fe99 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a4a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000a4e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4813      	ldr	r0, [pc, #76]	@ (8000ab0 <MX_GPIO_Init+0x1f0>)
 8000a64:	f001 fe8a 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <MX_GPIO_Init+0x1f0>)
 8000a7c:	f001 fe7e 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a84:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_GPIO_Init+0x1e8>)
 8000a96:	f001 fe71 	bl	800277c <HAL_GPIO_Init>

}
 8000a9a:	bf00      	nop
 8000a9c:	3730      	adds	r7, #48	@ 0x30
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	40020400 	.word	0x40020400

08000abc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ac2:	4a13      	ldr	r2, [pc, #76]	@ (8000b10 <MX_I2C1_Init+0x54>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ac8:	4a12      	ldr	r2, [pc, #72]	@ (8000b14 <MX_I2C1_Init+0x58>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ade:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_I2C1_Init+0x50>)
 8000afa:	f004 f929 	bl	8004d50 <HAL_I2C_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b04:	f000 fa90 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000940 	.word	0x20000940
 8000b10:	40005400 	.word	0x40005400
 8000b14:	000186a0 	.word	0x000186a0

08000b18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	@ 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a19      	ldr	r2, [pc, #100]	@ (8000b9c <HAL_I2C_MspInit+0x84>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d12c      	bne.n	8000b94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a17      	ldr	r2, [pc, #92]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b56:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b5c:	2312      	movs	r3, #18
 8000b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <HAL_I2C_MspInit+0x8c>)
 8000b74:	f001 fe02 	bl	800277c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b88:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <HAL_I2C_MspInit+0x88>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	@ 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020400 	.word	0x40020400

08000ba8 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bac:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bae:	4a14      	ldr	r2, [pc, #80]	@ (8000c00 <MX_I2S3_Init+0x58>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bb2:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bb8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bcc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bd0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000bd4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	@ (8000bfc <MX_I2S3_Init+0x54>)
 8000bea:	f004 fd4f 	bl	800568c <HAL_I2S_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000bf4:	f000 fa18 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000994 	.word	0x20000994
 8000c00:	40003c00 	.word	0x40003c00

08000c04 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08e      	sub	sp, #56	@ 0x38
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a49      	ldr	r2, [pc, #292]	@ (8000d54 <HAL_I2S_MspInit+0x150>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	f040 808b 	bne.w	8000d4c <HAL_I2S_MspInit+0x148>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c36:	2301      	movs	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c3a:	23c0      	movs	r3, #192	@ 0xc0
 8000c3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4618      	mov	r0, r3
 8000c48:	f005 ff50 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000c52:	f000 f9e9 	bl	8001028 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	4a3e      	ldr	r2, [pc, #248]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c66:	4b3c      	ldr	r3, [pc, #240]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b38      	ldr	r3, [pc, #224]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a37      	ldr	r2, [pc, #220]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b35      	ldr	r3, [pc, #212]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b31      	ldr	r3, [pc, #196]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a30      	ldr	r2, [pc, #192]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d58 <HAL_I2S_MspInit+0x154>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000caa:	2310      	movs	r3, #16
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cba:	2306      	movs	r3, #6
 8000cbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4825      	ldr	r0, [pc, #148]	@ (8000d5c <HAL_I2S_MspInit+0x158>)
 8000cc6:	f001 fd59 	bl	800277c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000cca:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cdc:	2306      	movs	r3, #6
 8000cde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	481e      	ldr	r0, [pc, #120]	@ (8000d60 <HAL_I2S_MspInit+0x15c>)
 8000ce8:	f001 fd48 	bl	800277c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000cee:	4a1e      	ldr	r2, [pc, #120]	@ (8000d68 <HAL_I2S_MspInit+0x164>)
 8000cf0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000cfa:	2240      	movs	r2, #64	@ 0x40
 8000cfc:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d04:	4b17      	ldr	r3, [pc, #92]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d0a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d12:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d1a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d22:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000d30:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d32:	f001 f9b3 	bl	800209c <HAL_DMA_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 8000d3c:	f000 f974 	bl	8001028 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a08      	ldr	r2, [pc, #32]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d44:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d46:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <HAL_I2S_MspInit+0x160>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3738      	adds	r7, #56	@ 0x38
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40003c00 	.word	0x40003c00
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40020800 	.word	0x40020800
 8000d64:	200009dc 	.word	0x200009dc
 8000d68:	400260b8 	.word	0x400260b8

08000d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d70:	f000 fbe4 	bl	800153c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d74:	f000 f86c 	bl	8000e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d78:	f7ff fda2 	bl	80008c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d7c:	f7ff fd62 	bl	8000844 <MX_DMA_Init>
  MX_I2C1_Init();
 8000d80:	f7ff fe9c 	bl	8000abc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d84:	f7ff ff10 	bl	8000ba8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d88:	f000 f954 	bl	8001034 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d8c:	f00a fa2a 	bl	800b1e4 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000d90:	f000 fa96 	bl	80012c0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000d94:	f7ff fb90 	bl	80004b8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000d98:	f000 fafe 	bl	8001398 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  configAudio();
 8000d9c:	f7ff fc62 	bl	8000664 <configAudio>
  init_fir_filter();
 8000da0:	f000 f8e6 	bl	8000f70 <init_fir_filter>

  HAL_TIM_Base_Start(&htim2);
 8000da4:	4821      	ldr	r0, [pc, #132]	@ (8000e2c <main+0xc0>)
 8000da6:	f006 f8bb 	bl	8006f20 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_signal, BUFFER_SIZE);
 8000daa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dae:	4920      	ldr	r1, [pc, #128]	@ (8000e30 <main+0xc4>)
 8000db0:	4820      	ldr	r0, [pc, #128]	@ (8000e34 <main+0xc8>)
 8000db2:	f000 fc9d 	bl	80016f0 <HAL_ADC_Start_DMA>

  HAL_I2S_Transmit_DMA(&hi2s3, filtered_signal, BUFFER_SIZE);
 8000db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dba:	491f      	ldr	r1, [pc, #124]	@ (8000e38 <main+0xcc>)
 8000dbc:	481f      	ldr	r0, [pc, #124]	@ (8000e3c <main+0xd0>)
 8000dbe:	f004 fda5 	bl	800590c <HAL_I2S_Transmit_DMA>

//  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)filtered_signal, sizeof(filtered_signal));
  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)filtered_signal, sizeof(filtered_signal));
 8000dc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dc6:	491c      	ldr	r1, [pc, #112]	@ (8000e38 <main+0xcc>)
 8000dc8:	481d      	ldr	r0, [pc, #116]	@ (8000e40 <main+0xd4>)
 8000dca:	f006 fbeb 	bl	80075a4 <HAL_UART_Transmit_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000dce:	f00a fa2f 	bl	800b230 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (fx_ready == 1) {
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <main+0xd8>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d1f8      	bne.n	8000dce <main+0x62>
		fx_ready = 0;
 8000ddc:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <main+0xd8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
		 convert_to_q15(adc_signal, conv_signal, BUFFER_SIZE);
 8000de2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000de6:	4918      	ldr	r1, [pc, #96]	@ (8000e48 <main+0xdc>)
 8000de8:	4811      	ldr	r0, [pc, #68]	@ (8000e30 <main+0xc4>)
 8000dea:	f000 f89b 	bl	8000f24 <convert_to_q15>

        last_systick = HAL_GetTick();
 8000dee:	f000 fc0b 	bl	8001608 <HAL_GetTick>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a15      	ldr	r2, [pc, #84]	@ (8000e4c <main+0xe0>)
 8000df6:	6013      	str	r3, [r2, #0]
//		echo_effect_q15(conv_signal, output_signal, BUFFER_SIZE);
//		tremolo_effect(conv_signal, output_signal, BUFFER_SIZE, 440);
//		smooth_signal_q15(conv_signal, output_signal, BUFFER_SIZE, 5);
//		last_systick = HAL_GetTick();

		last_systick = HAL_GetTick();
 8000df8:	f000 fc06 	bl	8001608 <HAL_GetTick>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a13      	ldr	r2, [pc, #76]	@ (8000e4c <main+0xe0>)
 8000e00:	6013      	str	r3, [r2, #0]
//		amplify_signal_q15(conv_signal, gained_signal, BUFFER_SIZE, 1.3f);
		last_systick = HAL_GetTick();
 8000e02:	f000 fc01 	bl	8001608 <HAL_GetTick>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a10      	ldr	r2, [pc, #64]	@ (8000e4c <main+0xe0>)
 8000e0a:	6013      	str	r3, [r2, #0]
		fir_filter(conv_signal, filtered_signal); //traje 3 milisekunde
 8000e0c:	490a      	ldr	r1, [pc, #40]	@ (8000e38 <main+0xcc>)
 8000e0e:	480e      	ldr	r0, [pc, #56]	@ (8000e48 <main+0xdc>)
 8000e10:	f000 f8cc 	bl	8000fac <fir_filter>
//		convert_to_uint16(filtered_signal, output_signal, BUFFER_SIZE);

		last_systick = HAL_GetTick();
 8000e14:	f000 fbf8 	bl	8001608 <HAL_GetTick>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e4c <main+0xe0>)
 8000e1c:	6013      	str	r3, [r2, #0]




        last_systick = HAL_GetTick();
 8000e1e:	f000 fbf3 	bl	8001608 <HAL_GetTick>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a09      	ldr	r2, [pc, #36]	@ (8000e4c <main+0xe0>)
 8000e26:	6013      	str	r3, [r2, #0]
    MX_USB_HOST_Process();
 8000e28:	e7d1      	b.n	8000dce <main+0x62>
 8000e2a:	bf00      	nop
 8000e2c:	200020ac 	.word	0x200020ac
 8000e30:	20000a3c 	.word	0x20000a3c
 8000e34:	20000898 	.word	0x20000898
 8000e38:	20001244 	.word	0x20001244
 8000e3c:	20000994 	.word	0x20000994
 8000e40:	200020f4 	.word	0x200020f4
 8000e44:	20000e3c 	.word	0x20000e3c
 8000e48:	20000e44 	.word	0x20000e44
 8000e4c:	20000e40 	.word	0x20000e40

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b094      	sub	sp, #80	@ 0x50
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0320 	add.w	r3, r7, #32
 8000e5a:	2230      	movs	r2, #48	@ 0x30
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f00a ffc2 	bl	800bde8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	4b28      	ldr	r3, [pc, #160]	@ (8000f1c <SystemClock_Config+0xcc>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	4a27      	ldr	r2, [pc, #156]	@ (8000f1c <SystemClock_Config+0xcc>)
 8000e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e84:	4b25      	ldr	r3, [pc, #148]	@ (8000f1c <SystemClock_Config+0xcc>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <SystemClock_Config+0xd0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a21      	ldr	r2, [pc, #132]	@ (8000f20 <SystemClock_Config+0xd0>)
 8000e9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f20 <SystemClock_Config+0xd0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eac:	2301      	movs	r3, #1
 8000eae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ec4:	23a8      	movs	r3, #168	@ 0xa8
 8000ec6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ecc:	2307      	movs	r3, #7
 8000ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed0:	f107 0320 	add.w	r3, r7, #32
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f005 f971 	bl	80061bc <HAL_RCC_OscConfig>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ee0:	f000 f8a2 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ef0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ef4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ef6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000efa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2105      	movs	r1, #5
 8000f02:	4618      	mov	r0, r3
 8000f04:	f005 fbd2 	bl	80066ac <HAL_RCC_ClockConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f0e:	f000 f88b 	bl	8001028 <Error_Handler>
  }
}
 8000f12:	bf00      	nop
 8000f14:	3750      	adds	r7, #80	@ 0x50
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40007000 	.word	0x40007000

08000f24 <convert_to_q15>:
}



//FIR FILTER
void convert_to_q15(uint16_t *rawInput, q15_t *convertedSignal, int size) {
 8000f24:	b480      	push	{r7}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e010      	b.n	8000f58 <convert_to_q15+0x34>
        // Map uint16_t (0 to 65535) to q15_t (-32768 to 32767)
        convertedSignal[i] = (q15_t)((int32_t)(rawInput[i] - 32768));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8000f44:	b299      	uxth	r1, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b20a      	sxth	r2, r1
 8000f50:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbea      	blt.n	8000f36 <convert_to_q15+0x12>
//        convertedSignal[i] = (q15_t)((int32_t)(rawInput[i] - 0));
    }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	371c      	adds	r7, #28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <init_fir_filter>:
        uint16_array[i] = (uint16_t)(q15_array[i] + 32768);
    }
}


void init_fir_filter(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af02      	add	r7, sp, #8
    arm_float_to_q15(firCoeffs, firCoeffsQ15, NUM_TAPS);
 8000f76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f7a:	4908      	ldr	r1, [pc, #32]	@ (8000f9c <init_fir_filter+0x2c>)
 8000f7c:	4808      	ldr	r0, [pc, #32]	@ (8000fa0 <init_fir_filter+0x30>)
 8000f7e:	f00a fc3b 	bl	800b7f8 <arm_float_to_q15>
    arm_fir_init_q15(&S, NUM_TAPS, firCoeffsQ15, firStateQ15, BLOCK_SIZE);
 8000f82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <init_fir_filter+0x34>)
 8000f8a:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <init_fir_filter+0x2c>)
 8000f8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <init_fir_filter+0x38>)
 8000f92:	f00a fe55 	bl	800bc40 <arm_fir_init_q15>
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20001644 	.word	0x20001644
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20001a44 	.word	0x20001a44
 8000fa8:	20002044 	.word	0x20002044

08000fac <fir_filter>:
void fir_filter(q15_t *input, q15_t *output) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < BUFFER_SIZE; i += BLOCK_SIZE) {
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	e010      	b.n	8000fde <fir_filter+0x32>
        arm_fir_q15(&S, &input[i], &output[i], BLOCK_SIZE);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	18d1      	adds	r1, r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	441a      	add	r2, r3
 8000fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fd0:	4807      	ldr	r0, [pc, #28]	@ (8000ff0 <fir_filter+0x44>)
 8000fd2:	f00a fca9 	bl	800b928 <arm_fir_q15>
    for (int i = 0; i < BUFFER_SIZE; i += BLOCK_SIZE) {
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fe4:	dbea      	blt.n	8000fbc <fir_filter+0x10>
    }
}
 8000fe6:	bf00      	nop
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20002044 	.word	0x20002044

08000ff4 <HAL_ADC_ConvCpltCallback>:
    }
}



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	fx_ready = 1;
 8000ffc:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
//	last_dma_systick = __HAL_TIM_GET_COUNTER(&htim2);
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000e3c 	.word	0x20000e3c

08001014 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI3) {
    }
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <Error_Handler+0x8>

08001034 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001038:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <MX_SPI1_Init+0x64>)
 800103a:	4a18      	ldr	r2, [pc, #96]	@ (800109c <MX_SPI1_Init+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001040:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001044:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <MX_SPI1_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_SPI1_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001064:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106c:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <MX_SPI1_Init+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001078:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <MX_SPI1_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001080:	220a      	movs	r2, #10
 8001082:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <MX_SPI1_Init+0x64>)
 8001086:	f005 fe73 	bl	8006d70 <HAL_SPI_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001090:	f7ff ffca 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20002050 	.word	0x20002050
 800109c:	40013000 	.word	0x40013000

080010a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	@ 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a19      	ldr	r2, [pc, #100]	@ (8001124 <HAL_SPI_MspInit+0x84>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12b      	bne.n	800111a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <HAL_SPI_MspInit+0x88>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <HAL_SPI_MspInit+0x88>)
 80010cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <HAL_SPI_MspInit+0x88>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <HAL_SPI_MspInit+0x88>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a10      	ldr	r2, [pc, #64]	@ (8001128 <HAL_SPI_MspInit+0x88>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <HAL_SPI_MspInit+0x88>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010fa:	23e0      	movs	r3, #224	@ 0xe0
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800110a:	2305      	movs	r3, #5
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	@ (800112c <HAL_SPI_MspInit+0x8c>)
 8001116:	f001 fb31 	bl	800277c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	@ 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40013000 	.word	0x40013000
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <HAL_MspInit+0x4c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	4a0f      	ldr	r2, [pc, #60]	@ (800117c <HAL_MspInit+0x4c>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001144:	6453      	str	r3, [r2, #68]	@ 0x44
 8001146:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <HAL_MspInit+0x4c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	4b09      	ldr	r3, [pc, #36]	@ (800117c <HAL_MspInit+0x4c>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	4a08      	ldr	r2, [pc, #32]	@ (800117c <HAL_MspInit+0x4c>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001160:	6413      	str	r3, [r2, #64]	@ 0x40
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_MspInit+0x4c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800116e:	2007      	movs	r0, #7
 8001170:	f000 ff52 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <NMI_Handler+0x4>

08001188 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <MemManage_Handler+0x4>

08001198 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d6:	f000 fa03 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011e4:	4802      	ldr	r0, [pc, #8]	@ (80011f0 <DMA1_Stream6_IRQHandler+0x10>)
 80011e6:	f001 f85f 	bl	80022a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000213c 	.word	0x2000213c

080011f4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80011f8:	4802      	ldr	r0, [pc, #8]	@ (8001204 <DMA1_Stream7_IRQHandler+0x10>)
 80011fa:	f001 f855 	bl	80022a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200009dc 	.word	0x200009dc

08001208 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <DMA2_Stream0_IRQHandler+0x10>)
 800120e:	f001 f84b 	bl	80022a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200008e0 	.word	0x200008e0

0800121c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001220:	4802      	ldr	r0, [pc, #8]	@ (800122c <OTG_FS_IRQHandler+0x10>)
 8001222:	f001 ff41 	bl	80030a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000257c 	.word	0x2000257c

08001230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001238:	4a14      	ldr	r2, [pc, #80]	@ (800128c <_sbrk+0x5c>)
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <_sbrk+0x60>)
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001244:	4b13      	ldr	r3, [pc, #76]	@ (8001294 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <_sbrk+0x64>)
 800124e:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <_sbrk+0x68>)
 8001250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <_sbrk+0x64>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	429a      	cmp	r2, r3
 800125e:	d207      	bcs.n	8001270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001260:	f00a fdda 	bl	800be18 <__errno>
 8001264:	4603      	mov	r3, r0
 8001266:	220c      	movs	r2, #12
 8001268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800126e:	e009      	b.n	8001284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001276:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <_sbrk+0x64>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	4a05      	ldr	r2, [pc, #20]	@ (8001294 <_sbrk+0x64>)
 8001280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001282:	68fb      	ldr	r3, [r7, #12]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20020000 	.word	0x20020000
 8001290:	00000400 	.word	0x00000400
 8001294:	200020a8 	.word	0x200020a8
 8001298:	20002aa8 	.word	0x20002aa8

0800129c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <SystemInit+0x20>)
 80012a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012a6:	4a05      	ldr	r2, [pc, #20]	@ (80012bc <SystemInit+0x20>)
 80012a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <MX_TIM2_Init+0x94>)
 80012de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <MX_TIM2_Init+0x94>)
 80012e6:	2253      	movs	r2, #83	@ 0x53
 80012e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <MX_TIM2_Init+0x94>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23-1;
 80012f0:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <MX_TIM2_Init+0x94>)
 80012f2:	2216      	movs	r2, #22
 80012f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <MX_TIM2_Init+0x94>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fc:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <MX_TIM2_Init+0x94>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001302:	4814      	ldr	r0, [pc, #80]	@ (8001354 <MX_TIM2_Init+0x94>)
 8001304:	f005 fdbd 	bl	8006e82 <HAL_TIM_Base_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800130e:	f7ff fe8b 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001316:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	4619      	mov	r1, r3
 800131e:	480d      	ldr	r0, [pc, #52]	@ (8001354 <MX_TIM2_Init+0x94>)
 8001320:	f005 fe66 	bl	8006ff0 <HAL_TIM_ConfigClockSource>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800132a:	f7ff fe7d 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800132e:	2320      	movs	r3, #32
 8001330:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	@ (8001354 <MX_TIM2_Init+0x94>)
 800133c:	f006 f866 	bl	800740c <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001346:	f7ff fe6f 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200020ac 	.word	0x200020ac

08001358 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001368:	d10d      	bne.n	8001386 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <HAL_TIM_Base_MspInit+0x3c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	4a08      	ldr	r2, [pc, #32]	@ (8001394 <HAL_TIM_Base_MspInit+0x3c>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6413      	str	r3, [r2, #64]	@ 0x40
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_TIM_Base_MspInit+0x3c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800

08001398 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800139c:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 800139e:	4a12      	ldr	r2, [pc, #72]	@ (80013e8 <MX_USART2_UART_Init+0x50>)
 80013a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80013a2:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013a4:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80013a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80013bc:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013be:	2208      	movs	r2, #8
 80013c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	@ (80013e4 <MX_USART2_UART_Init+0x4c>)
 80013d0:	f006 f898 	bl	8007504 <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013da:	f7ff fe25 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200020f4 	.word	0x200020f4
 80013e8:	40004400 	.word	0x40004400

080013ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	@ 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a32      	ldr	r2, [pc, #200]	@ (80014d4 <HAL_UART_MspInit+0xe8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d15d      	bne.n	80014ca <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <HAL_UART_MspInit+0xec>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a30      	ldr	r2, [pc, #192]	@ (80014d8 <HAL_UART_MspInit+0xec>)
 8001418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <HAL_UART_MspInit+0xec>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b2a      	ldr	r3, [pc, #168]	@ (80014d8 <HAL_UART_MspInit+0xec>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a29      	ldr	r2, [pc, #164]	@ (80014d8 <HAL_UART_MspInit+0xec>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <HAL_UART_MspInit+0xec>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001446:	230c      	movs	r3, #12
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001456:	2307      	movs	r3, #7
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	481e      	ldr	r0, [pc, #120]	@ (80014dc <HAL_UART_MspInit+0xf0>)
 8001462:	f001 f98b 	bl	800277c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001466:	4b1e      	ldr	r3, [pc, #120]	@ (80014e0 <HAL_UART_MspInit+0xf4>)
 8001468:	4a1e      	ldr	r2, [pc, #120]	@ (80014e4 <HAL_UART_MspInit+0xf8>)
 800146a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800146c:	4b1c      	ldr	r3, [pc, #112]	@ (80014e0 <HAL_UART_MspInit+0xf4>)
 800146e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001472:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001474:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <HAL_UART_MspInit+0xf4>)
 8001476:	2240      	movs	r2, #64	@ 0x40
 8001478:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800147a:	4b19      	ldr	r3, [pc, #100]	@ (80014e0 <HAL_UART_MspInit+0xf4>)
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <HAL_UART_MspInit+0xf4>)
 8001482:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001486:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001488:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <HAL_UART_MspInit+0xf4>)
 800148a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800148e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001490:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <HAL_UART_MspInit+0xf4>)
 8001492:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001496:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <HAL_UART_MspInit+0xf4>)
 800149a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800149e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <HAL_UART_MspInit+0xf4>)
 80014a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014a6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <HAL_UART_MspInit+0xf4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014ae:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <HAL_UART_MspInit+0xf4>)
 80014b0:	f000 fdf4 	bl	800209c <HAL_DMA_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80014ba:	f7ff fdb5 	bl	8001028 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a07      	ldr	r2, [pc, #28]	@ (80014e0 <HAL_UART_MspInit+0xf4>)
 80014c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80014c4:	4a06      	ldr	r2, [pc, #24]	@ (80014e0 <HAL_UART_MspInit+0xf4>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014ca:	bf00      	nop
 80014cc:	3728      	adds	r7, #40	@ 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40004400 	.word	0x40004400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	2000213c 	.word	0x2000213c
 80014e4:	400260a0 	.word	0x400260a0

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001520 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014ec:	f7ff fed6 	bl	800129c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f0:	480c      	ldr	r0, [pc, #48]	@ (8001524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f2:	490d      	ldr	r1, [pc, #52]	@ (8001528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f4:	4a0d      	ldr	r2, [pc, #52]	@ (800152c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001508:	4c0a      	ldr	r4, [pc, #40]	@ (8001534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001516:	f00a fc85 	bl	800be24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f7ff fc27 	bl	8000d6c <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	2000087c 	.word	0x2000087c
  ldr r2, =_sidata
 800152c:	0800bf50 	.word	0x0800bf50
  ldr r2, =_sbss
 8001530:	2000087c 	.word	0x2000087c
  ldr r4, =_ebss
 8001534:	20002aa4 	.word	0x20002aa4

08001538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC_IRQHandler>
	...

0800153c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001540:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <HAL_Init+0x40>)
 8001546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <HAL_Init+0x40>)
 8001552:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	@ (800157c <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	@ (800157c <HAL_Init+0x40>)
 800155e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 fd57 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	2000      	movs	r0, #0
 800156c:	f000 f808 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fdde 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023c00 	.word	0x40023c00

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fd6f 	bl	8002082 <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015bc:	f000 fd37 	bl	800202e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	@ (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000800 	.word	0x20000800
 80015d8:	20000808 	.word	0x20000808
 80015dc:	20000804 	.word	0x20000804

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000808 	.word	0x20000808
 8001604:	2000219c 	.word	0x2000219c

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	2000219c 	.word	0x2000219c

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000808 	.word	0x20000808

08001668 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e033      	b.n	80016e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7fe ff68 	bl	800055c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016ae:	f023 0302 	bic.w	r3, r3, #2
 80016b2:	f043 0202 	orr.w	r2, r3, #2
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fa5e 	bl	8001b7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	f023 0303 	bic.w	r3, r3, #3
 80016ce:	f043 0201 	orr.w	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80016d6:	e001      	b.n	80016dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_ADC_Start_DMA+0x1e>
 800170a:	2302      	movs	r3, #2
 800170c:	e0e9      	b.n	80018e2 <HAL_ADC_Start_DMA+0x1f2>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d018      	beq.n	8001756 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0201 	orr.w	r2, r2, #1
 8001732:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001734:	4b6d      	ldr	r3, [pc, #436]	@ (80018ec <HAL_ADC_Start_DMA+0x1fc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a6d      	ldr	r2, [pc, #436]	@ (80018f0 <HAL_ADC_Start_DMA+0x200>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	0c9a      	lsrs	r2, r3, #18
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001748:	e002      	b.n	8001750 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	3b01      	subs	r3, #1
 800174e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f9      	bne.n	800174a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001764:	d107      	bne.n	8001776 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001774:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b01      	cmp	r3, #1
 8001782:	f040 80a1 	bne.w	80018c8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017c4:	d106      	bne.n	80017d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	f023 0206 	bic.w	r2, r3, #6
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80017d2:	e002      	b.n	80017da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e2:	4b44      	ldr	r3, [pc, #272]	@ (80018f4 <HAL_ADC_Start_DMA+0x204>)
 80017e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ea:	4a43      	ldr	r2, [pc, #268]	@ (80018f8 <HAL_ADC_Start_DMA+0x208>)
 80017ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f2:	4a42      	ldr	r2, [pc, #264]	@ (80018fc <HAL_ADC_Start_DMA+0x20c>)
 80017f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fa:	4a41      	ldr	r2, [pc, #260]	@ (8001900 <HAL_ADC_Start_DMA+0x210>)
 80017fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001806:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001816:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001826:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	334c      	adds	r3, #76	@ 0x4c
 8001832:	4619      	mov	r1, r3
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f000 fcde 	bl	80021f8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2b00      	cmp	r3, #0
 8001846:	d12a      	bne.n	800189e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2d      	ldr	r2, [pc, #180]	@ (8001904 <HAL_ADC_Start_DMA+0x214>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d015      	beq.n	800187e <HAL_ADC_Start_DMA+0x18e>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a2c      	ldr	r2, [pc, #176]	@ (8001908 <HAL_ADC_Start_DMA+0x218>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d105      	bne.n	8001868 <HAL_ADC_Start_DMA+0x178>
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <HAL_ADC_Start_DMA+0x204>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 031f 	and.w	r3, r3, #31
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00a      	beq.n	800187e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a27      	ldr	r2, [pc, #156]	@ (800190c <HAL_ADC_Start_DMA+0x21c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d136      	bne.n	80018e0 <HAL_ADC_Start_DMA+0x1f0>
 8001872:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <HAL_ADC_Start_DMA+0x204>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	2b00      	cmp	r3, #0
 800187c:	d130      	bne.n	80018e0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d129      	bne.n	80018e0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	e020      	b.n	80018e0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a18      	ldr	r2, [pc, #96]	@ (8001904 <HAL_ADC_Start_DMA+0x214>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d11b      	bne.n	80018e0 <HAL_ADC_Start_DMA+0x1f0>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d114      	bne.n	80018e0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	e00b      	b.n	80018e0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	f043 0210 	orr.w	r2, r3, #16
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000800 	.word	0x20000800
 80018f0:	431bde83 	.word	0x431bde83
 80018f4:	40012300 	.word	0x40012300
 80018f8:	08001d75 	.word	0x08001d75
 80018fc:	08001e2f 	.word	0x08001e2f
 8001900:	08001e4b 	.word	0x08001e4b
 8001904:	40012000 	.word	0x40012000
 8001908:	40012100 	.word	0x40012100
 800190c:	40012200 	.word	0x40012200

08001910 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x1c>
 8001950:	2302      	movs	r3, #2
 8001952:	e105      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x228>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b09      	cmp	r3, #9
 8001962:	d925      	bls.n	80019b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68d9      	ldr	r1, [r3, #12]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	3b1e      	subs	r3, #30
 800197a:	2207      	movs	r2, #7
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43da      	mvns	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	400a      	ands	r2, r1
 8001988:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68d9      	ldr	r1, [r3, #12]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	4618      	mov	r0, r3
 800199c:	4603      	mov	r3, r0
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4403      	add	r3, r0
 80019a2:	3b1e      	subs	r3, #30
 80019a4:	409a      	lsls	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	e022      	b.n	80019f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6919      	ldr	r1, [r3, #16]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	2207      	movs	r2, #7
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	400a      	ands	r2, r1
 80019d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6919      	ldr	r1, [r3, #16]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4618      	mov	r0, r3
 80019e6:	4603      	mov	r3, r0
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4403      	add	r3, r0
 80019ec:	409a      	lsls	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d824      	bhi.n	8001a48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3b05      	subs	r3, #5
 8001a10:	221f      	movs	r2, #31
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	3b05      	subs	r3, #5
 8001a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a46:	e04c      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	d824      	bhi.n	8001a9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	3b23      	subs	r3, #35	@ 0x23
 8001a62:	221f      	movs	r2, #31
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43da      	mvns	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	400a      	ands	r2, r1
 8001a70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	3b23      	subs	r3, #35	@ 0x23
 8001a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a98:	e023      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3b41      	subs	r3, #65	@ 0x41
 8001aac:	221f      	movs	r2, #31
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	400a      	ands	r2, r1
 8001aba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3b41      	subs	r3, #65	@ 0x41
 8001ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae2:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <HAL_ADC_ConfigChannel+0x234>)
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a21      	ldr	r2, [pc, #132]	@ (8001b70 <HAL_ADC_ConfigChannel+0x238>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d109      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x1cc>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b12      	cmp	r3, #18
 8001af6:	d105      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a19      	ldr	r2, [pc, #100]	@ (8001b70 <HAL_ADC_ConfigChannel+0x238>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d123      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x21e>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b10      	cmp	r3, #16
 8001b14:	d003      	beq.n	8001b1e <HAL_ADC_ConfigChannel+0x1e6>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b11      	cmp	r3, #17
 8001b1c:	d11b      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b10      	cmp	r3, #16
 8001b30:	d111      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b32:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <HAL_ADC_ConfigChannel+0x23c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a10      	ldr	r2, [pc, #64]	@ (8001b78 <HAL_ADC_ConfigChannel+0x240>)
 8001b38:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3c:	0c9a      	lsrs	r2, r3, #18
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b48:	e002      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f9      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	40012300 	.word	0x40012300
 8001b70:	40012000 	.word	0x40012000
 8001b74:	20000800 	.word	0x20000800
 8001b78:	431bde83 	.word	0x431bde83

08001b7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b84:	4b79      	ldr	r3, [pc, #484]	@ (8001d6c <ADC_Init+0x1f0>)
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	021a      	lsls	r2, r3, #8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6859      	ldr	r1, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6899      	ldr	r1, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0e:	4a58      	ldr	r2, [pc, #352]	@ (8001d70 <ADC_Init+0x1f4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d022      	beq.n	8001c5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6899      	ldr	r1, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6899      	ldr	r1, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	e00f      	b.n	8001c7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c78:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0202 	bic.w	r2, r2, #2
 8001c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7e1b      	ldrb	r3, [r3, #24]
 8001c94:	005a      	lsls	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01b      	beq.n	8001ce0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cb6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001cc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6859      	ldr	r1, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	035a      	lsls	r2, r3, #13
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	e007      	b.n	8001cf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	051a      	lsls	r2, r3, #20
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6899      	ldr	r1, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d32:	025a      	lsls	r2, r3, #9
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6899      	ldr	r1, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	029a      	lsls	r2, r3, #10
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	609a      	str	r2, [r3, #8]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	40012300 	.word	0x40012300
 8001d70:	0f000001 	.word	0x0f000001

08001d74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d13c      	bne.n	8001e08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d12b      	bne.n	8001e00 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d127      	bne.n	8001e00 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d119      	bne.n	8001e00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0220 	bic.w	r2, r2, #32
 8001dda:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f7ff f8f7 	bl	8000ff4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e06:	e00e      	b.n	8001e26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7ff fd85 	bl	8001924 <HAL_ADC_ErrorCallback>
}
 8001e1a:	e004      	b.n	8001e26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	4798      	blx	r3
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff fd67 	bl	8001910 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b084      	sub	sp, #16
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e56:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2240      	movs	r2, #64	@ 0x40
 8001e5c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f043 0204 	orr.w	r2, r3, #4
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff fd5a 	bl	8001924 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	@ (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db0b      	blt.n	8001f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4907      	ldr	r1, [pc, #28]	@ (8001f14 <__NVIC_EnableIRQ+0x38>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2001      	movs	r0, #1
 8001efe:	fa00 f202 	lsl.w	r2, r0, r2
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	@ (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	@ (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	@ 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe4:	d301      	bcc.n	8001fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fea:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <SysTick_Config+0x40>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ff8:	f7ff ff8e 	bl	8001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <SysTick_Config+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002002:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <SysTick_Config+0x40>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	e000e010 	.word	0xe000e010

08002018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff29 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002040:	f7ff ff3e 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8002044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7ff ff8e 	bl	8001f6c <NVIC_EncodePriority>
 8002050:	4602      	mov	r2, r0
 8002052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff5d 	bl	8001f18 <__NVIC_SetPriority>
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff31 	bl	8001edc <__NVIC_EnableIRQ>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ffa2 	bl	8001fd4 <SysTick_Config>
 8002090:	4603      	mov	r3, r0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff faae 	bl	8001608 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e099      	b.n	80021ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d8:	e00f      	b.n	80020fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020da:	f7ff fa95 	bl	8001608 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d908      	bls.n	80020fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2203      	movs	r2, #3
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e078      	b.n	80021ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e8      	bne.n	80020da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	4b38      	ldr	r3, [pc, #224]	@ (80021f4 <HAL_DMA_Init+0x158>)
 8002114:	4013      	ands	r3, r2
 8002116:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002126:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800213e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002150:	2b04      	cmp	r3, #4
 8002152:	d107      	bne.n	8002164 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	4313      	orrs	r3, r2
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4313      	orrs	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f023 0307 	bic.w	r3, r3, #7
 800217a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	4313      	orrs	r3, r2
 8002184:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	2b04      	cmp	r3, #4
 800218c:	d117      	bne.n	80021be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00e      	beq.n	80021be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fa6f 	bl	8002684 <DMA_CheckFifoParam>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2240      	movs	r2, #64	@ 0x40
 80021b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80021ba:	2301      	movs	r3, #1
 80021bc:	e016      	b.n	80021ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fa26 	bl	8002618 <DMA_CalcBaseAndBitshift>
 80021cc:	4603      	mov	r3, r0
 80021ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d4:	223f      	movs	r2, #63	@ 0x3f
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	f010803f 	.word	0xf010803f

080021f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_DMA_Start_IT+0x26>
 800221a:	2302      	movs	r3, #2
 800221c:	e040      	b.n	80022a0 <HAL_DMA_Start_IT+0xa8>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d12f      	bne.n	8002292 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2202      	movs	r2, #2
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f9b8 	bl	80025bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002250:	223f      	movs	r2, #63	@ 0x3f
 8002252:	409a      	lsls	r2, r3
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0216 	orr.w	r2, r2, #22
 8002266:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0208 	orr.w	r2, r2, #8
 800227e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e005      	b.n	800229e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800229a:	2302      	movs	r3, #2
 800229c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800229e:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022b4:	4b8e      	ldr	r3, [pc, #568]	@ (80024f0 <HAL_DMA_IRQHandler+0x248>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a8e      	ldr	r2, [pc, #568]	@ (80024f4 <HAL_DMA_IRQHandler+0x24c>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0a9b      	lsrs	r3, r3, #10
 80022c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d2:	2208      	movs	r2, #8
 80022d4:	409a      	lsls	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4013      	ands	r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01a      	beq.n	8002314 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d013      	beq.n	8002314 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0204 	bic.w	r2, r2, #4
 80022fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	2208      	movs	r2, #8
 8002302:	409a      	lsls	r2, r3
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230c:	f043 0201 	orr.w	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002318:	2201      	movs	r2, #1
 800231a:	409a      	lsls	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d012      	beq.n	800234a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002336:	2201      	movs	r2, #1
 8002338:	409a      	lsls	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002342:	f043 0202 	orr.w	r2, r3, #2
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234e:	2204      	movs	r2, #4
 8002350:	409a      	lsls	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d012      	beq.n	8002380 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00b      	beq.n	8002380 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236c:	2204      	movs	r2, #4
 800236e:	409a      	lsls	r2, r3
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002378:	f043 0204 	orr.w	r2, r3, #4
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002384:	2210      	movs	r2, #16
 8002386:	409a      	lsls	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d043      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d03c      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a2:	2210      	movs	r2, #16
 80023a4:	409a      	lsls	r2, r3
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d018      	beq.n	80023ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d108      	bne.n	80023d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d024      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	4798      	blx	r3
 80023d6:	e01f      	b.n	8002418 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01b      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
 80023e8:	e016      	b.n	8002418 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d107      	bne.n	8002408 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0208 	bic.w	r2, r2, #8
 8002406:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241c:	2220      	movs	r2, #32
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 808f 	beq.w	8002548 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8087 	beq.w	8002548 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243e:	2220      	movs	r2, #32
 8002440:	409a      	lsls	r2, r3
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b05      	cmp	r3, #5
 8002450:	d136      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0216 	bic.w	r2, r2, #22
 8002460:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695a      	ldr	r2, [r3, #20]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002470:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <HAL_DMA_IRQHandler+0x1da>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0208 	bic.w	r2, r2, #8
 8002490:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002496:	223f      	movs	r2, #63	@ 0x3f
 8002498:	409a      	lsls	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d07e      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
        }
        return;
 80024be:	e079      	b.n	80025b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01d      	beq.n	800250a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10d      	bne.n	80024f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d031      	beq.n	8002548 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
 80024ec:	e02c      	b.n	8002548 <HAL_DMA_IRQHandler+0x2a0>
 80024ee:	bf00      	nop
 80024f0:	20000800 	.word	0x20000800
 80024f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d023      	beq.n	8002548 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
 8002508:	e01e      	b.n	8002548 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10f      	bne.n	8002538 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0210 	bic.w	r2, r2, #16
 8002526:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254c:	2b00      	cmp	r3, #0
 800254e:	d032      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d022      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2205      	movs	r2, #5
 8002560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	3301      	adds	r3, #1
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	429a      	cmp	r2, r3
 800257e:	d307      	bcc.n	8002590 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f2      	bne.n	8002574 <HAL_DMA_IRQHandler+0x2cc>
 800258e:	e000      	b.n	8002592 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002590:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4798      	blx	r3
 80025b2:	e000      	b.n	80025b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80025b4:	bf00      	nop
    }
  }
}
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b40      	cmp	r3, #64	@ 0x40
 80025e8:	d108      	bne.n	80025fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025fa:	e007      	b.n	800260c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	60da      	str	r2, [r3, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	3b10      	subs	r3, #16
 8002628:	4a14      	ldr	r2, [pc, #80]	@ (800267c <DMA_CalcBaseAndBitshift+0x64>)
 800262a:	fba2 2303 	umull	r2, r3, r2, r3
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002632:	4a13      	ldr	r2, [pc, #76]	@ (8002680 <DMA_CalcBaseAndBitshift+0x68>)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d909      	bls.n	800265a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800264e:	f023 0303 	bic.w	r3, r3, #3
 8002652:	1d1a      	adds	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	659a      	str	r2, [r3, #88]	@ 0x58
 8002658:	e007      	b.n	800266a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002662:	f023 0303 	bic.w	r3, r3, #3
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	aaaaaaab 	.word	0xaaaaaaab
 8002680:	0800bf38 	.word	0x0800bf38

08002684 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002694:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11f      	bne.n	80026de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d856      	bhi.n	8002752 <DMA_CheckFifoParam+0xce>
 80026a4:	a201      	add	r2, pc, #4	@ (adr r2, 80026ac <DMA_CheckFifoParam+0x28>)
 80026a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026aa:	bf00      	nop
 80026ac:	080026bd 	.word	0x080026bd
 80026b0:	080026cf 	.word	0x080026cf
 80026b4:	080026bd 	.word	0x080026bd
 80026b8:	08002753 	.word	0x08002753
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d046      	beq.n	8002756 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026cc:	e043      	b.n	8002756 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80026d6:	d140      	bne.n	800275a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026dc:	e03d      	b.n	800275a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026e6:	d121      	bne.n	800272c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d837      	bhi.n	800275e <DMA_CheckFifoParam+0xda>
 80026ee:	a201      	add	r2, pc, #4	@ (adr r2, 80026f4 <DMA_CheckFifoParam+0x70>)
 80026f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f4:	08002705 	.word	0x08002705
 80026f8:	0800270b 	.word	0x0800270b
 80026fc:	08002705 	.word	0x08002705
 8002700:	0800271d 	.word	0x0800271d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      break;
 8002708:	e030      	b.n	800276c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d025      	beq.n	8002762 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271a:	e022      	b.n	8002762 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002724:	d11f      	bne.n	8002766 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800272a:	e01c      	b.n	8002766 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d903      	bls.n	800273a <DMA_CheckFifoParam+0xb6>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d003      	beq.n	8002740 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002738:	e018      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
      break;
 800273e:	e015      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002744:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00e      	beq.n	800276a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      break;
 8002750:	e00b      	b.n	800276a <DMA_CheckFifoParam+0xe6>
      break;
 8002752:	bf00      	nop
 8002754:	e00a      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 8002756:	bf00      	nop
 8002758:	e008      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 800275a:	bf00      	nop
 800275c:	e006      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 800275e:	bf00      	nop
 8002760:	e004      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 8002762:	bf00      	nop
 8002764:	e002      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;   
 8002766:	bf00      	nop
 8002768:	e000      	b.n	800276c <DMA_CheckFifoParam+0xe8>
      break;
 800276a:	bf00      	nop
    }
  } 
  
  return status; 
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	@ 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	e16b      	b.n	8002a70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002798:	2201      	movs	r2, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	f040 815a 	bne.w	8002a6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d005      	beq.n	80027ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d130      	bne.n	8002830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002804:	2201      	movs	r2, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 0201 	and.w	r2, r3, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b03      	cmp	r3, #3
 800283a:	d017      	beq.n	800286c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d123      	bne.n	80028c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	08da      	lsrs	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3208      	adds	r2, #8
 8002880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	220f      	movs	r2, #15
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	08da      	lsrs	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3208      	adds	r2, #8
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0203 	and.w	r2, r3, #3
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80b4 	beq.w	8002a6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b60      	ldr	r3, [pc, #384]	@ (8002a88 <HAL_GPIO_Init+0x30c>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	4a5f      	ldr	r2, [pc, #380]	@ (8002a88 <HAL_GPIO_Init+0x30c>)
 800290c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002910:	6453      	str	r3, [r2, #68]	@ 0x44
 8002912:	4b5d      	ldr	r3, [pc, #372]	@ (8002a88 <HAL_GPIO_Init+0x30c>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291e:	4a5b      	ldr	r2, [pc, #364]	@ (8002a8c <HAL_GPIO_Init+0x310>)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3302      	adds	r3, #2
 8002926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	220f      	movs	r2, #15
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a52      	ldr	r2, [pc, #328]	@ (8002a90 <HAL_GPIO_Init+0x314>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d02b      	beq.n	80029a2 <HAL_GPIO_Init+0x226>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a51      	ldr	r2, [pc, #324]	@ (8002a94 <HAL_GPIO_Init+0x318>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d025      	beq.n	800299e <HAL_GPIO_Init+0x222>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a50      	ldr	r2, [pc, #320]	@ (8002a98 <HAL_GPIO_Init+0x31c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01f      	beq.n	800299a <HAL_GPIO_Init+0x21e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4f      	ldr	r2, [pc, #316]	@ (8002a9c <HAL_GPIO_Init+0x320>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d019      	beq.n	8002996 <HAL_GPIO_Init+0x21a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4e      	ldr	r2, [pc, #312]	@ (8002aa0 <HAL_GPIO_Init+0x324>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d013      	beq.n	8002992 <HAL_GPIO_Init+0x216>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4d      	ldr	r2, [pc, #308]	@ (8002aa4 <HAL_GPIO_Init+0x328>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00d      	beq.n	800298e <HAL_GPIO_Init+0x212>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4c      	ldr	r2, [pc, #304]	@ (8002aa8 <HAL_GPIO_Init+0x32c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <HAL_GPIO_Init+0x20e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4b      	ldr	r2, [pc, #300]	@ (8002aac <HAL_GPIO_Init+0x330>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d101      	bne.n	8002986 <HAL_GPIO_Init+0x20a>
 8002982:	2307      	movs	r3, #7
 8002984:	e00e      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 8002986:	2308      	movs	r3, #8
 8002988:	e00c      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 800298a:	2306      	movs	r3, #6
 800298c:	e00a      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 800298e:	2305      	movs	r3, #5
 8002990:	e008      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 8002992:	2304      	movs	r3, #4
 8002994:	e006      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 8002996:	2303      	movs	r3, #3
 8002998:	e004      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 800299a:	2302      	movs	r3, #2
 800299c:	e002      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_GPIO_Init+0x228>
 80029a2:	2300      	movs	r3, #0
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	f002 0203 	and.w	r2, r2, #3
 80029aa:	0092      	lsls	r2, r2, #2
 80029ac:	4093      	lsls	r3, r2
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b4:	4935      	ldr	r1, [pc, #212]	@ (8002a8c <HAL_GPIO_Init+0x310>)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3302      	adds	r3, #2
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e6:	4a32      	ldr	r2, [pc, #200]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ec:	4b30      	ldr	r3, [pc, #192]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a10:	4a27      	ldr	r2, [pc, #156]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a16:	4b26      	ldr	r3, [pc, #152]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a40:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a64:	4a12      	ldr	r2, [pc, #72]	@ (8002ab0 <HAL_GPIO_Init+0x334>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b0f      	cmp	r3, #15
 8002a74:	f67f ae90 	bls.w	8002798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3724      	adds	r7, #36	@ 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	40020000 	.word	0x40020000
 8002a94:	40020400 	.word	0x40020400
 8002a98:	40020800 	.word	0x40020800
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40021400 	.word	0x40021400
 8002aa8:	40021800 	.word	0x40021800
 8002aac:	40021c00 	.word	0x40021c00
 8002ab0:	40013c00 	.word	0x40013c00

08002ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac4:	787b      	ldrb	r3, [r7, #1]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aca:	887a      	ldrh	r2, [r7, #2]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ad0:	e003      	b.n	8002ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ad2:	887b      	ldrh	r3, [r7, #2]
 8002ad4:	041a      	lsls	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	619a      	str	r2, [r3, #24]
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b086      	sub	sp, #24
 8002aea:	af02      	add	r7, sp, #8
 8002aec:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e059      	b.n	8002bac <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f008 fbc4 	bl	800b2a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b26:	d102      	bne.n	8002b2e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f005 f9dd 	bl	8007ef2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7c1a      	ldrb	r2, [r3, #16]
 8002b40:	f88d 2000 	strb.w	r2, [sp]
 8002b44:	3304      	adds	r3, #4
 8002b46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b48:	f005 f95e 	bl	8007e08 <USB_CoreInit>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e026      	b.n	8002bac <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2101      	movs	r1, #1
 8002b64:	4618      	mov	r0, r3
 8002b66:	f005 f9d5 	bl	8007f14 <USB_SetCurrentMode>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e017      	b.n	8002bac <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7c1a      	ldrb	r2, [r3, #16]
 8002b84:	f88d 2000 	strb.w	r2, [sp]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b8c:	f005 fb78 	bl	8008280 <USB_HostInit>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e004      	b.n	8002bac <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b08b      	sub	sp, #44	@ 0x2c
 8002bb8:	af04      	add	r7, sp, #16
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	70fb      	strb	r3, [r7, #3]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	70bb      	strb	r3, [r7, #2]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002bce:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002bd0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_HCD_HC_Init+0x2c>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e09d      	b.n	8002d1c <HAL_HCD_HC_Init+0x168>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3319      	adds	r3, #25
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3314      	adds	r3, #20
 8002c0c:	787a      	ldrb	r2, [r7, #1]
 8002c0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3315      	adds	r3, #21
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3326      	adds	r3, #38	@ 0x26
 8002c34:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002c38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	78bb      	ldrb	r3, [r7, #2]
 8002c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c42:	b2d8      	uxtb	r0, r3
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	3316      	adds	r3, #22
 8002c52:	4602      	mov	r2, r0
 8002c54:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fbc8 	bl	80033f0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002c60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	da0a      	bge.n	8002c7e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3317      	adds	r3, #23
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	e009      	b.n	8002c92 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3317      	adds	r3, #23
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f005 fc56 	bl	8008548 <USB_GetHostSpeed>
 8002c9c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002c9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d10b      	bne.n	8002cbe <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d107      	bne.n	8002cbe <HAL_HCD_HC_Init+0x10a>
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d104      	bne.n	8002cbe <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2bbc      	cmp	r3, #188	@ 0xbc
 8002cb8:	d901      	bls.n	8002cbe <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002cba:	23bc      	movs	r3, #188	@ 0xbc
 8002cbc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	3318      	adds	r3, #24
 8002cce:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002cd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	b298      	uxth	r0, r3
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3328      	adds	r3, #40	@ 0x28
 8002ce8:	4602      	mov	r2, r0
 8002cea:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	787c      	ldrb	r4, [r7, #1]
 8002cf6:	78ba      	ldrb	r2, [r7, #2]
 8002cf8:	78f9      	ldrb	r1, [r7, #3]
 8002cfa:	9302      	str	r3, [sp, #8]
 8002cfc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	4623      	mov	r3, r4
 8002d0a:	f005 fc45 	bl	8008598 <USB_HC_Init>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd90      	pop	{r4, r7, pc}

08002d24 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_HCD_HC_Halt+0x1e>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e00f      	b.n	8002d62 <HAL_HCD_HC_Halt+0x3e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f005 ffd7 	bl	8008d06 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	4608      	mov	r0, r1
 8002d76:	4611      	mov	r1, r2
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	70fb      	strb	r3, [r7, #3]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	70bb      	strb	r3, [r7, #2]
 8002d82:	4613      	mov	r3, r2
 8002d84:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	3317      	adds	r3, #23
 8002d96:	78ba      	ldrb	r2, [r7, #2]
 8002d98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	3326      	adds	r3, #38	@ 0x26
 8002daa:	787a      	ldrb	r2, [r7, #1]
 8002dac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002dae:	7c3b      	ldrb	r3, [r7, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d114      	bne.n	8002dde <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	332a      	adds	r3, #42	@ 0x2a
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3319      	adds	r3, #25
 8002dd8:	7f3a      	ldrb	r2, [r7, #28]
 8002dda:	701a      	strb	r2, [r3, #0]
 8002ddc:	e009      	b.n	8002df2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	6879      	ldr	r1, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	332a      	adds	r3, #42	@ 0x2a
 8002dee:	2202      	movs	r2, #2
 8002df0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002df2:	787b      	ldrb	r3, [r7, #1]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	f200 8102 	bhi.w	8002ffe <HAL_HCD_HC_SubmitRequest+0x292>
 8002dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8002e00 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e00:	08002e11 	.word	0x08002e11
 8002e04:	08002fe9 	.word	0x08002fe9
 8002e08:	08002ed5 	.word	0x08002ed5
 8002e0c:	08002f5f 	.word	0x08002f5f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002e10:	7c3b      	ldrb	r3, [r7, #16]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	f040 80f5 	bne.w	8003002 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002e18:	78bb      	ldrb	r3, [r7, #2]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d12d      	bne.n	8002e7a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002e1e:	8b3b      	ldrh	r3, [r7, #24]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	333d      	adds	r3, #61	@ 0x3d
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	333d      	adds	r3, #61	@ 0x3d
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10a      	bne.n	8002e64 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	332a      	adds	r3, #42	@ 0x2a
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002e62:	e0ce      	b.n	8003002 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	332a      	adds	r3, #42	@ 0x2a
 8002e74:	2202      	movs	r2, #2
 8002e76:	701a      	strb	r2, [r3, #0]
      break;
 8002e78:	e0c3      	b.n	8003002 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	331a      	adds	r3, #26
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	f040 80b8 	bne.w	8003002 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	333c      	adds	r3, #60	@ 0x3c
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	332a      	adds	r3, #42	@ 0x2a
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
      break;
 8002ebc:	e0a1      	b.n	8003002 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	332a      	adds	r3, #42	@ 0x2a
 8002ece:	2202      	movs	r2, #2
 8002ed0:	701a      	strb	r2, [r3, #0]
      break;
 8002ed2:	e096      	b.n	8003002 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ed4:	78bb      	ldrb	r3, [r7, #2]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d120      	bne.n	8002f1c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	333d      	adds	r3, #61	@ 0x3d
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10a      	bne.n	8002f06 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	332a      	adds	r3, #42	@ 0x2a
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002f04:	e07e      	b.n	8003004 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	332a      	adds	r3, #42	@ 0x2a
 8002f16:	2202      	movs	r2, #2
 8002f18:	701a      	strb	r2, [r3, #0]
      break;
 8002f1a:	e073      	b.n	8003004 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	333c      	adds	r3, #60	@ 0x3c
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	332a      	adds	r3, #42	@ 0x2a
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
      break;
 8002f46:	e05d      	b.n	8003004 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	332a      	adds	r3, #42	@ 0x2a
 8002f58:	2202      	movs	r2, #2
 8002f5a:	701a      	strb	r2, [r3, #0]
      break;
 8002f5c:	e052      	b.n	8003004 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002f5e:	78bb      	ldrb	r3, [r7, #2]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d120      	bne.n	8002fa6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	333d      	adds	r3, #61	@ 0x3d
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	332a      	adds	r3, #42	@ 0x2a
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002f8e:	e039      	b.n	8003004 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	332a      	adds	r3, #42	@ 0x2a
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	701a      	strb	r2, [r3, #0]
      break;
 8002fa4:	e02e      	b.n	8003004 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	333c      	adds	r3, #60	@ 0x3c
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10a      	bne.n	8002fd2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	332a      	adds	r3, #42	@ 0x2a
 8002fcc:	2200      	movs	r2, #0
 8002fce:	701a      	strb	r2, [r3, #0]
      break;
 8002fd0:	e018      	b.n	8003004 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	332a      	adds	r3, #42	@ 0x2a
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	701a      	strb	r2, [r3, #0]
      break;
 8002fe6:	e00d      	b.n	8003004 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fe8:	78fa      	ldrb	r2, [r7, #3]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	332a      	adds	r3, #42	@ 0x2a
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
      break;
 8002ffc:	e002      	b.n	8003004 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003002:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	1a9b      	subs	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	440b      	add	r3, r1
 8003012:	332c      	adds	r3, #44	@ 0x2c
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	8b39      	ldrh	r1, [r7, #24]
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	1a9b      	subs	r3, r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4403      	add	r3, r0
 8003028:	3334      	adds	r3, #52	@ 0x34
 800302a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	334c      	adds	r3, #76	@ 0x4c
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	3338      	adds	r3, #56	@ 0x38
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	3315      	adds	r3, #21
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	334d      	adds	r3, #77	@ 0x4d
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	4613      	mov	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	3310      	adds	r3, #16
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4413      	add	r3, r2
 8003090:	1d19      	adds	r1, r3, #4
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	799b      	ldrb	r3, [r3, #6]
 8003096:	461a      	mov	r2, r3
 8003098:	f005 fbaa 	bl	80087f0 <USB_HC_StartXfer>
 800309c:	4603      	mov	r3, r0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop

080030a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f005 f89e 	bl	8008200 <USB_GetMode>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	f040 80fb 	bne.w	80032c2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f005 f861 	bl	8008198 <USB_ReadInterrupts>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80f1 	beq.w	80032c0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f005 f858 	bl	8008198 <USB_ReadInterrupts>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030f2:	d104      	bne.n	80030fe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80030fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f005 f848 	bl	8008198 <USB_ReadInterrupts>
 8003108:	4603      	mov	r3, r0
 800310a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800310e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003112:	d104      	bne.n	800311e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800311c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f005 f838 	bl	8008198 <USB_ReadInterrupts>
 8003128:	4603      	mov	r3, r0
 800312a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800312e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003132:	d104      	bne.n	800313e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800313c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f005 f828 	bl	8008198 <USB_ReadInterrupts>
 8003148:	4603      	mov	r3, r0
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b02      	cmp	r3, #2
 8003150:	d103      	bne.n	800315a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2202      	movs	r2, #2
 8003158:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f005 f81a 	bl	8008198 <USB_ReadInterrupts>
 8003164:	4603      	mov	r3, r0
 8003166:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800316a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800316e:	d120      	bne.n	80031b2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003178:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d113      	bne.n	80031b2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800318a:	2110      	movs	r1, #16
 800318c:	6938      	ldr	r0, [r7, #16]
 800318e:	f004 ff0d 	bl	8007fac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003192:	6938      	ldr	r0, [r7, #16]
 8003194:	f004 ff3c 	bl	8008010 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	7a5b      	ldrb	r3, [r3, #9]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d105      	bne.n	80031ac <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2101      	movs	r1, #1
 80031a6:	4618      	mov	r0, r3
 80031a8:	f005 f92e 	bl	8008408 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f008 f8f5 	bl	800b39c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f004 ffee 	bl	8008198 <USB_ReadInterrupts>
 80031bc:	4603      	mov	r3, r0
 80031be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031c6:	d102      	bne.n	80031ce <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f001 fd4d 	bl	8004c68 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f004 ffe0 	bl	8008198 <USB_ReadInterrupts>
 80031d8:	4603      	mov	r3, r0
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d106      	bne.n	80031f0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f008 f8be 	bl	800b364 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2208      	movs	r2, #8
 80031ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f004 ffcf 	bl	8008198 <USB_ReadInterrupts>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003200:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003204:	d139      	bne.n	800327a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f005 fd6a 	bl	8008ce4 <USB_HC_ReadInterrupt>
 8003210:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	e025      	b.n	8003264 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d018      	beq.n	800325e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800323e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003242:	d106      	bne.n	8003252 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	4619      	mov	r1, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f905 	bl	800345a <HCD_HC_IN_IRQHandler>
 8003250:	e005      	b.n	800325e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 ff67 	bl	800412c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3301      	adds	r3, #1
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	795b      	ldrb	r3, [r3, #5]
 8003268:	461a      	mov	r2, r3
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	4293      	cmp	r3, r2
 800326e:	d3d3      	bcc.n	8003218 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003278:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f004 ff8a 	bl	8008198 <USB_ReadInterrupts>
 8003284:	4603      	mov	r3, r0
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b10      	cmp	r3, #16
 800328c:	d101      	bne.n	8003292 <HAL_HCD_IRQHandler+0x1ea>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_HCD_IRQHandler+0x1ec>
 8003292:	2300      	movs	r3, #0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d014      	beq.n	80032c2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0210 	bic.w	r2, r2, #16
 80032a6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f001 fbfe 	bl	8004aaa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699a      	ldr	r2, [r3, #24]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0210 	orr.w	r2, r2, #16
 80032bc:	619a      	str	r2, [r3, #24]
 80032be:	e000      	b.n	80032c2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80032c0:	bf00      	nop
    }
  }
}
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_HCD_Start+0x16>
 80032da:	2302      	movs	r3, #2
 80032dc:	e013      	b.n	8003306 <HAL_HCD_Start+0x3e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2101      	movs	r1, #1
 80032ec:	4618      	mov	r0, r3
 80032ee:	f005 f8f2 	bl	80084d6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f004 fdea 	bl	8007ed0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_HCD_Stop+0x16>
 8003320:	2302      	movs	r3, #2
 8003322:	e00d      	b.n	8003340 <HAL_HCD_Stop+0x32>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f005 fe45 	bl	8008fc0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f005 f894 	bl	8008482 <USB_ResetPort>
 800335a:	4603      	mov	r3, r0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	334c      	adds	r3, #76	@ 0x4c
 8003380:	781b      	ldrb	r3, [r3, #0]
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	460b      	mov	r3, r1
 8003398:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	3338      	adds	r3, #56	@ 0x38
 80033aa:	681b      	ldr	r3, [r3, #0]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f005 f8d6 	bl	8008576 <USB_GetCurrentFrame>
 80033ca:	4603      	mov	r3, r0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f005 f8b1 	bl	8008548 <USB_GetHostSpeed>
 80033e6:	4603      	mov	r3, r0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	331a      	adds	r3, #26
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	331b      	adds	r3, #27
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	3325      	adds	r3, #37	@ 0x25
 8003434:	2200      	movs	r2, #0
 8003436:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	3324      	adds	r3, #36	@ 0x24
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b086      	sub	sp, #24
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	460b      	mov	r3, r1
 8003464:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	4611      	mov	r1, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f004 fea0 	bl	80081be <USB_ReadChInterrupts>
 800347e:	4603      	mov	r3, r0
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b04      	cmp	r3, #4
 8003486:	d11a      	bne.n	80034be <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4413      	add	r3, r2
 8003490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003494:	461a      	mov	r2, r3
 8003496:	2304      	movs	r3, #4
 8003498:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	334d      	adds	r3, #77	@ 0x4d
 80034aa:	2207      	movs	r2, #7
 80034ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f005 fc25 	bl	8008d06 <USB_HC_Halt>
 80034bc:	e09e      	b.n	80035fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f004 fe79 	bl	80081be <USB_ReadChInterrupts>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034d6:	d11b      	bne.n	8003510 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e4:	461a      	mov	r2, r3
 80034e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	334d      	adds	r3, #77	@ 0x4d
 80034fc:	2208      	movs	r2, #8
 80034fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f005 fbfc 	bl	8008d06 <USB_HC_Halt>
 800350e:	e075      	b.n	80035fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f004 fe50 	bl	80081be <USB_ReadChInterrupts>
 800351e:	4603      	mov	r3, r0
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b08      	cmp	r3, #8
 8003526:	d11a      	bne.n	800355e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003534:	461a      	mov	r2, r3
 8003536:	2308      	movs	r3, #8
 8003538:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	334d      	adds	r3, #77	@ 0x4d
 800354a:	2206      	movs	r2, #6
 800354c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f005 fbd5 	bl	8008d06 <USB_HC_Halt>
 800355c:	e04e      	b.n	80035fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f004 fe29 	bl	80081be <USB_ReadChInterrupts>
 800356c:	4603      	mov	r3, r0
 800356e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003576:	d11b      	bne.n	80035b0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003584:	461a      	mov	r2, r3
 8003586:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800358a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	334d      	adds	r3, #77	@ 0x4d
 800359c:	2209      	movs	r2, #9
 800359e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f005 fbac 	bl	8008d06 <USB_HC_Halt>
 80035ae:	e025      	b.n	80035fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f004 fe00 	bl	80081be <USB_ReadChInterrupts>
 80035be:	4603      	mov	r3, r0
 80035c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c4:	2b80      	cmp	r3, #128	@ 0x80
 80035c6:	d119      	bne.n	80035fc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035d4:	461a      	mov	r2, r3
 80035d6:	2380      	movs	r3, #128	@ 0x80
 80035d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	334d      	adds	r3, #77	@ 0x4d
 80035ea:	2207      	movs	r2, #7
 80035ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f005 fb85 	bl	8008d06 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f004 fdda 	bl	80081be <USB_ReadChInterrupts>
 800360a:	4603      	mov	r3, r0
 800360c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003614:	d112      	bne.n	800363c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	4611      	mov	r1, r2
 800361e:	4618      	mov	r0, r3
 8003620:	f005 fb71 	bl	8008d06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003630:	461a      	mov	r2, r3
 8003632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003636:	6093      	str	r3, [r2, #8]
 8003638:	f000 bd75 	b.w	8004126 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f004 fdba 	bl	80081be <USB_ReadChInterrupts>
 800364a:	4603      	mov	r3, r0
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b01      	cmp	r3, #1
 8003652:	f040 8128 	bne.w	80038a6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4413      	add	r3, r2
 800365e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003662:	461a      	mov	r2, r3
 8003664:	2320      	movs	r3, #32
 8003666:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	331b      	adds	r3, #27
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d119      	bne.n	80036b2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	331b      	adds	r3, #27
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4413      	add	r3, r2
 800369a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	0151      	lsls	r1, r2, #5
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	440a      	add	r2, r1
 80036a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	799b      	ldrb	r3, [r3, #6]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d01b      	beq.n	80036f2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	3330      	adds	r3, #48	@ 0x30
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	1ac9      	subs	r1, r1, r3
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4403      	add	r3, r0
 80036ee:	3338      	adds	r3, #56	@ 0x38
 80036f0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	334d      	adds	r3, #77	@ 0x4d
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	3344      	adds	r3, #68	@ 0x44
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4413      	add	r3, r2
 8003722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003726:	461a      	mov	r2, r3
 8003728:	2301      	movs	r3, #1
 800372a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	3326      	adds	r3, #38	@ 0x26
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	3326      	adds	r3, #38	@ 0x26
 8003752:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003754:	2b02      	cmp	r3, #2
 8003756:	d110      	bne.n	800377a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	4611      	mov	r1, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f005 fad0 	bl	8008d06 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003766:	78fb      	ldrb	r3, [r7, #3]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4413      	add	r3, r2
 800376e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003772:	461a      	mov	r2, r3
 8003774:	2310      	movs	r3, #16
 8003776:	6093      	str	r3, [r2, #8]
 8003778:	e03d      	b.n	80037f6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	3326      	adds	r3, #38	@ 0x26
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d00a      	beq.n	80037a6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	3326      	adds	r3, #38	@ 0x26
 80037a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d127      	bne.n	80037f6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	0151      	lsls	r1, r2, #5
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	440a      	add	r2, r1
 80037bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037c4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	334c      	adds	r3, #76	@ 0x4c
 80037d6:	2201      	movs	r2, #1
 80037d8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	334c      	adds	r3, #76	@ 0x4c
 80037ea:	781a      	ldrb	r2, [r3, #0]
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	4619      	mov	r1, r3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f007 fde1 	bl	800b3b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	799b      	ldrb	r3, [r3, #6]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d13b      	bne.n	8003876 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	3338      	adds	r3, #56	@ 0x38
 800380e:	6819      	ldr	r1, [r3, #0]
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4403      	add	r3, r0
 800381e:	3328      	adds	r3, #40	@ 0x28
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	440b      	add	r3, r1
 8003824:	1e59      	subs	r1, r3, #1
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4403      	add	r3, r0
 8003834:	3328      	adds	r3, #40	@ 0x28
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	fbb1 f3f3 	udiv	r3, r1, r3
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8470 	beq.w	8004126 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	333c      	adds	r3, #60	@ 0x3c
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	f083 0301 	eor.w	r3, r3, #1
 800385e:	b2d8      	uxtb	r0, r3
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	333c      	adds	r3, #60	@ 0x3c
 800386e:	4602      	mov	r2, r0
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	f000 bc58 	b.w	8004126 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	333c      	adds	r3, #60	@ 0x3c
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	78fa      	ldrb	r2, [r7, #3]
 800388a:	f083 0301 	eor.w	r3, r3, #1
 800388e:	b2d8      	uxtb	r0, r3
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	333c      	adds	r3, #60	@ 0x3c
 800389e:	4602      	mov	r2, r0
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	f000 bc40 	b.w	8004126 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	78fa      	ldrb	r2, [r7, #3]
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f004 fc85 	bl	80081be <USB_ReadChInterrupts>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d131      	bne.n	8003922 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ca:	461a      	mov	r2, r3
 80038cc:	2320      	movs	r3, #32
 80038ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	331a      	adds	r3, #26
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	f040 841f 	bne.w	8004126 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	331b      	adds	r3, #27
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	334d      	adds	r3, #77	@ 0x4d
 800390c:	2203      	movs	r2, #3
 800390e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	78fa      	ldrb	r2, [r7, #3]
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f005 f9f4 	bl	8008d06 <USB_HC_Halt>
 800391e:	f000 bc02 	b.w	8004126 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f004 fc47 	bl	80081be <USB_ReadChInterrupts>
 8003930:	4603      	mov	r3, r0
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	f040 8305 	bne.w	8003f46 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4413      	add	r3, r2
 8003944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003948:	461a      	mov	r2, r3
 800394a:	2302      	movs	r3, #2
 800394c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	334d      	adds	r3, #77	@ 0x4d
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d114      	bne.n	800398e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	334d      	adds	r3, #77	@ 0x4d
 8003974:	2202      	movs	r2, #2
 8003976:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	334c      	adds	r3, #76	@ 0x4c
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	e2cc      	b.n	8003f28 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	334d      	adds	r3, #77	@ 0x4d
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b06      	cmp	r3, #6
 80039a2:	d114      	bne.n	80039ce <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	334d      	adds	r3, #77	@ 0x4d
 80039b4:	2202      	movs	r2, #2
 80039b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	334c      	adds	r3, #76	@ 0x4c
 80039c8:	2205      	movs	r2, #5
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	e2ac      	b.n	8003f28 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	334d      	adds	r3, #77	@ 0x4d
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b07      	cmp	r3, #7
 80039e2:	d00b      	beq.n	80039fc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	4613      	mov	r3, r2
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	1a9b      	subs	r3, r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	334d      	adds	r3, #77	@ 0x4d
 80039f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80039f6:	2b09      	cmp	r3, #9
 80039f8:	f040 80a6 	bne.w	8003b48 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	334d      	adds	r3, #77	@ 0x4d
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3344      	adds	r3, #68	@ 0x44
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	1c59      	adds	r1, r3, #1
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	1a9b      	subs	r3, r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4403      	add	r3, r0
 8003a30:	3344      	adds	r3, #68	@ 0x44
 8003a32:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3344      	adds	r3, #68	@ 0x44
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d943      	bls.n	8003ad2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	3344      	adds	r3, #68	@ 0x44
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	331a      	adds	r3, #26
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d123      	bne.n	8003abc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	331b      	adds	r3, #27
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	331c      	adds	r3, #28
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aba:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	334c      	adds	r3, #76	@ 0x4c
 8003acc:	2204      	movs	r2, #4
 8003ace:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ad0:	e229      	b.n	8003f26 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	334c      	adds	r3, #76	@ 0x4c
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	3326      	adds	r3, #38	@ 0x26
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00b      	beq.n	8003b14 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	3326      	adds	r3, #38	@ 0x26
 8003b0c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	f040 8209 	bne.w	8003f26 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b2a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b32:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b40:	461a      	mov	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b46:	e1ee      	b.n	8003f26 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	334d      	adds	r3, #77	@ 0x4d
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b05      	cmp	r3, #5
 8003b5c:	f040 80c8 	bne.w	8003cf0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	334d      	adds	r3, #77	@ 0x4d
 8003b70:	2202      	movs	r2, #2
 8003b72:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	331b      	adds	r3, #27
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	f040 81ce 	bne.w	8003f28 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003b8c:	78fa      	ldrb	r2, [r7, #3]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	3326      	adds	r3, #38	@ 0x26
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d16b      	bne.n	8003c7a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	3348      	adds	r3, #72	@ 0x48
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	1c59      	adds	r1, r3, #1
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4403      	add	r3, r0
 8003bc2:	3348      	adds	r3, #72	@ 0x48
 8003bc4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3348      	adds	r3, #72	@ 0x48
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d943      	bls.n	8003c64 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	3348      	adds	r3, #72	@ 0x48
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	331b      	adds	r3, #27
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3344      	adds	r3, #68	@ 0x44
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d809      	bhi.n	8003c2e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	331c      	adds	r3, #28
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	0151      	lsls	r1, r2, #5
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	440a      	add	r2, r1
 8003c44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c4c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	334c      	adds	r3, #76	@ 0x4c
 8003c5e:	2204      	movs	r2, #4
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e014      	b.n	8003c8e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	334c      	adds	r3, #76	@ 0x4c
 8003c74:	2202      	movs	r2, #2
 8003c76:	701a      	strb	r2, [r3, #0]
 8003c78:	e009      	b.n	8003c8e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	334c      	adds	r3, #76	@ 0x4c
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	3326      	adds	r3, #38	@ 0x26
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00b      	beq.n	8003cbc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3326      	adds	r3, #38	@ 0x26
 8003cb4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	f040 8136 	bne.w	8003f28 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cd2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cda:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	015a      	lsls	r2, r3, #5
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e11b      	b.n	8003f28 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	334d      	adds	r3, #77	@ 0x4d
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	f040 8081 	bne.w	8003e0a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d08:	78fa      	ldrb	r2, [r7, #3]
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	334d      	adds	r3, #77	@ 0x4d
 8003d18:	2202      	movs	r2, #2
 8003d1a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	331b      	adds	r3, #27
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	f040 80fa 	bne.w	8003f28 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	334c      	adds	r3, #76	@ 0x4c
 8003d44:	2202      	movs	r2, #2
 8003d46:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	0151      	lsls	r1, r2, #5
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	440a      	add	r2, r1
 8003d5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d66:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	0151      	lsls	r1, r2, #5
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	440a      	add	r2, r1
 8003d7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d86:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	0151      	lsls	r1, r2, #5
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	440a      	add	r2, r1
 8003d9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003da2:	f023 0320 	bic.w	r3, r3, #32
 8003da6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	3326      	adds	r3, #38	@ 0x26
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	3326      	adds	r3, #38	@ 0x26
 8003dce:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	f040 80a9 	bne.w	8003f28 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003df4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003df6:	78fb      	ldrb	r3, [r7, #3]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e02:	461a      	mov	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	e08e      	b.n	8003f28 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	334d      	adds	r3, #77	@ 0x4d
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d143      	bne.n	8003ea8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	334d      	adds	r3, #77	@ 0x4d
 8003e30:	2202      	movs	r2, #2
 8003e32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e34:	78fa      	ldrb	r2, [r7, #3]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	334c      	adds	r3, #76	@ 0x4c
 8003e44:	2202      	movs	r2, #2
 8003e46:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	3326      	adds	r3, #38	@ 0x26
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	3326      	adds	r3, #38	@ 0x26
 8003e6e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d159      	bne.n	8003f28 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e8a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e92:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	e03f      	b.n	8003f28 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	334d      	adds	r3, #77	@ 0x4d
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d126      	bne.n	8003f0c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	334d      	adds	r3, #77	@ 0x4d
 8003ece:	2202      	movs	r2, #2
 8003ed0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	3344      	adds	r3, #68	@ 0x44
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	1c59      	adds	r1, r3, #1
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4403      	add	r3, r0
 8003ef2:	3344      	adds	r3, #68	@ 0x44
 8003ef4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ef6:	78fa      	ldrb	r2, [r7, #3]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	334c      	adds	r3, #76	@ 0x4c
 8003f06:	2204      	movs	r2, #4
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	e00d      	b.n	8003f28 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	334d      	adds	r3, #77	@ 0x4d
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	f000 8100 	beq.w	8004124 <HCD_HC_IN_IRQHandler+0xcca>
 8003f24:	e000      	b.n	8003f28 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f26:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	334c      	adds	r3, #76	@ 0x4c
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	78fb      	ldrb	r3, [r7, #3]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f007 fa3a 	bl	800b3b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f44:	e0ef      	b.n	8004126 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	78fa      	ldrb	r2, [r7, #3]
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f004 f935 	bl	80081be <USB_ReadChInterrupts>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5a:	2b40      	cmp	r3, #64	@ 0x40
 8003f5c:	d12f      	bne.n	8003fbe <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2340      	movs	r3, #64	@ 0x40
 8003f6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003f70:	78fa      	ldrb	r2, [r7, #3]
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	334d      	adds	r3, #77	@ 0x4d
 8003f80:	2205      	movs	r2, #5
 8003f82:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003f84:	78fa      	ldrb	r2, [r7, #3]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	331a      	adds	r3, #26
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	3344      	adds	r3, #68	@ 0x44
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	78fa      	ldrb	r2, [r7, #3]
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f004 fea5 	bl	8008d06 <USB_HC_Halt>
 8003fbc:	e0b3      	b.n	8004126 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f004 f8f9 	bl	80081be <USB_ReadChInterrupts>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b10      	cmp	r3, #16
 8003fd4:	f040 80a7 	bne.w	8004126 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	3326      	adds	r3, #38	@ 0x26
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d11b      	bne.n	8004026 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3344      	adds	r3, #68	@ 0x44
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004002:	78fa      	ldrb	r2, [r7, #3]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	334d      	adds	r3, #77	@ 0x4d
 8004012:	2204      	movs	r2, #4
 8004014:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f004 fe71 	bl	8008d06 <USB_HC_Halt>
 8004024:	e03f      	b.n	80040a6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	3326      	adds	r3, #38	@ 0x26
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	3326      	adds	r3, #38	@ 0x26
 800404c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800404e:	2b02      	cmp	r3, #2
 8004050:	d129      	bne.n	80040a6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	3344      	adds	r3, #68	@ 0x44
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <HCD_HC_IN_IRQHandler+0xc2a>
 800406e:	78fa      	ldrb	r2, [r7, #3]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	331b      	adds	r3, #27
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d110      	bne.n	80040a6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004084:	78fa      	ldrb	r2, [r7, #3]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	334d      	adds	r3, #77	@ 0x4d
 8004094:	2204      	movs	r2, #4
 8004096:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	4611      	mov	r1, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f004 fe30 	bl	8008d06 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80040a6:	78fa      	ldrb	r2, [r7, #3]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	1a9b      	subs	r3, r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	331b      	adds	r3, #27
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d129      	bne.n	8004110 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	331b      	adds	r3, #27
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	0151      	lsls	r1, r2, #5
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	440a      	add	r2, r1
 80040e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ee:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80040f0:	78fb      	ldrb	r3, [r7, #3]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	78fa      	ldrb	r2, [r7, #3]
 8004100:	0151      	lsls	r1, r2, #5
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	440a      	add	r2, r1
 8004106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800410a:	f043 0320 	orr.w	r3, r3, #32
 800410e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4413      	add	r3, r2
 8004118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800411c:	461a      	mov	r2, r3
 800411e:	2310      	movs	r3, #16
 8004120:	6093      	str	r3, [r2, #8]
 8004122:	e000      	b.n	8004126 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004124:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f004 f837 	bl	80081be <USB_ReadChInterrupts>
 8004150:	4603      	mov	r3, r0
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b04      	cmp	r3, #4
 8004158:	d11b      	bne.n	8004192 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4413      	add	r3, r2
 8004162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004166:	461a      	mov	r2, r3
 8004168:	2304      	movs	r3, #4
 800416a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800416c:	78fa      	ldrb	r2, [r7, #3]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	334d      	adds	r3, #77	@ 0x4d
 800417c:	2207      	movs	r2, #7
 800417e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	4611      	mov	r1, r2
 8004188:	4618      	mov	r0, r3
 800418a:	f004 fdbc 	bl	8008d06 <USB_HC_Halt>
 800418e:	f000 bc89 	b.w	8004aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f004 f80f 	bl	80081be <USB_ReadChInterrupts>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	f040 8082 	bne.w	80042b0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041b8:	461a      	mov	r2, r3
 80041ba:	2320      	movs	r3, #32
 80041bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	3319      	adds	r3, #25
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d124      	bne.n	800421e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	3319      	adds	r3, #25
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	334c      	adds	r3, #76	@ 0x4c
 80041f8:	2202      	movs	r2, #2
 80041fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	334d      	adds	r3, #77	@ 0x4d
 800420c:	2203      	movs	r2, #3
 800420e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	4611      	mov	r1, r2
 8004218:	4618      	mov	r0, r3
 800421a:	f004 fd74 	bl	8008d06 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800421e:	78fa      	ldrb	r2, [r7, #3]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	331a      	adds	r3, #26
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	f040 8437 	bne.w	8004aa4 <HCD_HC_OUT_IRQHandler+0x978>
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	331b      	adds	r3, #27
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f040 842b 	bne.w	8004aa4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	3326      	adds	r3, #38	@ 0x26
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d009      	beq.n	8004278 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	331b      	adds	r3, #27
 8004274:	2201      	movs	r2, #1
 8004276:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	334d      	adds	r3, #77	@ 0x4d
 8004288:	2203      	movs	r2, #3
 800428a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	78fa      	ldrb	r2, [r7, #3]
 8004292:	4611      	mov	r1, r2
 8004294:	4618      	mov	r0, r3
 8004296:	f004 fd36 	bl	8008d06 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	3344      	adds	r3, #68	@ 0x44
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	e3f9      	b.n	8004aa4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	78fa      	ldrb	r2, [r7, #3]
 80042b6:	4611      	mov	r1, r2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f003 ff80 	bl	80081be <USB_ReadChInterrupts>
 80042be:	4603      	mov	r3, r0
 80042c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c8:	d111      	bne.n	80042ee <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d6:	461a      	mov	r2, r3
 80042d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042dc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	78fa      	ldrb	r2, [r7, #3]
 80042e4:	4611      	mov	r1, r2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f004 fd0d 	bl	8008d06 <USB_HC_Halt>
 80042ec:	e3da      	b.n	8004aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	78fa      	ldrb	r2, [r7, #3]
 80042f4:	4611      	mov	r1, r2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f003 ff61 	bl	80081be <USB_ReadChInterrupts>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d168      	bne.n	80043d8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004306:	78fa      	ldrb	r2, [r7, #3]
 8004308:	6879      	ldr	r1, [r7, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	1a9b      	subs	r3, r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	440b      	add	r3, r1
 8004314:	3344      	adds	r3, #68	@ 0x44
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	4611      	mov	r1, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f003 ff4b 	bl	80081be <USB_ReadChInterrupts>
 8004328:	4603      	mov	r3, r0
 800432a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432e:	2b40      	cmp	r3, #64	@ 0x40
 8004330:	d112      	bne.n	8004358 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	3319      	adds	r3, #25
 8004342:	2201      	movs	r2, #1
 8004344:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4413      	add	r3, r2
 800434e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004352:	461a      	mov	r2, r3
 8004354:	2340      	movs	r3, #64	@ 0x40
 8004356:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	331b      	adds	r3, #27
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d019      	beq.n	80043a2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800436e:	78fa      	ldrb	r2, [r7, #3]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	331b      	adds	r3, #27
 800437e:	2200      	movs	r2, #0
 8004380:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	4413      	add	r3, r2
 800438a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	0151      	lsls	r1, r2, #5
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	440a      	add	r2, r1
 8004398:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800439c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043a0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ae:	461a      	mov	r2, r3
 80043b0:	2301      	movs	r3, #1
 80043b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80043b4:	78fa      	ldrb	r2, [r7, #3]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	334d      	adds	r3, #77	@ 0x4d
 80043c4:	2201      	movs	r2, #1
 80043c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f004 fc98 	bl	8008d06 <USB_HC_Halt>
 80043d6:	e365      	b.n	8004aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	4611      	mov	r1, r2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f003 feec 	bl	80081be <USB_ReadChInterrupts>
 80043e6:	4603      	mov	r3, r0
 80043e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ec:	2b40      	cmp	r3, #64	@ 0x40
 80043ee:	d139      	bne.n	8004464 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	334d      	adds	r3, #77	@ 0x4d
 8004400:	2205      	movs	r2, #5
 8004402:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	331a      	adds	r3, #26
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d109      	bne.n	800442e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	3319      	adds	r3, #25
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	3344      	adds	r3, #68	@ 0x44
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f004 fc5b 	bl	8008d06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4413      	add	r3, r2
 8004458:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800445c:	461a      	mov	r2, r3
 800445e:	2340      	movs	r3, #64	@ 0x40
 8004460:	6093      	str	r3, [r2, #8]
 8004462:	e31f      	b.n	8004aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	4611      	mov	r1, r2
 800446c:	4618      	mov	r0, r3
 800446e:	f003 fea6 	bl	80081be <USB_ReadChInterrupts>
 8004472:	4603      	mov	r3, r0
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b08      	cmp	r3, #8
 800447a:	d11a      	bne.n	80044b2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4413      	add	r3, r2
 8004484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004488:	461a      	mov	r2, r3
 800448a:	2308      	movs	r3, #8
 800448c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	334d      	adds	r3, #77	@ 0x4d
 800449e:	2206      	movs	r2, #6
 80044a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f004 fc2b 	bl	8008d06 <USB_HC_Halt>
 80044b0:	e2f8      	b.n	8004aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	78fa      	ldrb	r2, [r7, #3]
 80044b8:	4611      	mov	r1, r2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f003 fe7f 	bl	80081be <USB_ReadChInterrupts>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	2b10      	cmp	r3, #16
 80044c8:	d144      	bne.n	8004554 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	3344      	adds	r3, #68	@ 0x44
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	334d      	adds	r3, #77	@ 0x4d
 80044ee:	2204      	movs	r2, #4
 80044f0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	3319      	adds	r3, #25
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d114      	bne.n	8004532 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	3318      	adds	r3, #24
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800451e:	78fa      	ldrb	r2, [r7, #3]
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	3319      	adds	r3, #25
 800452e:	2201      	movs	r2, #1
 8004530:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f004 fbe3 	bl	8008d06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4413      	add	r3, r2
 8004548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800454c:	461a      	mov	r2, r3
 800454e:	2310      	movs	r3, #16
 8004550:	6093      	str	r3, [r2, #8]
 8004552:	e2a7      	b.n	8004aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	4611      	mov	r1, r2
 800455c:	4618      	mov	r0, r3
 800455e:	f003 fe2e 	bl	80081be <USB_ReadChInterrupts>
 8004562:	4603      	mov	r3, r0
 8004564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004568:	2b80      	cmp	r3, #128	@ 0x80
 800456a:	f040 8083 	bne.w	8004674 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	799b      	ldrb	r3, [r3, #6]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d111      	bne.n	800459a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	334d      	adds	r3, #77	@ 0x4d
 8004586:	2207      	movs	r2, #7
 8004588:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	4611      	mov	r1, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f004 fbb7 	bl	8008d06 <USB_HC_Halt>
 8004598:	e062      	b.n	8004660 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800459a:	78fa      	ldrb	r2, [r7, #3]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	3344      	adds	r3, #68	@ 0x44
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	1c59      	adds	r1, r3, #1
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4403      	add	r3, r0
 80045ba:	3344      	adds	r3, #68	@ 0x44
 80045bc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045be:	78fa      	ldrb	r2, [r7, #3]
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	1a9b      	subs	r3, r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	3344      	adds	r3, #68	@ 0x44
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d922      	bls.n	800461a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80045d4:	78fa      	ldrb	r2, [r7, #3]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	3344      	adds	r3, #68	@ 0x44
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	334c      	adds	r3, #76	@ 0x4c
 80045f8:	2204      	movs	r2, #4
 80045fa:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80045fc:	78fa      	ldrb	r2, [r7, #3]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	334c      	adds	r3, #76	@ 0x4c
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f006 fed0 	bl	800b3b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004618:	e022      	b.n	8004660 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	334c      	adds	r3, #76	@ 0x4c
 800462a:	2202      	movs	r2, #2
 800462c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4413      	add	r3, r2
 8004636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004644:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800464c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4413      	add	r3, r2
 8004656:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800465a:	461a      	mov	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4413      	add	r3, r2
 8004668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800466c:	461a      	mov	r2, r3
 800466e:	2380      	movs	r3, #128	@ 0x80
 8004670:	6093      	str	r3, [r2, #8]
 8004672:	e217      	b.n	8004aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f003 fd9e 	bl	80081be <USB_ReadChInterrupts>
 8004682:	4603      	mov	r3, r0
 8004684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800468c:	d11b      	bne.n	80046c6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	334d      	adds	r3, #77	@ 0x4d
 800469e:	2209      	movs	r2, #9
 80046a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	78fa      	ldrb	r2, [r7, #3]
 80046a8:	4611      	mov	r1, r2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f004 fb2b 	bl	8008d06 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046bc:	461a      	mov	r2, r3
 80046be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046c2:	6093      	str	r3, [r2, #8]
 80046c4:	e1ee      	b.n	8004aa4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	4611      	mov	r1, r2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f003 fd75 	bl	80081be <USB_ReadChInterrupts>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	f040 81df 	bne.w	8004a9e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ec:	461a      	mov	r2, r3
 80046ee:	2302      	movs	r3, #2
 80046f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80046f2:	78fa      	ldrb	r2, [r7, #3]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	334d      	adds	r3, #77	@ 0x4d
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b01      	cmp	r3, #1
 8004706:	f040 8093 	bne.w	8004830 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800470a:	78fa      	ldrb	r2, [r7, #3]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	334d      	adds	r3, #77	@ 0x4d
 800471a:	2202      	movs	r2, #2
 800471c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	334c      	adds	r3, #76	@ 0x4c
 800472e:	2201      	movs	r2, #1
 8004730:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004732:	78fa      	ldrb	r2, [r7, #3]
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	3326      	adds	r3, #38	@ 0x26
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d00b      	beq.n	8004760 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004748:	78fa      	ldrb	r2, [r7, #3]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	3326      	adds	r3, #38	@ 0x26
 8004758:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800475a:	2b03      	cmp	r3, #3
 800475c:	f040 8190 	bne.w	8004a80 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	799b      	ldrb	r3, [r3, #6]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d115      	bne.n	8004794 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004768:	78fa      	ldrb	r2, [r7, #3]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	333d      	adds	r3, #61	@ 0x3d
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	f083 0301 	eor.w	r3, r3, #1
 8004780:	b2d8      	uxtb	r0, r3
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	333d      	adds	r3, #61	@ 0x3d
 8004790:	4602      	mov	r2, r0
 8004792:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	799b      	ldrb	r3, [r3, #6]
 8004798:	2b01      	cmp	r3, #1
 800479a:	f040 8171 	bne.w	8004a80 <HCD_HC_OUT_IRQHandler+0x954>
 800479e:	78fa      	ldrb	r2, [r7, #3]
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	3334      	adds	r3, #52	@ 0x34
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8165 	beq.w	8004a80 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	3334      	adds	r3, #52	@ 0x34
 80047c6:	6819      	ldr	r1, [r3, #0]
 80047c8:	78fa      	ldrb	r2, [r7, #3]
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4403      	add	r3, r0
 80047d6:	3328      	adds	r3, #40	@ 0x28
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	440b      	add	r3, r1
 80047dc:	1e59      	subs	r1, r3, #1
 80047de:	78fa      	ldrb	r2, [r7, #3]
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	1a9b      	subs	r3, r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4403      	add	r3, r0
 80047ec:	3328      	adds	r3, #40	@ 0x28
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047f4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 813f 	beq.w	8004a80 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	1a9b      	subs	r3, r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	333d      	adds	r3, #61	@ 0x3d
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	78fa      	ldrb	r2, [r7, #3]
 8004816:	f083 0301 	eor.w	r3, r3, #1
 800481a:	b2d8      	uxtb	r0, r3
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	333d      	adds	r3, #61	@ 0x3d
 800482a:	4602      	mov	r2, r0
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	e127      	b.n	8004a80 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	334d      	adds	r3, #77	@ 0x4d
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d120      	bne.n	8004888 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	334d      	adds	r3, #77	@ 0x4d
 8004856:	2202      	movs	r2, #2
 8004858:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	331b      	adds	r3, #27
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b01      	cmp	r3, #1
 800486e:	f040 8107 	bne.w	8004a80 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	334c      	adds	r3, #76	@ 0x4c
 8004882:	2202      	movs	r2, #2
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	e0fb      	b.n	8004a80 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	334d      	adds	r3, #77	@ 0x4d
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b04      	cmp	r3, #4
 800489c:	d13a      	bne.n	8004914 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	6879      	ldr	r1, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	1a9b      	subs	r3, r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	334d      	adds	r3, #77	@ 0x4d
 80048ae:	2202      	movs	r2, #2
 80048b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	334c      	adds	r3, #76	@ 0x4c
 80048c2:	2202      	movs	r2, #2
 80048c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	331b      	adds	r3, #27
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	f040 80d1 	bne.w	8004a80 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80048de:	78fa      	ldrb	r2, [r7, #3]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	331b      	adds	r3, #27
 80048ee:	2200      	movs	r2, #0
 80048f0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	78fa      	ldrb	r2, [r7, #3]
 8004902:	0151      	lsls	r1, r2, #5
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	440a      	add	r2, r1
 8004908:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800490c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004910:	6053      	str	r3, [r2, #4]
 8004912:	e0b5      	b.n	8004a80 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004914:	78fa      	ldrb	r2, [r7, #3]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	1a9b      	subs	r3, r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	334d      	adds	r3, #77	@ 0x4d
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b05      	cmp	r3, #5
 8004928:	d114      	bne.n	8004954 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800492a:	78fa      	ldrb	r2, [r7, #3]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	334d      	adds	r3, #77	@ 0x4d
 800493a:	2202      	movs	r2, #2
 800493c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	334c      	adds	r3, #76	@ 0x4c
 800494e:	2202      	movs	r2, #2
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e095      	b.n	8004a80 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	1a9b      	subs	r3, r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	440b      	add	r3, r1
 8004962:	334d      	adds	r3, #77	@ 0x4d
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b06      	cmp	r3, #6
 8004968:	d114      	bne.n	8004994 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	440b      	add	r3, r1
 8004978:	334d      	adds	r3, #77	@ 0x4d
 800497a:	2202      	movs	r2, #2
 800497c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	334c      	adds	r3, #76	@ 0x4c
 800498e:	2205      	movs	r2, #5
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	e075      	b.n	8004a80 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004994:	78fa      	ldrb	r2, [r7, #3]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	334d      	adds	r3, #77	@ 0x4d
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b07      	cmp	r3, #7
 80049a8:	d00a      	beq.n	80049c0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80049aa:	78fa      	ldrb	r2, [r7, #3]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	1a9b      	subs	r3, r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	334d      	adds	r3, #77	@ 0x4d
 80049ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80049bc:	2b09      	cmp	r3, #9
 80049be:	d170      	bne.n	8004aa2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049c0:	78fa      	ldrb	r2, [r7, #3]
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	440b      	add	r3, r1
 80049ce:	334d      	adds	r3, #77	@ 0x4d
 80049d0:	2202      	movs	r2, #2
 80049d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	3344      	adds	r3, #68	@ 0x44
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	1c59      	adds	r1, r3, #1
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4403      	add	r3, r0
 80049f4:	3344      	adds	r3, #68	@ 0x44
 80049f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80049f8:	78fa      	ldrb	r2, [r7, #3]
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	3344      	adds	r3, #68	@ 0x44
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d914      	bls.n	8004a38 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	3344      	adds	r3, #68	@ 0x44
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a22:	78fa      	ldrb	r2, [r7, #3]
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	334c      	adds	r3, #76	@ 0x4c
 8004a32:	2204      	movs	r2, #4
 8004a34:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a36:	e022      	b.n	8004a7e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a38:	78fa      	ldrb	r2, [r7, #3]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	1a9b      	subs	r3, r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	334c      	adds	r3, #76	@ 0x4c
 8004a48:	2202      	movs	r2, #2
 8004a4a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a4c:	78fb      	ldrb	r3, [r7, #3]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a62:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a6a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a78:	461a      	mov	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a7e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004a80:	78fa      	ldrb	r2, [r7, #3]
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	334c      	adds	r3, #76	@ 0x4c
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	4619      	mov	r1, r3
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f006 fc8e 	bl	800b3b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a9c:	e002      	b.n	8004aa4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004a9e:	bf00      	nop
 8004aa0:	e000      	b.n	8004aa4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004aa2:	bf00      	nop
  }
}
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b08a      	sub	sp, #40	@ 0x28
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	0c5b      	lsrs	r3, r3, #17
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ade:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d004      	beq.n	8004af0 <HCD_RXQLVL_IRQHandler+0x46>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b05      	cmp	r3, #5
 8004aea:	f000 80b6 	beq.w	8004c5a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004aee:	e0b7      	b.n	8004c60 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 80b3 	beq.w	8004c5e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	4613      	mov	r3, r2
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	332c      	adds	r3, #44	@ 0x2c
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80a7 	beq.w	8004c5e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4613      	mov	r3, r2
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	3338      	adds	r3, #56	@ 0x38
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	18d1      	adds	r1, r2, r3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4403      	add	r3, r0
 8004b34:	3334      	adds	r3, #52	@ 0x34
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4299      	cmp	r1, r3
 8004b3a:	f200 8083 	bhi.w	8004c44 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4613      	mov	r3, r2
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	332c      	adds	r3, #44	@ 0x2c
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	b292      	uxth	r2, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f003 fac5 	bl	80080e8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4613      	mov	r3, r2
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	332c      	adds	r3, #44	@ 0x2c
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	18d1      	adds	r1, r2, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4403      	add	r3, r0
 8004b82:	332c      	adds	r3, #44	@ 0x2c
 8004b84:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	3338      	adds	r3, #56	@ 0x38
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	18d1      	adds	r1, r2, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4403      	add	r3, r0
 8004baa:	3338      	adds	r3, #56	@ 0x38
 8004bac:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	0cdb      	lsrs	r3, r3, #19
 8004bbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bc2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	3328      	adds	r3, #40	@ 0x28
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d13f      	bne.n	8004c5e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d03c      	beq.n	8004c5e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004bfa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c02:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c10:	461a      	mov	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	440b      	add	r3, r1
 8004c24:	333c      	adds	r3, #60	@ 0x3c
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	f083 0301 	eor.w	r3, r3, #1
 8004c2c:	b2d8      	uxtb	r0, r3
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4613      	mov	r3, r2
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	333c      	adds	r3, #60	@ 0x3c
 8004c3e:	4602      	mov	r2, r0
 8004c40:	701a      	strb	r2, [r3, #0]
      break;
 8004c42:	e00c      	b.n	8004c5e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	69ba      	ldr	r2, [r7, #24]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	1a9b      	subs	r3, r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	334c      	adds	r3, #76	@ 0x4c
 8004c54:	2204      	movs	r2, #4
 8004c56:	701a      	strb	r2, [r3, #0]
      break;
 8004c58:	e001      	b.n	8004c5e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e000      	b.n	8004c60 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004c5e:	bf00      	nop
  }
}
 8004c60:	bf00      	nop
 8004c62:	3728      	adds	r7, #40	@ 0x28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004c94:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d10b      	bne.n	8004cb8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d102      	bne.n	8004cb0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f006 fb68 	bl	800b380 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f043 0302 	orr.w	r3, r3, #2
 8004cb6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d132      	bne.n	8004d28 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f043 0308 	orr.w	r3, r3, #8
 8004cc8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d126      	bne.n	8004d22 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	7a5b      	ldrb	r3, [r3, #9]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d113      	bne.n	8004d04 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004ce2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ce6:	d106      	bne.n	8004cf6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2102      	movs	r1, #2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f003 fb8a 	bl	8008408 <USB_InitFSLSPClkSel>
 8004cf4:	e011      	b.n	8004d1a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f003 fb83 	bl	8008408 <USB_InitFSLSPClkSel>
 8004d02:	e00a      	b.n	8004d1a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	79db      	ldrb	r3, [r3, #7]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d106      	bne.n	8004d1a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d12:	461a      	mov	r2, r3
 8004d14:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004d18:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f006 fb5a 	bl	800b3d4 <HAL_HCD_PortEnabled_Callback>
 8004d20:	e002      	b.n	8004d28 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f006 fb64 	bl	800b3f0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	d103      	bne.n	8004d3a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f043 0320 	orr.w	r3, r3, #32
 8004d38:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d40:	461a      	mov	r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	6013      	str	r3, [r2, #0]
}
 8004d46:	bf00      	nop
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e12b      	b.n	8004fba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fb fece 	bl	8000b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2224      	movs	r2, #36	@ 0x24
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004da2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004db2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004db4:	f001 fe72 	bl	8006a9c <HAL_RCC_GetPCLK1Freq>
 8004db8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4a81      	ldr	r2, [pc, #516]	@ (8004fc4 <HAL_I2C_Init+0x274>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d807      	bhi.n	8004dd4 <HAL_I2C_Init+0x84>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4a80      	ldr	r2, [pc, #512]	@ (8004fc8 <HAL_I2C_Init+0x278>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	bf94      	ite	ls
 8004dcc:	2301      	movls	r3, #1
 8004dce:	2300      	movhi	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	e006      	b.n	8004de2 <HAL_I2C_Init+0x92>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4a7d      	ldr	r2, [pc, #500]	@ (8004fcc <HAL_I2C_Init+0x27c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	bf94      	ite	ls
 8004ddc:	2301      	movls	r3, #1
 8004dde:	2300      	movhi	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e0e7      	b.n	8004fba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4a78      	ldr	r2, [pc, #480]	@ (8004fd0 <HAL_I2C_Init+0x280>)
 8004dee:	fba2 2303 	umull	r2, r3, r2, r3
 8004df2:	0c9b      	lsrs	r3, r3, #18
 8004df4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4a6a      	ldr	r2, [pc, #424]	@ (8004fc4 <HAL_I2C_Init+0x274>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d802      	bhi.n	8004e24 <HAL_I2C_Init+0xd4>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	3301      	adds	r3, #1
 8004e22:	e009      	b.n	8004e38 <HAL_I2C_Init+0xe8>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004e2a:	fb02 f303 	mul.w	r3, r2, r3
 8004e2e:	4a69      	ldr	r2, [pc, #420]	@ (8004fd4 <HAL_I2C_Init+0x284>)
 8004e30:	fba2 2303 	umull	r2, r3, r2, r3
 8004e34:	099b      	lsrs	r3, r3, #6
 8004e36:	3301      	adds	r3, #1
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004e4a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	495c      	ldr	r1, [pc, #368]	@ (8004fc4 <HAL_I2C_Init+0x274>)
 8004e54:	428b      	cmp	r3, r1
 8004e56:	d819      	bhi.n	8004e8c <HAL_I2C_Init+0x13c>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	1e59      	subs	r1, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e66:	1c59      	adds	r1, r3, #1
 8004e68:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e6c:	400b      	ands	r3, r1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_I2C_Init+0x138>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	1e59      	subs	r1, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e80:	3301      	adds	r3, #1
 8004e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e86:	e051      	b.n	8004f2c <HAL_I2C_Init+0x1dc>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	e04f      	b.n	8004f2c <HAL_I2C_Init+0x1dc>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d111      	bne.n	8004eb8 <HAL_I2C_Init+0x168>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	1e58      	subs	r0, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6859      	ldr	r1, [r3, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	440b      	add	r3, r1
 8004ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bf0c      	ite	eq
 8004eb0:	2301      	moveq	r3, #1
 8004eb2:	2300      	movne	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	e012      	b.n	8004ede <HAL_I2C_Init+0x18e>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1e58      	subs	r0, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6859      	ldr	r1, [r3, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	0099      	lsls	r1, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ece:	3301      	adds	r3, #1
 8004ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bf0c      	ite	eq
 8004ed8:	2301      	moveq	r3, #1
 8004eda:	2300      	movne	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_I2C_Init+0x196>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e022      	b.n	8004f2c <HAL_I2C_Init+0x1dc>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10e      	bne.n	8004f0c <HAL_I2C_Init+0x1bc>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1e58      	subs	r0, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6859      	ldr	r1, [r3, #4]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	440b      	add	r3, r1
 8004efc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f00:	3301      	adds	r3, #1
 8004f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f0a:	e00f      	b.n	8004f2c <HAL_I2C_Init+0x1dc>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	1e58      	subs	r0, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6859      	ldr	r1, [r3, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	0099      	lsls	r1, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f22:	3301      	adds	r3, #1
 8004f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	6809      	ldr	r1, [r1, #0]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69da      	ldr	r2, [r3, #28]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004f5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6911      	ldr	r1, [r2, #16]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68d2      	ldr	r2, [r2, #12]
 8004f66:	4311      	orrs	r1, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695a      	ldr	r2, [r3, #20]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	000186a0 	.word	0x000186a0
 8004fc8:	001e847f 	.word	0x001e847f
 8004fcc:	003d08ff 	.word	0x003d08ff
 8004fd0:	431bde83 	.word	0x431bde83
 8004fd4:	10624dd3 	.word	0x10624dd3

08004fd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	607a      	str	r2, [r7, #4]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	817b      	strh	r3, [r7, #10]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fec:	f7fc fb0c 	bl	8001608 <HAL_GetTick>
 8004ff0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	f040 80e0 	bne.w	80051c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	2319      	movs	r3, #25
 8005006:	2201      	movs	r2, #1
 8005008:	4970      	ldr	r1, [pc, #448]	@ (80051cc <HAL_I2C_Master_Transmit+0x1f4>)
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f964 	bl	80052d8 <I2C_WaitOnFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005016:	2302      	movs	r3, #2
 8005018:	e0d3      	b.n	80051c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_I2C_Master_Transmit+0x50>
 8005024:	2302      	movs	r3, #2
 8005026:	e0cc      	b.n	80051c2 <HAL_I2C_Master_Transmit+0x1ea>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b01      	cmp	r3, #1
 800503c:	d007      	beq.n	800504e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0201 	orr.w	r2, r2, #1
 800504c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800505c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2221      	movs	r2, #33	@ 0x21
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2210      	movs	r2, #16
 800506a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	893a      	ldrh	r2, [r7, #8]
 800507e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4a50      	ldr	r2, [pc, #320]	@ (80051d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800508e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005090:	8979      	ldrh	r1, [r7, #10]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	6a3a      	ldr	r2, [r7, #32]
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f89c 	bl	80051d4 <I2C_MasterRequestWrite>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e08d      	b.n	80051c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050a6:	2300      	movs	r3, #0
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80050bc:	e066      	b.n	800518c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	6a39      	ldr	r1, [r7, #32]
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 fa22 	bl	800550c <I2C_WaitOnTXEFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00d      	beq.n	80050ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d107      	bne.n	80050e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e06b      	b.n	80051c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ee:	781a      	ldrb	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b04      	cmp	r3, #4
 8005126:	d11b      	bne.n	8005160 <HAL_I2C_Master_Transmit+0x188>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800512c:	2b00      	cmp	r3, #0
 800512e:	d017      	beq.n	8005160 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005134:	781a      	ldrb	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	6a39      	ldr	r1, [r7, #32]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 fa19 	bl	800559c <I2C_WaitOnBTFFlagUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00d      	beq.n	800518c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	2b04      	cmp	r3, #4
 8005176:	d107      	bne.n	8005188 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005186:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e01a      	b.n	80051c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	d194      	bne.n	80050be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	e000      	b.n	80051c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80051c0:	2302      	movs	r3, #2
  }
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	00100002 	.word	0x00100002
 80051d0:	ffff0000 	.word	0xffff0000

080051d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af02      	add	r7, sp, #8
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	607a      	str	r2, [r7, #4]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	460b      	mov	r3, r1
 80051e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d006      	beq.n	80051fe <I2C_MasterRequestWrite+0x2a>
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d003      	beq.n	80051fe <I2C_MasterRequestWrite+0x2a>
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051fc:	d108      	bne.n	8005210 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	e00b      	b.n	8005228 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005214:	2b12      	cmp	r3, #18
 8005216:	d107      	bne.n	8005228 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005226:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 f84f 	bl	80052d8 <I2C_WaitOnFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00d      	beq.n	800525c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800524a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800524e:	d103      	bne.n	8005258 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005256:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e035      	b.n	80052c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005264:	d108      	bne.n	8005278 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005266:	897b      	ldrh	r3, [r7, #10]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005274:	611a      	str	r2, [r3, #16]
 8005276:	e01b      	b.n	80052b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005278:	897b      	ldrh	r3, [r7, #10]
 800527a:	11db      	asrs	r3, r3, #7
 800527c:	b2db      	uxtb	r3, r3
 800527e:	f003 0306 	and.w	r3, r3, #6
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f063 030f 	orn	r3, r3, #15
 8005288:	b2da      	uxtb	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	490e      	ldr	r1, [pc, #56]	@ (80052d0 <I2C_MasterRequestWrite+0xfc>)
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f898 	bl	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e010      	b.n	80052c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052a6:	897b      	ldrh	r3, [r7, #10]
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	4907      	ldr	r1, [pc, #28]	@ (80052d4 <I2C_MasterRequestWrite+0x100>)
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f888 	bl	80053cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	00010008 	.word	0x00010008
 80052d4:	00010002 	.word	0x00010002

080052d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052e8:	e048      	b.n	800537c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052f0:	d044      	beq.n	800537c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f2:	f7fc f989 	bl	8001608 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d302      	bcc.n	8005308 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d139      	bne.n	800537c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	0c1b      	lsrs	r3, r3, #16
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b01      	cmp	r3, #1
 8005310:	d10d      	bne.n	800532e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	43da      	mvns	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4013      	ands	r3, r2
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	bf0c      	ite	eq
 8005324:	2301      	moveq	r3, #1
 8005326:	2300      	movne	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	e00c      	b.n	8005348 <I2C_WaitOnFlagUntilTimeout+0x70>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	43da      	mvns	r2, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4013      	ands	r3, r2
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	429a      	cmp	r2, r3
 800534c:	d116      	bne.n	800537c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005368:	f043 0220 	orr.w	r2, r3, #32
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e023      	b.n	80053c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	0c1b      	lsrs	r3, r3, #16
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	d10d      	bne.n	80053a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	43da      	mvns	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	4013      	ands	r3, r2
 8005392:	b29b      	uxth	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	bf0c      	ite	eq
 8005398:	2301      	moveq	r3, #1
 800539a:	2300      	movne	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	e00c      	b.n	80053bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	43da      	mvns	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4013      	ands	r3, r2
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf0c      	ite	eq
 80053b4:	2301      	moveq	r3, #1
 80053b6:	2300      	movne	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d093      	beq.n	80052ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053da:	e071      	b.n	80054c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ea:	d123      	bne.n	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005404:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005420:	f043 0204 	orr.w	r2, r3, #4
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e067      	b.n	8005504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800543a:	d041      	beq.n	80054c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543c:	f7fc f8e4 	bl	8001608 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d302      	bcc.n	8005452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d136      	bne.n	80054c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	0c1b      	lsrs	r3, r3, #16
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d10c      	bne.n	8005476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	43da      	mvns	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4013      	ands	r3, r2
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	bf14      	ite	ne
 800546e:	2301      	movne	r3, #1
 8005470:	2300      	moveq	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	e00b      	b.n	800548e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	43da      	mvns	r2, r3
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4013      	ands	r3, r2
 8005482:	b29b      	uxth	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	bf14      	ite	ne
 8005488:	2301      	movne	r3, #1
 800548a:	2300      	moveq	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d016      	beq.n	80054c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ac:	f043 0220 	orr.w	r2, r3, #32
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e021      	b.n	8005504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	0c1b      	lsrs	r3, r3, #16
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d10c      	bne.n	80054e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	43da      	mvns	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4013      	ands	r3, r2
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	bf14      	ite	ne
 80054dc:	2301      	movne	r3, #1
 80054de:	2300      	moveq	r3, #0
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	e00b      	b.n	80054fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	43da      	mvns	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4013      	ands	r3, r2
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	bf14      	ite	ne
 80054f6:	2301      	movne	r3, #1
 80054f8:	2300      	moveq	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f47f af6d 	bne.w	80053dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005518:	e034      	b.n	8005584 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f886 	bl	800562c <I2C_IsAcknowledgeFailed>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e034      	b.n	8005594 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005530:	d028      	beq.n	8005584 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005532:	f7fc f869 	bl	8001608 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	429a      	cmp	r2, r3
 8005540:	d302      	bcc.n	8005548 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d11d      	bne.n	8005584 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005552:	2b80      	cmp	r3, #128	@ 0x80
 8005554:	d016      	beq.n	8005584 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005570:	f043 0220 	orr.w	r2, r3, #32
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e007      	b.n	8005594 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800558e:	2b80      	cmp	r3, #128	@ 0x80
 8005590:	d1c3      	bne.n	800551a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055a8:	e034      	b.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f83e 	bl	800562c <I2C_IsAcknowledgeFailed>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e034      	b.n	8005624 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055c0:	d028      	beq.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c2:	f7fc f821 	bl	8001608 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d302      	bcc.n	80055d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d11d      	bne.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d016      	beq.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	f043 0220 	orr.w	r2, r3, #32
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e007      	b.n	8005624 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b04      	cmp	r3, #4
 8005620:	d1c3      	bne.n	80055aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800563e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005642:	d11b      	bne.n	800567c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800564c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005668:	f043 0204 	orr.w	r2, r3, #4
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e128      	b.n	80058f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a90      	ldr	r2, [pc, #576]	@ (80058f8 <HAL_I2S_Init+0x26c>)
 80056b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7fb faa3 	bl	8000c04 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80056d4:	f023 030f 	bic.w	r3, r3, #15
 80056d8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2202      	movs	r2, #2
 80056e0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d060      	beq.n	80057ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d102      	bne.n	80056f8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80056f2:	2310      	movs	r3, #16
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	e001      	b.n	80056fc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80056f8:	2320      	movs	r3, #32
 80056fa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b20      	cmp	r3, #32
 8005702:	d802      	bhi.n	800570a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800570a:	2001      	movs	r0, #1
 800570c:	f001 fad0 	bl	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005710:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800571a:	d125      	bne.n	8005768 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d010      	beq.n	8005746 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	fbb2 f2f3 	udiv	r2, r2, r3
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	461a      	mov	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005740:	3305      	adds	r3, #5
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	e01f      	b.n	8005786 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	461a      	mov	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	3305      	adds	r3, #5
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	e00e      	b.n	8005786 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005770:	4613      	mov	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	461a      	mov	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005782:	3305      	adds	r3, #5
 8005784:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	4a5c      	ldr	r2, [pc, #368]	@ (80058fc <HAL_I2S_Init+0x270>)
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
 800578e:	08db      	lsrs	r3, r3, #3
 8005790:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	085b      	lsrs	r3, r3, #1
 80057a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	e003      	b.n	80057b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80057ac:	2302      	movs	r3, #2
 80057ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d902      	bls.n	80057c0 <HAL_I2S_Init+0x134>
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	2bff      	cmp	r3, #255	@ 0xff
 80057be:	d907      	bls.n	80057d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c4:	f043 0210 	orr.w	r2, r3, #16
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e08f      	b.n	80058f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	ea42 0103 	orr.w	r1, r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80057ee:	f023 030f 	bic.w	r3, r3, #15
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6851      	ldr	r1, [r2, #4]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6892      	ldr	r2, [r2, #8]
 80057fa:	4311      	orrs	r1, r2
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	68d2      	ldr	r2, [r2, #12]
 8005800:	4311      	orrs	r1, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6992      	ldr	r2, [r2, #24]
 8005806:	430a      	orrs	r2, r1
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005812:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d161      	bne.n	80058e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a38      	ldr	r2, [pc, #224]	@ (8005900 <HAL_I2S_Init+0x274>)
 8005820:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a37      	ldr	r2, [pc, #220]	@ (8005904 <HAL_I2S_Init+0x278>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d101      	bne.n	8005830 <HAL_I2S_Init+0x1a4>
 800582c:	4b36      	ldr	r3, [pc, #216]	@ (8005908 <HAL_I2S_Init+0x27c>)
 800582e:	e001      	b.n	8005834 <HAL_I2S_Init+0x1a8>
 8005830:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	4932      	ldr	r1, [pc, #200]	@ (8005904 <HAL_I2S_Init+0x278>)
 800583c:	428a      	cmp	r2, r1
 800583e:	d101      	bne.n	8005844 <HAL_I2S_Init+0x1b8>
 8005840:	4a31      	ldr	r2, [pc, #196]	@ (8005908 <HAL_I2S_Init+0x27c>)
 8005842:	e001      	b.n	8005848 <HAL_I2S_Init+0x1bc>
 8005844:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005848:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800584c:	f023 030f 	bic.w	r3, r3, #15
 8005850:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a2b      	ldr	r2, [pc, #172]	@ (8005904 <HAL_I2S_Init+0x278>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d101      	bne.n	8005860 <HAL_I2S_Init+0x1d4>
 800585c:	4b2a      	ldr	r3, [pc, #168]	@ (8005908 <HAL_I2S_Init+0x27c>)
 800585e:	e001      	b.n	8005864 <HAL_I2S_Init+0x1d8>
 8005860:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005864:	2202      	movs	r2, #2
 8005866:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a25      	ldr	r2, [pc, #148]	@ (8005904 <HAL_I2S_Init+0x278>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d101      	bne.n	8005876 <HAL_I2S_Init+0x1ea>
 8005872:	4b25      	ldr	r3, [pc, #148]	@ (8005908 <HAL_I2S_Init+0x27c>)
 8005874:	e001      	b.n	800587a <HAL_I2S_Init+0x1ee>
 8005876:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005886:	d003      	beq.n	8005890 <HAL_I2S_Init+0x204>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d103      	bne.n	8005898 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005890:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	e001      	b.n	800589c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005898:	2300      	movs	r3, #0
 800589a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80058a6:	4313      	orrs	r3, r2
 80058a8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80058b0:	4313      	orrs	r3, r2
 80058b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80058ba:	4313      	orrs	r3, r2
 80058bc:	b29a      	uxth	r2, r3
 80058be:	897b      	ldrh	r3, [r7, #10]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80058c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a0d      	ldr	r2, [pc, #52]	@ (8005904 <HAL_I2S_Init+0x278>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d101      	bne.n	80058d8 <HAL_I2S_Init+0x24c>
 80058d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005908 <HAL_I2S_Init+0x27c>)
 80058d6:	e001      	b.n	80058dc <HAL_I2S_Init+0x250>
 80058d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058dc:	897a      	ldrh	r2, [r7, #10]
 80058de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3720      	adds	r7, #32
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	08005bf5 	.word	0x08005bf5
 80058fc:	cccccccd 	.word	0xcccccccd
 8005900:	08005d09 	.word	0x08005d09
 8005904:	40003800 	.word	0x40003800
 8005908:	40003400 	.word	0x40003400

0800590c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	4613      	mov	r3, r2
 8005918:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_I2S_Transmit_DMA+0x1a>
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e08a      	b.n	8005a40 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b01      	cmp	r3, #1
 8005934:	d001      	beq.n	800593a <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8005936:	2302      	movs	r3, #2
 8005938:	e082      	b.n	8005a40 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_I2S_Transmit_DMA+0x3e>
 8005946:	2302      	movs	r3, #2
 8005948:	e07a      	b.n	8005a40 <HAL_I2S_Transmit_DMA+0x134>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2203      	movs	r2, #3
 8005956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b03      	cmp	r3, #3
 8005976:	d002      	beq.n	800597e <HAL_I2S_Transmit_DMA+0x72>
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b05      	cmp	r3, #5
 800597c:	d10a      	bne.n	8005994 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005992:	e005      	b.n	80059a0 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	88fa      	ldrh	r2, [r7, #6]
 8005998:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	88fa      	ldrh	r2, [r7, #6]
 800599e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a4:	4a28      	ldr	r2, [pc, #160]	@ (8005a48 <HAL_I2S_Transmit_DMA+0x13c>)
 80059a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ac:	4a27      	ldr	r2, [pc, #156]	@ (8005a4c <HAL_I2S_Transmit_DMA+0x140>)
 80059ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b4:	4a26      	ldr	r2, [pc, #152]	@ (8005a50 <HAL_I2S_Transmit_DMA+0x144>)
 80059b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80059c0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80059c8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80059d0:	f7fc fc12 	bl	80021f8 <HAL_DMA_Start_IT>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00f      	beq.n	80059fa <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059de:	f043 0208 	orr.w	r2, r3, #8
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e022      	b.n	8005a40 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d107      	bne.n	8005a20 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0202 	orr.w	r2, r2, #2
 8005a1e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d107      	bne.n	8005a3e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a3c:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	08005ad3 	.word	0x08005ad3
 8005a4c:	08005a91 	.word	0x08005a91
 8005a50:	08005aef 	.word	0x08005aef

08005a54 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10e      	bne.n	8005ac4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0202 	bic.w	r2, r2, #2
 8005ab4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f7fb faa5 	bl	8001014 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005aca:	bf00      	nop
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7ff ffb7 	bl	8005a54 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005ae6:	bf00      	nop
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0203 	bic.w	r2, r2, #3
 8005b0a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b24:	f043 0208 	orr.w	r2, r3, #8
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff ffa5 	bl	8005a7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005b32:	bf00      	nop
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b46:	881a      	ldrh	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b52:	1c9a      	adds	r2, r3, #2
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10e      	bne.n	8005b8e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b7e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7fb fa43 	bl	8001014 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b8e:	bf00      	nop
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba8:	b292      	uxth	r2, r2
 8005baa:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb0:	1c9a      	adds	r2, r3, #2
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10e      	bne.n	8005bec <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005bdc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7ff ff3e 	bl	8005a68 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005bec:	bf00      	nop
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d13a      	bne.n	8005c86 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d109      	bne.n	8005c2e <I2S_IRQHandler+0x3a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c24:	2b40      	cmp	r3, #64	@ 0x40
 8005c26:	d102      	bne.n	8005c2e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff ffb4 	bl	8005b96 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c34:	2b40      	cmp	r3, #64	@ 0x40
 8005c36:	d126      	bne.n	8005c86 <I2S_IRQHandler+0x92>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d11f      	bne.n	8005c86 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c54:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c56:	2300      	movs	r3, #0
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c78:	f043 0202 	orr.w	r2, r3, #2
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff fefb 	bl	8005a7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d136      	bne.n	8005d00 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d109      	bne.n	8005cb0 <I2S_IRQHandler+0xbc>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca6:	2b80      	cmp	r3, #128	@ 0x80
 8005ca8:	d102      	bne.n	8005cb0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff ff45 	bl	8005b3a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	d122      	bne.n	8005d00 <I2S_IRQHandler+0x10c>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b20      	cmp	r3, #32
 8005cc6:	d11b      	bne.n	8005d00 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005cd6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf2:	f043 0204 	orr.w	r2, r3, #4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f7ff febe 	bl	8005a7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d00:	bf00      	nop
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a92      	ldr	r2, [pc, #584]	@ (8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d101      	bne.n	8005d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005d22:	4b92      	ldr	r3, [pc, #584]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d24:	e001      	b.n	8005d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005d26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a8b      	ldr	r2, [pc, #556]	@ (8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d101      	bne.n	8005d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005d40:	4b8a      	ldr	r3, [pc, #552]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d42:	e001      	b.n	8005d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005d44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d54:	d004      	beq.n	8005d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f040 8099 	bne.w	8005e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d107      	bne.n	8005d7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f925 	bl	8005fc4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d107      	bne.n	8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f9c8 	bl	8006124 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9a:	2b40      	cmp	r3, #64	@ 0x40
 8005d9c:	d13a      	bne.n	8005e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d035      	beq.n	8005e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a6e      	ldr	r2, [pc, #440]	@ (8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d101      	bne.n	8005db6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005db2:	4b6e      	ldr	r3, [pc, #440]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005db4:	e001      	b.n	8005dba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005db6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4969      	ldr	r1, [pc, #420]	@ (8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dc2:	428b      	cmp	r3, r1
 8005dc4:	d101      	bne.n	8005dca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005dc6:	4b69      	ldr	r3, [pc, #420]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dc8:	e001      	b.n	8005dce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005dca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005dd2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005de2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e06:	f043 0202 	orr.w	r2, r3, #2
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff fe34 	bl	8005a7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	f040 80c3 	bne.w	8005fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 80bd 	beq.w	8005fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e3a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a49      	ldr	r2, [pc, #292]	@ (8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d101      	bne.n	8005e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005e46:	4b49      	ldr	r3, [pc, #292]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e48:	e001      	b.n	8005e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005e4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4944      	ldr	r1, [pc, #272]	@ (8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e56:	428b      	cmp	r3, r1
 8005e58:	d101      	bne.n	8005e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005e5a:	4b44      	ldr	r3, [pc, #272]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e5c:	e001      	b.n	8005e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005e5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e62:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e66:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60bb      	str	r3, [r7, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	60bb      	str	r3, [r7, #8]
 8005e74:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e82:	f043 0204 	orr.w	r2, r3, #4
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff fdf6 	bl	8005a7c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e90:	e089      	b.n	8005fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d107      	bne.n	8005eac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f8be 	bl	8006028 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d107      	bne.n	8005ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f8fd 	bl	80060c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ecc:	2b40      	cmp	r3, #64	@ 0x40
 8005ece:	d12f      	bne.n	8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d02a      	beq.n	8005f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ee8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1e      	ldr	r2, [pc, #120]	@ (8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d101      	bne.n	8005ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ef6:	e001      	b.n	8005efc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005ef8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4919      	ldr	r1, [pc, #100]	@ (8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f04:	428b      	cmp	r3, r1
 8005f06:	d101      	bne.n	8005f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005f08:	4b18      	ldr	r3, [pc, #96]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f0a:	e001      	b.n	8005f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005f0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f14:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f22:	f043 0202 	orr.w	r2, r3, #2
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff fda6 	bl	8005a7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d136      	bne.n	8005fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d031      	beq.n	8005fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a07      	ldr	r2, [pc, #28]	@ (8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d101      	bne.n	8005f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005f4e:	4b07      	ldr	r3, [pc, #28]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f50:	e001      	b.n	8005f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005f52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4902      	ldr	r1, [pc, #8]	@ (8005f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f5e:	428b      	cmp	r3, r1
 8005f60:	d106      	bne.n	8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005f62:	4b02      	ldr	r3, [pc, #8]	@ (8005f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f64:	e006      	b.n	8005f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005f66:	bf00      	nop
 8005f68:	40003800 	.word	0x40003800
 8005f6c:	40003400 	.word	0x40003400
 8005f70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f74:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f78:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f88:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f96:	f043 0204 	orr.w	r2, r3, #4
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff fd6c 	bl	8005a7c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fa4:	e000      	b.n	8005fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fa6:	bf00      	nop
}
 8005fa8:	bf00      	nop
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	1c99      	adds	r1, r3, #2
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6251      	str	r1, [r2, #36]	@ 0x24
 8005fd6:	881a      	ldrh	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d113      	bne.n	800601e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006004:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800600a:	b29b      	uxth	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d106      	bne.n	800601e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff ffc9 	bl	8005fb0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800601e:	bf00      	nop
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
	...

08006028 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006034:	1c99      	adds	r1, r3, #2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6251      	str	r1, [r2, #36]	@ 0x24
 800603a:	8819      	ldrh	r1, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1d      	ldr	r2, [pc, #116]	@ (80060b8 <I2SEx_TxISR_I2SExt+0x90>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d101      	bne.n	800604a <I2SEx_TxISR_I2SExt+0x22>
 8006046:	4b1d      	ldr	r3, [pc, #116]	@ (80060bc <I2SEx_TxISR_I2SExt+0x94>)
 8006048:	e001      	b.n	800604e <I2SEx_TxISR_I2SExt+0x26>
 800604a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800604e:	460a      	mov	r2, r1
 8006050:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006056:	b29b      	uxth	r3, r3
 8006058:	3b01      	subs	r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006064:	b29b      	uxth	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d121      	bne.n	80060ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a12      	ldr	r2, [pc, #72]	@ (80060b8 <I2SEx_TxISR_I2SExt+0x90>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d101      	bne.n	8006078 <I2SEx_TxISR_I2SExt+0x50>
 8006074:	4b11      	ldr	r3, [pc, #68]	@ (80060bc <I2SEx_TxISR_I2SExt+0x94>)
 8006076:	e001      	b.n	800607c <I2SEx_TxISR_I2SExt+0x54>
 8006078:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	490d      	ldr	r1, [pc, #52]	@ (80060b8 <I2SEx_TxISR_I2SExt+0x90>)
 8006084:	428b      	cmp	r3, r1
 8006086:	d101      	bne.n	800608c <I2SEx_TxISR_I2SExt+0x64>
 8006088:	4b0c      	ldr	r3, [pc, #48]	@ (80060bc <I2SEx_TxISR_I2SExt+0x94>)
 800608a:	e001      	b.n	8006090 <I2SEx_TxISR_I2SExt+0x68>
 800608c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006090:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006094:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d106      	bne.n	80060ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff ff81 	bl	8005fb0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060ae:	bf00      	nop
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	40003800 	.word	0x40003800
 80060bc:	40003400 	.word	0x40003400

080060c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68d8      	ldr	r0, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d2:	1c99      	adds	r1, r3, #2
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80060d8:	b282      	uxth	r2, r0
 80060da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3b01      	subs	r3, #1
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d113      	bne.n	800611c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006102:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff ff4a 	bl	8005fb0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800611c:	bf00      	nop
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a20      	ldr	r2, [pc, #128]	@ (80061b4 <I2SEx_RxISR_I2SExt+0x90>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d101      	bne.n	800613a <I2SEx_RxISR_I2SExt+0x16>
 8006136:	4b20      	ldr	r3, [pc, #128]	@ (80061b8 <I2SEx_RxISR_I2SExt+0x94>)
 8006138:	e001      	b.n	800613e <I2SEx_RxISR_I2SExt+0x1a>
 800613a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800613e:	68d8      	ldr	r0, [r3, #12]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006144:	1c99      	adds	r1, r3, #2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800614a:	b282      	uxth	r2, r0
 800614c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d121      	bne.n	80061aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a12      	ldr	r2, [pc, #72]	@ (80061b4 <I2SEx_RxISR_I2SExt+0x90>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d101      	bne.n	8006174 <I2SEx_RxISR_I2SExt+0x50>
 8006170:	4b11      	ldr	r3, [pc, #68]	@ (80061b8 <I2SEx_RxISR_I2SExt+0x94>)
 8006172:	e001      	b.n	8006178 <I2SEx_RxISR_I2SExt+0x54>
 8006174:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	490d      	ldr	r1, [pc, #52]	@ (80061b4 <I2SEx_RxISR_I2SExt+0x90>)
 8006180:	428b      	cmp	r3, r1
 8006182:	d101      	bne.n	8006188 <I2SEx_RxISR_I2SExt+0x64>
 8006184:	4b0c      	ldr	r3, [pc, #48]	@ (80061b8 <I2SEx_RxISR_I2SExt+0x94>)
 8006186:	e001      	b.n	800618c <I2SEx_RxISR_I2SExt+0x68>
 8006188:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800618c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006190:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d106      	bne.n	80061aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff ff03 	bl	8005fb0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40003800 	.word	0x40003800
 80061b8:	40003400 	.word	0x40003400

080061bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e267      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d075      	beq.n	80062c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061da:	4b88      	ldr	r3, [pc, #544]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 030c 	and.w	r3, r3, #12
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d00c      	beq.n	8006200 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061e6:	4b85      	ldr	r3, [pc, #532]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d112      	bne.n	8006218 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061f2:	4b82      	ldr	r3, [pc, #520]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061fe:	d10b      	bne.n	8006218 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006200:	4b7e      	ldr	r3, [pc, #504]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d05b      	beq.n	80062c4 <HAL_RCC_OscConfig+0x108>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d157      	bne.n	80062c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e242      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006220:	d106      	bne.n	8006230 <HAL_RCC_OscConfig+0x74>
 8006222:	4b76      	ldr	r3, [pc, #472]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a75      	ldr	r2, [pc, #468]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 8006228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	e01d      	b.n	800626c <HAL_RCC_OscConfig+0xb0>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006238:	d10c      	bne.n	8006254 <HAL_RCC_OscConfig+0x98>
 800623a:	4b70      	ldr	r3, [pc, #448]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a6f      	ldr	r2, [pc, #444]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 8006240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	4b6d      	ldr	r3, [pc, #436]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a6c      	ldr	r2, [pc, #432]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 800624c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	e00b      	b.n	800626c <HAL_RCC_OscConfig+0xb0>
 8006254:	4b69      	ldr	r3, [pc, #420]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a68      	ldr	r2, [pc, #416]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 800625a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	4b66      	ldr	r3, [pc, #408]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a65      	ldr	r2, [pc, #404]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 8006266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800626a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d013      	beq.n	800629c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006274:	f7fb f9c8 	bl	8001608 <HAL_GetTick>
 8006278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627a:	e008      	b.n	800628e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800627c:	f7fb f9c4 	bl	8001608 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	2b64      	cmp	r3, #100	@ 0x64
 8006288:	d901      	bls.n	800628e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e207      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800628e:	4b5b      	ldr	r3, [pc, #364]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0f0      	beq.n	800627c <HAL_RCC_OscConfig+0xc0>
 800629a:	e014      	b.n	80062c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800629c:	f7fb f9b4 	bl	8001608 <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062a4:	f7fb f9b0 	bl	8001608 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b64      	cmp	r3, #100	@ 0x64
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e1f3      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062b6:	4b51      	ldr	r3, [pc, #324]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f0      	bne.n	80062a4 <HAL_RCC_OscConfig+0xe8>
 80062c2:	e000      	b.n	80062c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d063      	beq.n	800639a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062d2:	4b4a      	ldr	r3, [pc, #296]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 030c 	and.w	r3, r3, #12
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00b      	beq.n	80062f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062de:	4b47      	ldr	r3, [pc, #284]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062e6:	2b08      	cmp	r3, #8
 80062e8:	d11c      	bne.n	8006324 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ea:	4b44      	ldr	r3, [pc, #272]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d116      	bne.n	8006324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062f6:	4b41      	ldr	r3, [pc, #260]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <HAL_RCC_OscConfig+0x152>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d001      	beq.n	800630e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e1c7      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800630e:	4b3b      	ldr	r3, [pc, #236]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	4937      	ldr	r1, [pc, #220]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 800631e:	4313      	orrs	r3, r2
 8006320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006322:	e03a      	b.n	800639a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d020      	beq.n	800636e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800632c:	4b34      	ldr	r3, [pc, #208]	@ (8006400 <HAL_RCC_OscConfig+0x244>)
 800632e:	2201      	movs	r2, #1
 8006330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006332:	f7fb f969 	bl	8001608 <HAL_GetTick>
 8006336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006338:	e008      	b.n	800634c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800633a:	f7fb f965 	bl	8001608 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e1a8      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800634c:	4b2b      	ldr	r3, [pc, #172]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d0f0      	beq.n	800633a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006358:	4b28      	ldr	r3, [pc, #160]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	4925      	ldr	r1, [pc, #148]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 8006368:	4313      	orrs	r3, r2
 800636a:	600b      	str	r3, [r1, #0]
 800636c:	e015      	b.n	800639a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800636e:	4b24      	ldr	r3, [pc, #144]	@ (8006400 <HAL_RCC_OscConfig+0x244>)
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006374:	f7fb f948 	bl	8001608 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800637c:	f7fb f944 	bl	8001608 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e187      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800638e:	4b1b      	ldr	r3, [pc, #108]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f0      	bne.n	800637c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d036      	beq.n	8006414 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d016      	beq.n	80063dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ae:	4b15      	ldr	r3, [pc, #84]	@ (8006404 <HAL_RCC_OscConfig+0x248>)
 80063b0:	2201      	movs	r2, #1
 80063b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b4:	f7fb f928 	bl	8001608 <HAL_GetTick>
 80063b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063bc:	f7fb f924 	bl	8001608 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e167      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063ce:	4b0b      	ldr	r3, [pc, #44]	@ (80063fc <HAL_RCC_OscConfig+0x240>)
 80063d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0f0      	beq.n	80063bc <HAL_RCC_OscConfig+0x200>
 80063da:	e01b      	b.n	8006414 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063dc:	4b09      	ldr	r3, [pc, #36]	@ (8006404 <HAL_RCC_OscConfig+0x248>)
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063e2:	f7fb f911 	bl	8001608 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063e8:	e00e      	b.n	8006408 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ea:	f7fb f90d 	bl	8001608 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d907      	bls.n	8006408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e150      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
 80063fc:	40023800 	.word	0x40023800
 8006400:	42470000 	.word	0x42470000
 8006404:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006408:	4b88      	ldr	r3, [pc, #544]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 800640a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1ea      	bne.n	80063ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 8097 	beq.w	8006550 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006422:	2300      	movs	r3, #0
 8006424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006426:	4b81      	ldr	r3, [pc, #516]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10f      	bne.n	8006452 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006432:	2300      	movs	r3, #0
 8006434:	60bb      	str	r3, [r7, #8]
 8006436:	4b7d      	ldr	r3, [pc, #500]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 8006438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643a:	4a7c      	ldr	r2, [pc, #496]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 800643c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006440:	6413      	str	r3, [r2, #64]	@ 0x40
 8006442:	4b7a      	ldr	r3, [pc, #488]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800644a:	60bb      	str	r3, [r7, #8]
 800644c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800644e:	2301      	movs	r3, #1
 8006450:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006452:	4b77      	ldr	r3, [pc, #476]	@ (8006630 <HAL_RCC_OscConfig+0x474>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800645a:	2b00      	cmp	r3, #0
 800645c:	d118      	bne.n	8006490 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800645e:	4b74      	ldr	r3, [pc, #464]	@ (8006630 <HAL_RCC_OscConfig+0x474>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a73      	ldr	r2, [pc, #460]	@ (8006630 <HAL_RCC_OscConfig+0x474>)
 8006464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800646a:	f7fb f8cd 	bl	8001608 <HAL_GetTick>
 800646e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006472:	f7fb f8c9 	bl	8001608 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e10c      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006484:	4b6a      	ldr	r3, [pc, #424]	@ (8006630 <HAL_RCC_OscConfig+0x474>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f0      	beq.n	8006472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d106      	bne.n	80064a6 <HAL_RCC_OscConfig+0x2ea>
 8006498:	4b64      	ldr	r3, [pc, #400]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 800649a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800649c:	4a63      	ldr	r2, [pc, #396]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 800649e:	f043 0301 	orr.w	r3, r3, #1
 80064a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80064a4:	e01c      	b.n	80064e0 <HAL_RCC_OscConfig+0x324>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	2b05      	cmp	r3, #5
 80064ac:	d10c      	bne.n	80064c8 <HAL_RCC_OscConfig+0x30c>
 80064ae:	4b5f      	ldr	r3, [pc, #380]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 80064b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b2:	4a5e      	ldr	r2, [pc, #376]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 80064b4:	f043 0304 	orr.w	r3, r3, #4
 80064b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ba:	4b5c      	ldr	r3, [pc, #368]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 80064bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064be:	4a5b      	ldr	r2, [pc, #364]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 80064c0:	f043 0301 	orr.w	r3, r3, #1
 80064c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80064c6:	e00b      	b.n	80064e0 <HAL_RCC_OscConfig+0x324>
 80064c8:	4b58      	ldr	r3, [pc, #352]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 80064ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064cc:	4a57      	ldr	r2, [pc, #348]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 80064ce:	f023 0301 	bic.w	r3, r3, #1
 80064d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80064d4:	4b55      	ldr	r3, [pc, #340]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 80064d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d8:	4a54      	ldr	r2, [pc, #336]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 80064da:	f023 0304 	bic.w	r3, r3, #4
 80064de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d015      	beq.n	8006514 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e8:	f7fb f88e 	bl	8001608 <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ee:	e00a      	b.n	8006506 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064f0:	f7fb f88a 	bl	8001608 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064fe:	4293      	cmp	r3, r2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e0cb      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006506:	4b49      	ldr	r3, [pc, #292]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 8006508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0ee      	beq.n	80064f0 <HAL_RCC_OscConfig+0x334>
 8006512:	e014      	b.n	800653e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006514:	f7fb f878 	bl	8001608 <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800651a:	e00a      	b.n	8006532 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800651c:	f7fb f874 	bl	8001608 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800652a:	4293      	cmp	r3, r2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e0b5      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006532:	4b3e      	ldr	r3, [pc, #248]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 8006534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1ee      	bne.n	800651c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800653e:	7dfb      	ldrb	r3, [r7, #23]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d105      	bne.n	8006550 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006544:	4b39      	ldr	r3, [pc, #228]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 8006546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006548:	4a38      	ldr	r2, [pc, #224]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 800654a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800654e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 80a1 	beq.w	800669c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800655a:	4b34      	ldr	r3, [pc, #208]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 030c 	and.w	r3, r3, #12
 8006562:	2b08      	cmp	r3, #8
 8006564:	d05c      	beq.n	8006620 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	2b02      	cmp	r3, #2
 800656c:	d141      	bne.n	80065f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800656e:	4b31      	ldr	r3, [pc, #196]	@ (8006634 <HAL_RCC_OscConfig+0x478>)
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006574:	f7fb f848 	bl	8001608 <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800657c:	f7fb f844 	bl	8001608 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e087      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800658e:	4b27      	ldr	r3, [pc, #156]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1f0      	bne.n	800657c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69da      	ldr	r2, [r3, #28]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a8:	019b      	lsls	r3, r3, #6
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b0:	085b      	lsrs	r3, r3, #1
 80065b2:	3b01      	subs	r3, #1
 80065b4:	041b      	lsls	r3, r3, #16
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065bc:	061b      	lsls	r3, r3, #24
 80065be:	491b      	ldr	r1, [pc, #108]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006634 <HAL_RCC_OscConfig+0x478>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ca:	f7fb f81d 	bl	8001608 <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d2:	f7fb f819 	bl	8001608 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e05c      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065e4:	4b11      	ldr	r3, [pc, #68]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0f0      	beq.n	80065d2 <HAL_RCC_OscConfig+0x416>
 80065f0:	e054      	b.n	800669c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065f2:	4b10      	ldr	r3, [pc, #64]	@ (8006634 <HAL_RCC_OscConfig+0x478>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f8:	f7fb f806 	bl	8001608 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006600:	f7fb f802 	bl	8001608 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e045      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006612:	4b06      	ldr	r3, [pc, #24]	@ (800662c <HAL_RCC_OscConfig+0x470>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f0      	bne.n	8006600 <HAL_RCC_OscConfig+0x444>
 800661e:	e03d      	b.n	800669c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d107      	bne.n	8006638 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e038      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
 800662c:	40023800 	.word	0x40023800
 8006630:	40007000 	.word	0x40007000
 8006634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006638:	4b1b      	ldr	r3, [pc, #108]	@ (80066a8 <HAL_RCC_OscConfig+0x4ec>)
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d028      	beq.n	8006698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006650:	429a      	cmp	r2, r3
 8006652:	d121      	bne.n	8006698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800665e:	429a      	cmp	r2, r3
 8006660:	d11a      	bne.n	8006698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006668:	4013      	ands	r3, r2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800666e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006670:	4293      	cmp	r3, r2
 8006672:	d111      	bne.n	8006698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667e:	085b      	lsrs	r3, r3, #1
 8006680:	3b01      	subs	r3, #1
 8006682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006684:	429a      	cmp	r2, r3
 8006686:	d107      	bne.n	8006698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006694:	429a      	cmp	r2, r3
 8006696:	d001      	beq.n	800669c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e000      	b.n	800669e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	40023800 	.word	0x40023800

080066ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e0cc      	b.n	800685a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066c0:	4b68      	ldr	r3, [pc, #416]	@ (8006864 <HAL_RCC_ClockConfig+0x1b8>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d90c      	bls.n	80066e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ce:	4b65      	ldr	r3, [pc, #404]	@ (8006864 <HAL_RCC_ClockConfig+0x1b8>)
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066d6:	4b63      	ldr	r3, [pc, #396]	@ (8006864 <HAL_RCC_ClockConfig+0x1b8>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d001      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0b8      	b.n	800685a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d020      	beq.n	8006736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006700:	4b59      	ldr	r3, [pc, #356]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	4a58      	ldr	r2, [pc, #352]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 8006706:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800670a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006718:	4b53      	ldr	r3, [pc, #332]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	4a52      	ldr	r2, [pc, #328]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006724:	4b50      	ldr	r3, [pc, #320]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	494d      	ldr	r1, [pc, #308]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 8006732:	4313      	orrs	r3, r2
 8006734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d044      	beq.n	80067cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d107      	bne.n	800675a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800674a:	4b47      	ldr	r3, [pc, #284]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d119      	bne.n	800678a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e07f      	b.n	800685a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b02      	cmp	r3, #2
 8006760:	d003      	beq.n	800676a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006766:	2b03      	cmp	r3, #3
 8006768:	d107      	bne.n	800677a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800676a:	4b3f      	ldr	r3, [pc, #252]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d109      	bne.n	800678a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e06f      	b.n	800685a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800677a:	4b3b      	ldr	r3, [pc, #236]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0302 	and.w	r3, r3, #2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e067      	b.n	800685a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800678a:	4b37      	ldr	r3, [pc, #220]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f023 0203 	bic.w	r2, r3, #3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	4934      	ldr	r1, [pc, #208]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 8006798:	4313      	orrs	r3, r2
 800679a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800679c:	f7fa ff34 	bl	8001608 <HAL_GetTick>
 80067a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a2:	e00a      	b.n	80067ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067a4:	f7fa ff30 	bl	8001608 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e04f      	b.n	800685a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 020c 	and.w	r2, r3, #12
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d1eb      	bne.n	80067a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067cc:	4b25      	ldr	r3, [pc, #148]	@ (8006864 <HAL_RCC_ClockConfig+0x1b8>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d20c      	bcs.n	80067f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067da:	4b22      	ldr	r3, [pc, #136]	@ (8006864 <HAL_RCC_ClockConfig+0x1b8>)
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067e2:	4b20      	ldr	r3, [pc, #128]	@ (8006864 <HAL_RCC_ClockConfig+0x1b8>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d001      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e032      	b.n	800685a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d008      	beq.n	8006812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006800:	4b19      	ldr	r3, [pc, #100]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	4916      	ldr	r1, [pc, #88]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 800680e:	4313      	orrs	r3, r2
 8006810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0308 	and.w	r3, r3, #8
 800681a:	2b00      	cmp	r3, #0
 800681c:	d009      	beq.n	8006832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800681e:	4b12      	ldr	r3, [pc, #72]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	490e      	ldr	r1, [pc, #56]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 800682e:	4313      	orrs	r3, r2
 8006830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006832:	f000 f821 	bl	8006878 <HAL_RCC_GetSysClockFreq>
 8006836:	4602      	mov	r2, r0
 8006838:	4b0b      	ldr	r3, [pc, #44]	@ (8006868 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	091b      	lsrs	r3, r3, #4
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	490a      	ldr	r1, [pc, #40]	@ (800686c <HAL_RCC_ClockConfig+0x1c0>)
 8006844:	5ccb      	ldrb	r3, [r1, r3]
 8006846:	fa22 f303 	lsr.w	r3, r2, r3
 800684a:	4a09      	ldr	r2, [pc, #36]	@ (8006870 <HAL_RCC_ClockConfig+0x1c4>)
 800684c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800684e:	4b09      	ldr	r3, [pc, #36]	@ (8006874 <HAL_RCC_ClockConfig+0x1c8>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f7fa fe94 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	40023c00 	.word	0x40023c00
 8006868:	40023800 	.word	0x40023800
 800686c:	0800bf20 	.word	0x0800bf20
 8006870:	20000800 	.word	0x20000800
 8006874:	20000804 	.word	0x20000804

08006878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800687c:	b094      	sub	sp, #80	@ 0x50
 800687e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006888:	2300      	movs	r3, #0
 800688a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006890:	4b79      	ldr	r3, [pc, #484]	@ (8006a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 030c 	and.w	r3, r3, #12
 8006898:	2b08      	cmp	r3, #8
 800689a:	d00d      	beq.n	80068b8 <HAL_RCC_GetSysClockFreq+0x40>
 800689c:	2b08      	cmp	r3, #8
 800689e:	f200 80e1 	bhi.w	8006a64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <HAL_RCC_GetSysClockFreq+0x34>
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d003      	beq.n	80068b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80068aa:	e0db      	b.n	8006a64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068ac:	4b73      	ldr	r3, [pc, #460]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x204>)
 80068ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068b0:	e0db      	b.n	8006a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068b2:	4b73      	ldr	r3, [pc, #460]	@ (8006a80 <HAL_RCC_GetSysClockFreq+0x208>)
 80068b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068b6:	e0d8      	b.n	8006a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068b8:	4b6f      	ldr	r3, [pc, #444]	@ (8006a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068c2:	4b6d      	ldr	r3, [pc, #436]	@ (8006a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d063      	beq.n	8006996 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	099b      	lsrs	r3, r3, #6
 80068d4:	2200      	movs	r2, #0
 80068d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80068da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80068e2:	2300      	movs	r3, #0
 80068e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80068ea:	4622      	mov	r2, r4
 80068ec:	462b      	mov	r3, r5
 80068ee:	f04f 0000 	mov.w	r0, #0
 80068f2:	f04f 0100 	mov.w	r1, #0
 80068f6:	0159      	lsls	r1, r3, #5
 80068f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068fc:	0150      	lsls	r0, r2, #5
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4621      	mov	r1, r4
 8006904:	1a51      	subs	r1, r2, r1
 8006906:	6139      	str	r1, [r7, #16]
 8006908:	4629      	mov	r1, r5
 800690a:	eb63 0301 	sbc.w	r3, r3, r1
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	f04f 0300 	mov.w	r3, #0
 8006918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800691c:	4659      	mov	r1, fp
 800691e:	018b      	lsls	r3, r1, #6
 8006920:	4651      	mov	r1, sl
 8006922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006926:	4651      	mov	r1, sl
 8006928:	018a      	lsls	r2, r1, #6
 800692a:	4651      	mov	r1, sl
 800692c:	ebb2 0801 	subs.w	r8, r2, r1
 8006930:	4659      	mov	r1, fp
 8006932:	eb63 0901 	sbc.w	r9, r3, r1
 8006936:	f04f 0200 	mov.w	r2, #0
 800693a:	f04f 0300 	mov.w	r3, #0
 800693e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800694a:	4690      	mov	r8, r2
 800694c:	4699      	mov	r9, r3
 800694e:	4623      	mov	r3, r4
 8006950:	eb18 0303 	adds.w	r3, r8, r3
 8006954:	60bb      	str	r3, [r7, #8]
 8006956:	462b      	mov	r3, r5
 8006958:	eb49 0303 	adc.w	r3, r9, r3
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800696a:	4629      	mov	r1, r5
 800696c:	024b      	lsls	r3, r1, #9
 800696e:	4621      	mov	r1, r4
 8006970:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006974:	4621      	mov	r1, r4
 8006976:	024a      	lsls	r2, r1, #9
 8006978:	4610      	mov	r0, r2
 800697a:	4619      	mov	r1, r3
 800697c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800697e:	2200      	movs	r2, #0
 8006980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006982:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006988:	f7f9 fc1e 	bl	80001c8 <__aeabi_uldivmod>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4613      	mov	r3, r2
 8006992:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006994:	e058      	b.n	8006a48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006996:	4b38      	ldr	r3, [pc, #224]	@ (8006a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	099b      	lsrs	r3, r3, #6
 800699c:	2200      	movs	r2, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	4611      	mov	r1, r2
 80069a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069a6:	623b      	str	r3, [r7, #32]
 80069a8:	2300      	movs	r3, #0
 80069aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80069ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069b0:	4642      	mov	r2, r8
 80069b2:	464b      	mov	r3, r9
 80069b4:	f04f 0000 	mov.w	r0, #0
 80069b8:	f04f 0100 	mov.w	r1, #0
 80069bc:	0159      	lsls	r1, r3, #5
 80069be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069c2:	0150      	lsls	r0, r2, #5
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4641      	mov	r1, r8
 80069ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80069ce:	4649      	mov	r1, r9
 80069d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069e8:	ebb2 040a 	subs.w	r4, r2, sl
 80069ec:	eb63 050b 	sbc.w	r5, r3, fp
 80069f0:	f04f 0200 	mov.w	r2, #0
 80069f4:	f04f 0300 	mov.w	r3, #0
 80069f8:	00eb      	lsls	r3, r5, #3
 80069fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069fe:	00e2      	lsls	r2, r4, #3
 8006a00:	4614      	mov	r4, r2
 8006a02:	461d      	mov	r5, r3
 8006a04:	4643      	mov	r3, r8
 8006a06:	18e3      	adds	r3, r4, r3
 8006a08:	603b      	str	r3, [r7, #0]
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	eb45 0303 	adc.w	r3, r5, r3
 8006a10:	607b      	str	r3, [r7, #4]
 8006a12:	f04f 0200 	mov.w	r2, #0
 8006a16:	f04f 0300 	mov.w	r3, #0
 8006a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a1e:	4629      	mov	r1, r5
 8006a20:	028b      	lsls	r3, r1, #10
 8006a22:	4621      	mov	r1, r4
 8006a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a28:	4621      	mov	r1, r4
 8006a2a:	028a      	lsls	r2, r1, #10
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a32:	2200      	movs	r2, #0
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	61fa      	str	r2, [r7, #28]
 8006a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a3c:	f7f9 fbc4 	bl	80001c8 <__aeabi_uldivmod>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4613      	mov	r3, r2
 8006a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a48:	4b0b      	ldr	r3, [pc, #44]	@ (8006a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	0c1b      	lsrs	r3, r3, #16
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	3301      	adds	r3, #1
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006a58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a62:	e002      	b.n	8006a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a64:	4b05      	ldr	r3, [pc, #20]	@ (8006a7c <HAL_RCC_GetSysClockFreq+0x204>)
 8006a66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3750      	adds	r7, #80	@ 0x50
 8006a70:	46bd      	mov	sp, r7
 8006a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a76:	bf00      	nop
 8006a78:	40023800 	.word	0x40023800
 8006a7c:	00f42400 	.word	0x00f42400
 8006a80:	007a1200 	.word	0x007a1200

08006a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a88:	4b03      	ldr	r3, [pc, #12]	@ (8006a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	20000800 	.word	0x20000800

08006a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006aa0:	f7ff fff0 	bl	8006a84 <HAL_RCC_GetHCLKFreq>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	4b05      	ldr	r3, [pc, #20]	@ (8006abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	0a9b      	lsrs	r3, r3, #10
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	4903      	ldr	r1, [pc, #12]	@ (8006ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ab2:	5ccb      	ldrb	r3, [r1, r3]
 8006ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	0800bf30 	.word	0x0800bf30

08006ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ac8:	f7ff ffdc 	bl	8006a84 <HAL_RCC_GetHCLKFreq>
 8006acc:	4602      	mov	r2, r0
 8006ace:	4b05      	ldr	r3, [pc, #20]	@ (8006ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	0b5b      	lsrs	r3, r3, #13
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	4903      	ldr	r1, [pc, #12]	@ (8006ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ada:	5ccb      	ldrb	r3, [r1, r3]
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40023800 	.word	0x40023800
 8006ae8:	0800bf30 	.word	0x0800bf30

08006aec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d105      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d035      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b14:	4b62      	ldr	r3, [pc, #392]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b1a:	f7fa fd75 	bl	8001608 <HAL_GetTick>
 8006b1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b20:	e008      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b22:	f7fa fd71 	bl	8001608 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e0b0      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b34:	4b5b      	ldr	r3, [pc, #364]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1f0      	bne.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	019a      	lsls	r2, r3, #6
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	071b      	lsls	r3, r3, #28
 8006b4c:	4955      	ldr	r1, [pc, #340]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b54:	4b52      	ldr	r3, [pc, #328]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006b56:	2201      	movs	r2, #1
 8006b58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b5a:	f7fa fd55 	bl	8001608 <HAL_GetTick>
 8006b5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b60:	e008      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b62:	f7fa fd51 	bl	8001608 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e090      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b74:	4b4b      	ldr	r3, [pc, #300]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0f0      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8083 	beq.w	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	4b44      	ldr	r3, [pc, #272]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b96:	4a43      	ldr	r2, [pc, #268]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b9e:	4b41      	ldr	r3, [pc, #260]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006baa:	4b3f      	ldr	r3, [pc, #252]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a3e      	ldr	r2, [pc, #248]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bb6:	f7fa fd27 	bl	8001608 <HAL_GetTick>
 8006bba:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bbe:	f7fa fd23 	bl	8001608 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e062      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006bd0:	4b35      	ldr	r3, [pc, #212]	@ (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0f0      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bdc:	4b31      	ldr	r3, [pc, #196]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006be0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006be4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d02f      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d028      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c02:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c04:	4b29      	ldr	r3, [pc, #164]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c06:	2201      	movs	r2, #1
 8006c08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c0a:	4b28      	ldr	r3, [pc, #160]	@ (8006cac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c10:	4a24      	ldr	r2, [pc, #144]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c16:	4b23      	ldr	r3, [pc, #140]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d114      	bne.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c22:	f7fa fcf1 	bl	8001608 <HAL_GetTick>
 8006c26:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c28:	e00a      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c2a:	f7fa fced 	bl	8001608 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e02a      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c40:	4b18      	ldr	r3, [pc, #96]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0ee      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c58:	d10d      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006c5a:	4b12      	ldr	r3, [pc, #72]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006c6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c6e:	490d      	ldr	r1, [pc, #52]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	608b      	str	r3, [r1, #8]
 8006c74:	e005      	b.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006c76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c7c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006c80:	6093      	str	r3, [r2, #8]
 8006c82:	4b08      	ldr	r3, [pc, #32]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c8e:	4905      	ldr	r1, [pc, #20]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	42470068 	.word	0x42470068
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	40007000 	.word	0x40007000
 8006cac:	42470e40 	.word	0x42470e40

08006cb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d13f      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006cce:	4b24      	ldr	r3, [pc, #144]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d006      	beq.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ce4:	d12f      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006ce8:	617b      	str	r3, [r7, #20]
          break;
 8006cea:	e02f      	b.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006cec:	4b1c      	ldr	r3, [pc, #112]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cf8:	d108      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006cfa:	4b19      	ldr	r3, [pc, #100]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d02:	4a19      	ldr	r2, [pc, #100]	@ (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d08:	613b      	str	r3, [r7, #16]
 8006d0a:	e007      	b.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d0c:	4b14      	ldr	r3, [pc, #80]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d14:	4a15      	ldr	r2, [pc, #84]	@ (8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006d1c:	4b10      	ldr	r3, [pc, #64]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d22:	099b      	lsrs	r3, r3, #6
 8006d24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	fb02 f303 	mul.w	r3, r2, r3
 8006d2e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006d30:	4b0b      	ldr	r3, [pc, #44]	@ (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d36:	0f1b      	lsrs	r3, r3, #28
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d42:	617b      	str	r3, [r7, #20]
          break;
 8006d44:	e002      	b.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]
          break;
 8006d4a:	bf00      	nop
        }
      }
      break;
 8006d4c:	e000      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006d4e:	bf00      	nop
    }
  }
  return frequency;
 8006d50:	697b      	ldr	r3, [r7, #20]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40023800 	.word	0x40023800
 8006d64:	00bb8000 	.word	0x00bb8000
 8006d68:	007a1200 	.word	0x007a1200
 8006d6c:	00f42400 	.word	0x00f42400

08006d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e07b      	b.n	8006e7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d108      	bne.n	8006d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d92:	d009      	beq.n	8006da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	61da      	str	r2, [r3, #28]
 8006d9a:	e005      	b.n	8006da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7fa f96c 	bl	80010a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006df0:	431a      	orrs	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e2c:	ea42 0103 	orr.w	r1, r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	0c1b      	lsrs	r3, r3, #16
 8006e46:	f003 0104 	and.w	r1, r3, #4
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4e:	f003 0210 	and.w	r2, r3, #16
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69da      	ldr	r2, [r3, #28]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e041      	b.n	8006f18 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d106      	bne.n	8006eae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7fa fa55 	bl	8001358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	f000 f95d 	bl	8007180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d001      	beq.n	8006f38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e046      	b.n	8006fc6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a23      	ldr	r2, [pc, #140]	@ (8006fd4 <HAL_TIM_Base_Start+0xb4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d022      	beq.n	8006f90 <HAL_TIM_Base_Start+0x70>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f52:	d01d      	beq.n	8006f90 <HAL_TIM_Base_Start+0x70>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a1f      	ldr	r2, [pc, #124]	@ (8006fd8 <HAL_TIM_Base_Start+0xb8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d018      	beq.n	8006f90 <HAL_TIM_Base_Start+0x70>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a1e      	ldr	r2, [pc, #120]	@ (8006fdc <HAL_TIM_Base_Start+0xbc>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d013      	beq.n	8006f90 <HAL_TIM_Base_Start+0x70>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8006fe0 <HAL_TIM_Base_Start+0xc0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d00e      	beq.n	8006f90 <HAL_TIM_Base_Start+0x70>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1b      	ldr	r2, [pc, #108]	@ (8006fe4 <HAL_TIM_Base_Start+0xc4>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d009      	beq.n	8006f90 <HAL_TIM_Base_Start+0x70>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a19      	ldr	r2, [pc, #100]	@ (8006fe8 <HAL_TIM_Base_Start+0xc8>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d004      	beq.n	8006f90 <HAL_TIM_Base_Start+0x70>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a18      	ldr	r2, [pc, #96]	@ (8006fec <HAL_TIM_Base_Start+0xcc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d111      	bne.n	8006fb4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b06      	cmp	r3, #6
 8006fa0:	d010      	beq.n	8006fc4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f042 0201 	orr.w	r2, r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb2:	e007      	b.n	8006fc4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	40010000 	.word	0x40010000
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40000800 	.word	0x40000800
 8006fe0:	40000c00 	.word	0x40000c00
 8006fe4:	40010400 	.word	0x40010400
 8006fe8:	40014000 	.word	0x40014000
 8006fec:	40001800 	.word	0x40001800

08006ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007004:	2b01      	cmp	r3, #1
 8007006:	d101      	bne.n	800700c <HAL_TIM_ConfigClockSource+0x1c>
 8007008:	2302      	movs	r3, #2
 800700a:	e0b4      	b.n	8007176 <HAL_TIM_ConfigClockSource+0x186>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800702a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007044:	d03e      	beq.n	80070c4 <HAL_TIM_ConfigClockSource+0xd4>
 8007046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800704a:	f200 8087 	bhi.w	800715c <HAL_TIM_ConfigClockSource+0x16c>
 800704e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007052:	f000 8086 	beq.w	8007162 <HAL_TIM_ConfigClockSource+0x172>
 8007056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800705a:	d87f      	bhi.n	800715c <HAL_TIM_ConfigClockSource+0x16c>
 800705c:	2b70      	cmp	r3, #112	@ 0x70
 800705e:	d01a      	beq.n	8007096 <HAL_TIM_ConfigClockSource+0xa6>
 8007060:	2b70      	cmp	r3, #112	@ 0x70
 8007062:	d87b      	bhi.n	800715c <HAL_TIM_ConfigClockSource+0x16c>
 8007064:	2b60      	cmp	r3, #96	@ 0x60
 8007066:	d050      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x11a>
 8007068:	2b60      	cmp	r3, #96	@ 0x60
 800706a:	d877      	bhi.n	800715c <HAL_TIM_ConfigClockSource+0x16c>
 800706c:	2b50      	cmp	r3, #80	@ 0x50
 800706e:	d03c      	beq.n	80070ea <HAL_TIM_ConfigClockSource+0xfa>
 8007070:	2b50      	cmp	r3, #80	@ 0x50
 8007072:	d873      	bhi.n	800715c <HAL_TIM_ConfigClockSource+0x16c>
 8007074:	2b40      	cmp	r3, #64	@ 0x40
 8007076:	d058      	beq.n	800712a <HAL_TIM_ConfigClockSource+0x13a>
 8007078:	2b40      	cmp	r3, #64	@ 0x40
 800707a:	d86f      	bhi.n	800715c <HAL_TIM_ConfigClockSource+0x16c>
 800707c:	2b30      	cmp	r3, #48	@ 0x30
 800707e:	d064      	beq.n	800714a <HAL_TIM_ConfigClockSource+0x15a>
 8007080:	2b30      	cmp	r3, #48	@ 0x30
 8007082:	d86b      	bhi.n	800715c <HAL_TIM_ConfigClockSource+0x16c>
 8007084:	2b20      	cmp	r3, #32
 8007086:	d060      	beq.n	800714a <HAL_TIM_ConfigClockSource+0x15a>
 8007088:	2b20      	cmp	r3, #32
 800708a:	d867      	bhi.n	800715c <HAL_TIM_ConfigClockSource+0x16c>
 800708c:	2b00      	cmp	r3, #0
 800708e:	d05c      	beq.n	800714a <HAL_TIM_ConfigClockSource+0x15a>
 8007090:	2b10      	cmp	r3, #16
 8007092:	d05a      	beq.n	800714a <HAL_TIM_ConfigClockSource+0x15a>
 8007094:	e062      	b.n	800715c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070a6:	f000 f991 	bl	80073cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80070b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	609a      	str	r2, [r3, #8]
      break;
 80070c2:	e04f      	b.n	8007164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070d4:	f000 f97a 	bl	80073cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070e6:	609a      	str	r2, [r3, #8]
      break;
 80070e8:	e03c      	b.n	8007164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070f6:	461a      	mov	r2, r3
 80070f8:	f000 f8ee 	bl	80072d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2150      	movs	r1, #80	@ 0x50
 8007102:	4618      	mov	r0, r3
 8007104:	f000 f947 	bl	8007396 <TIM_ITRx_SetConfig>
      break;
 8007108:	e02c      	b.n	8007164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007116:	461a      	mov	r2, r3
 8007118:	f000 f90d 	bl	8007336 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2160      	movs	r1, #96	@ 0x60
 8007122:	4618      	mov	r0, r3
 8007124:	f000 f937 	bl	8007396 <TIM_ITRx_SetConfig>
      break;
 8007128:	e01c      	b.n	8007164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007136:	461a      	mov	r2, r3
 8007138:	f000 f8ce 	bl	80072d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2140      	movs	r1, #64	@ 0x40
 8007142:	4618      	mov	r0, r3
 8007144:	f000 f927 	bl	8007396 <TIM_ITRx_SetConfig>
      break;
 8007148:	e00c      	b.n	8007164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4619      	mov	r1, r3
 8007154:	4610      	mov	r0, r2
 8007156:	f000 f91e 	bl	8007396 <TIM_ITRx_SetConfig>
      break;
 800715a:	e003      	b.n	8007164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	73fb      	strb	r3, [r7, #15]
      break;
 8007160:	e000      	b.n	8007164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007174:	7bfb      	ldrb	r3, [r7, #15]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a46      	ldr	r2, [pc, #280]	@ (80072ac <TIM_Base_SetConfig+0x12c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d013      	beq.n	80071c0 <TIM_Base_SetConfig+0x40>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800719e:	d00f      	beq.n	80071c0 <TIM_Base_SetConfig+0x40>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a43      	ldr	r2, [pc, #268]	@ (80072b0 <TIM_Base_SetConfig+0x130>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00b      	beq.n	80071c0 <TIM_Base_SetConfig+0x40>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a42      	ldr	r2, [pc, #264]	@ (80072b4 <TIM_Base_SetConfig+0x134>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d007      	beq.n	80071c0 <TIM_Base_SetConfig+0x40>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a41      	ldr	r2, [pc, #260]	@ (80072b8 <TIM_Base_SetConfig+0x138>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <TIM_Base_SetConfig+0x40>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a40      	ldr	r2, [pc, #256]	@ (80072bc <TIM_Base_SetConfig+0x13c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d108      	bne.n	80071d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a35      	ldr	r2, [pc, #212]	@ (80072ac <TIM_Base_SetConfig+0x12c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d02b      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071e0:	d027      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a32      	ldr	r2, [pc, #200]	@ (80072b0 <TIM_Base_SetConfig+0x130>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d023      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a31      	ldr	r2, [pc, #196]	@ (80072b4 <TIM_Base_SetConfig+0x134>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d01f      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a30      	ldr	r2, [pc, #192]	@ (80072b8 <TIM_Base_SetConfig+0x138>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d01b      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a2f      	ldr	r2, [pc, #188]	@ (80072bc <TIM_Base_SetConfig+0x13c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d017      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a2e      	ldr	r2, [pc, #184]	@ (80072c0 <TIM_Base_SetConfig+0x140>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d013      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a2d      	ldr	r2, [pc, #180]	@ (80072c4 <TIM_Base_SetConfig+0x144>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00f      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a2c      	ldr	r2, [pc, #176]	@ (80072c8 <TIM_Base_SetConfig+0x148>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d00b      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a2b      	ldr	r2, [pc, #172]	@ (80072cc <TIM_Base_SetConfig+0x14c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d007      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a2a      	ldr	r2, [pc, #168]	@ (80072d0 <TIM_Base_SetConfig+0x150>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d003      	beq.n	8007232 <TIM_Base_SetConfig+0xb2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a29      	ldr	r2, [pc, #164]	@ (80072d4 <TIM_Base_SetConfig+0x154>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d108      	bne.n	8007244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4313      	orrs	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	4313      	orrs	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a10      	ldr	r2, [pc, #64]	@ (80072ac <TIM_Base_SetConfig+0x12c>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d003      	beq.n	8007278 <TIM_Base_SetConfig+0xf8>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a12      	ldr	r2, [pc, #72]	@ (80072bc <TIM_Base_SetConfig+0x13c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d103      	bne.n	8007280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	691a      	ldr	r2, [r3, #16]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b01      	cmp	r3, #1
 8007290:	d105      	bne.n	800729e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f023 0201 	bic.w	r2, r3, #1
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	611a      	str	r2, [r3, #16]
  }
}
 800729e:	bf00      	nop
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40000400 	.word	0x40000400
 80072b4:	40000800 	.word	0x40000800
 80072b8:	40000c00 	.word	0x40000c00
 80072bc:	40010400 	.word	0x40010400
 80072c0:	40014000 	.word	0x40014000
 80072c4:	40014400 	.word	0x40014400
 80072c8:	40014800 	.word	0x40014800
 80072cc:	40001800 	.word	0x40001800
 80072d0:	40001c00 	.word	0x40001c00
 80072d4:	40002000 	.word	0x40002000

080072d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	f023 0201 	bic.w	r2, r3, #1
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f023 030a 	bic.w	r3, r3, #10
 8007314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4313      	orrs	r3, r2
 800731c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	621a      	str	r2, [r3, #32]
}
 800732a:	bf00      	nop
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007336:	b480      	push	{r7}
 8007338:	b087      	sub	sp, #28
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	f023 0210 	bic.w	r2, r3, #16
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007360:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	031b      	lsls	r3, r3, #12
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007372:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007396:	b480      	push	{r7}
 8007398:	b085      	sub	sp, #20
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	f043 0307 	orr.w	r3, r3, #7
 80073b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	609a      	str	r2, [r3, #8]
}
 80073c0:	bf00      	nop
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	021a      	lsls	r2, r3, #8
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	609a      	str	r2, [r3, #8]
}
 8007400:	bf00      	nop
 8007402:	371c      	adds	r7, #28
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800741c:	2b01      	cmp	r3, #1
 800741e:	d101      	bne.n	8007424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007420:	2302      	movs	r3, #2
 8007422:	e05a      	b.n	80074da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a21      	ldr	r2, [pc, #132]	@ (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d022      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007470:	d01d      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a1d      	ldr	r2, [pc, #116]	@ (80074ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d018      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a1b      	ldr	r2, [pc, #108]	@ (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d013      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a1a      	ldr	r2, [pc, #104]	@ (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00e      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a18      	ldr	r2, [pc, #96]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d009      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a17      	ldr	r2, [pc, #92]	@ (80074fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a15      	ldr	r2, [pc, #84]	@ (8007500 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d10c      	bne.n	80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40010000 	.word	0x40010000
 80074ec:	40000400 	.word	0x40000400
 80074f0:	40000800 	.word	0x40000800
 80074f4:	40000c00 	.word	0x40000c00
 80074f8:	40010400 	.word	0x40010400
 80074fc:	40014000 	.word	0x40014000
 8007500:	40001800 	.word	0x40001800

08007504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e042      	b.n	800759c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d106      	bne.n	8007530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7f9 ff5e 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2224      	movs	r2, #36	@ 0x24
 8007534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f9e9 	bl	8007920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800755c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	695a      	ldr	r2, [r3, #20]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800756c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800757c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08c      	sub	sp, #48	@ 0x30
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	4613      	mov	r3, r2
 80075b0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	d156      	bne.n	800766c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <HAL_UART_Transmit_DMA+0x26>
 80075c4:	88fb      	ldrh	r3, [r7, #6]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e04f      	b.n	800766e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	88fa      	ldrh	r2, [r7, #6]
 80075d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	88fa      	ldrh	r2, [r7, #6]
 80075de:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2221      	movs	r2, #33	@ 0x21
 80075ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f2:	4a21      	ldr	r2, [pc, #132]	@ (8007678 <HAL_UART_Transmit_DMA+0xd4>)
 80075f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fa:	4a20      	ldr	r2, [pc, #128]	@ (800767c <HAL_UART_Transmit_DMA+0xd8>)
 80075fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007602:	4a1f      	ldr	r2, [pc, #124]	@ (8007680 <HAL_UART_Transmit_DMA+0xdc>)
 8007604:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760a:	2200      	movs	r2, #0
 800760c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800760e:	f107 0308 	add.w	r3, r7, #8
 8007612:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800761a:	6819      	ldr	r1, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3304      	adds	r3, #4
 8007622:	461a      	mov	r2, r3
 8007624:	88fb      	ldrh	r3, [r7, #6]
 8007626:	f7fa fde7 	bl	80021f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007632:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	3314      	adds	r3, #20
 800763a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	e853 3f00 	ldrex	r3, [r3]
 8007642:	617b      	str	r3, [r7, #20]
   return(result);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800764a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3314      	adds	r3, #20
 8007652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007654:	627a      	str	r2, [r7, #36]	@ 0x24
 8007656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	6a39      	ldr	r1, [r7, #32]
 800765a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800765c:	e841 2300 	strex	r3, r2, [r1]
 8007660:	61fb      	str	r3, [r7, #28]
   return(result);
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1e5      	bne.n	8007634 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	e000      	b.n	800766e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800766c:	2302      	movs	r3, #2
  }
}
 800766e:	4618      	mov	r0, r3
 8007670:	3730      	adds	r7, #48	@ 0x30
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	080076c1 	.word	0x080076c1
 800767c:	0800775b 	.word	0x0800775b
 8007680:	08007777 	.word	0x08007777

08007684 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b090      	sub	sp, #64	@ 0x40
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d137      	bne.n	800774c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80076dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076de:	2200      	movs	r2, #0
 80076e0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3314      	adds	r3, #20
 80076e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	623b      	str	r3, [r7, #32]
   return(result);
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3314      	adds	r3, #20
 8007700:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007702:	633a      	str	r2, [r7, #48]	@ 0x30
 8007704:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800770a:	e841 2300 	strex	r3, r2, [r1]
 800770e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1e5      	bne.n	80076e2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	330c      	adds	r3, #12
 800771c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	60fb      	str	r3, [r7, #12]
   return(result);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800772c:	637b      	str	r3, [r7, #52]	@ 0x34
 800772e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	330c      	adds	r3, #12
 8007734:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007736:	61fa      	str	r2, [r7, #28]
 8007738:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	69b9      	ldr	r1, [r7, #24]
 800773c:	69fa      	ldr	r2, [r7, #28]
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	617b      	str	r3, [r7, #20]
   return(result);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e5      	bne.n	8007716 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800774a:	e002      	b.n	8007752 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800774c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800774e:	f7ff ff99 	bl	8007684 <HAL_UART_TxCpltCallback>
}
 8007752:	bf00      	nop
 8007754:	3740      	adds	r7, #64	@ 0x40
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007766:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff ff95 	bl	8007698 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007786:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007792:	2b80      	cmp	r3, #128	@ 0x80
 8007794:	bf0c      	ite	eq
 8007796:	2301      	moveq	r3, #1
 8007798:	2300      	movne	r3, #0
 800779a:	b2db      	uxtb	r3, r3
 800779c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b21      	cmp	r3, #33	@ 0x21
 80077a8:	d108      	bne.n	80077bc <UART_DMAError+0x46>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d005      	beq.n	80077bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2200      	movs	r2, #0
 80077b4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80077b6:	68b8      	ldr	r0, [r7, #8]
 80077b8:	f000 f827 	bl	800780a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c6:	2b40      	cmp	r3, #64	@ 0x40
 80077c8:	bf0c      	ite	eq
 80077ca:	2301      	moveq	r3, #1
 80077cc:	2300      	movne	r3, #0
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b22      	cmp	r3, #34	@ 0x22
 80077dc:	d108      	bne.n	80077f0 <UART_DMAError+0x7a>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2200      	movs	r2, #0
 80077e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80077ea:	68b8      	ldr	r0, [r7, #8]
 80077ec:	f000 f835 	bl	800785a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f4:	f043 0210 	orr.w	r2, r3, #16
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077fc:	68b8      	ldr	r0, [r7, #8]
 80077fe:	f7ff ff55 	bl	80076ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800780a:	b480      	push	{r7}
 800780c:	b089      	sub	sp, #36	@ 0x24
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	330c      	adds	r3, #12
 8007818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	60bb      	str	r3, [r7, #8]
   return(result);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007828:	61fb      	str	r3, [r7, #28]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	330c      	adds	r3, #12
 8007830:	69fa      	ldr	r2, [r7, #28]
 8007832:	61ba      	str	r2, [r7, #24]
 8007834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6979      	ldr	r1, [r7, #20]
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	613b      	str	r3, [r7, #16]
   return(result);
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e5      	bne.n	8007812 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2220      	movs	r2, #32
 800784a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800784e:	bf00      	nop
 8007850:	3724      	adds	r7, #36	@ 0x24
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800785a:	b480      	push	{r7}
 800785c:	b095      	sub	sp, #84	@ 0x54
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	330c      	adds	r3, #12
 8007868:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786c:	e853 3f00 	ldrex	r3, [r3]
 8007870:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007878:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	330c      	adds	r3, #12
 8007880:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007882:	643a      	str	r2, [r7, #64]	@ 0x40
 8007884:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007886:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007888:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800788a:	e841 2300 	strex	r3, r2, [r1]
 800788e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1e5      	bne.n	8007862 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3314      	adds	r3, #20
 800789c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	f023 0301 	bic.w	r3, r3, #1
 80078ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3314      	adds	r3, #20
 80078b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1e5      	bne.n	8007896 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d119      	bne.n	8007906 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	330c      	adds	r3, #12
 80078d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	e853 3f00 	ldrex	r3, [r3]
 80078e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	f023 0310 	bic.w	r3, r3, #16
 80078e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	330c      	adds	r3, #12
 80078f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078f2:	61ba      	str	r2, [r7, #24]
 80078f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	6979      	ldr	r1, [r7, #20]
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	e841 2300 	strex	r3, r2, [r1]
 80078fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1e5      	bne.n	80078d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007914:	bf00      	nop
 8007916:	3754      	adds	r7, #84	@ 0x54
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007924:	b0c0      	sub	sp, #256	@ 0x100
 8007926:	af00      	add	r7, sp, #0
 8007928:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800792c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800793c:	68d9      	ldr	r1, [r3, #12]
 800793e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	ea40 0301 	orr.w	r3, r0, r1
 8007948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800794a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	431a      	orrs	r2, r3
 8007958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	431a      	orrs	r2, r3
 8007960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	4313      	orrs	r3, r2
 8007968:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800796c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007978:	f021 010c 	bic.w	r1, r1, #12
 800797c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007986:	430b      	orrs	r3, r1
 8007988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800798a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799a:	6999      	ldr	r1, [r3, #24]
 800799c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	ea40 0301 	orr.w	r3, r0, r1
 80079a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	4b8f      	ldr	r3, [pc, #572]	@ (8007bec <UART_SetConfig+0x2cc>)
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d005      	beq.n	80079c0 <UART_SetConfig+0xa0>
 80079b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	4b8d      	ldr	r3, [pc, #564]	@ (8007bf0 <UART_SetConfig+0x2d0>)
 80079bc:	429a      	cmp	r2, r3
 80079be:	d104      	bne.n	80079ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079c0:	f7ff f880 	bl	8006ac4 <HAL_RCC_GetPCLK2Freq>
 80079c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80079c8:	e003      	b.n	80079d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079ca:	f7ff f867 	bl	8006a9c <HAL_RCC_GetPCLK1Freq>
 80079ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079dc:	f040 810c 	bne.w	8007bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80079ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80079f2:	4622      	mov	r2, r4
 80079f4:	462b      	mov	r3, r5
 80079f6:	1891      	adds	r1, r2, r2
 80079f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80079fa:	415b      	adcs	r3, r3
 80079fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a02:	4621      	mov	r1, r4
 8007a04:	eb12 0801 	adds.w	r8, r2, r1
 8007a08:	4629      	mov	r1, r5
 8007a0a:	eb43 0901 	adc.w	r9, r3, r1
 8007a0e:	f04f 0200 	mov.w	r2, #0
 8007a12:	f04f 0300 	mov.w	r3, #0
 8007a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a22:	4690      	mov	r8, r2
 8007a24:	4699      	mov	r9, r3
 8007a26:	4623      	mov	r3, r4
 8007a28:	eb18 0303 	adds.w	r3, r8, r3
 8007a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a30:	462b      	mov	r3, r5
 8007a32:	eb49 0303 	adc.w	r3, r9, r3
 8007a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a4e:	460b      	mov	r3, r1
 8007a50:	18db      	adds	r3, r3, r3
 8007a52:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a54:	4613      	mov	r3, r2
 8007a56:	eb42 0303 	adc.w	r3, r2, r3
 8007a5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007a64:	f7f8 fbb0 	bl	80001c8 <__aeabi_uldivmod>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4b61      	ldr	r3, [pc, #388]	@ (8007bf4 <UART_SetConfig+0x2d4>)
 8007a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a72:	095b      	lsrs	r3, r3, #5
 8007a74:	011c      	lsls	r4, r3, #4
 8007a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007a88:	4642      	mov	r2, r8
 8007a8a:	464b      	mov	r3, r9
 8007a8c:	1891      	adds	r1, r2, r2
 8007a8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a90:	415b      	adcs	r3, r3
 8007a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a98:	4641      	mov	r1, r8
 8007a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8007a9e:	4649      	mov	r1, r9
 8007aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8007aa4:	f04f 0200 	mov.w	r2, #0
 8007aa8:	f04f 0300 	mov.w	r3, #0
 8007aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ab8:	4692      	mov	sl, r2
 8007aba:	469b      	mov	fp, r3
 8007abc:	4643      	mov	r3, r8
 8007abe:	eb1a 0303 	adds.w	r3, sl, r3
 8007ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8007acc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007adc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	18db      	adds	r3, r3, r3
 8007ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007aea:	4613      	mov	r3, r2
 8007aec:	eb42 0303 	adc.w	r3, r2, r3
 8007af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007afa:	f7f8 fb65 	bl	80001c8 <__aeabi_uldivmod>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	4611      	mov	r1, r2
 8007b04:	4b3b      	ldr	r3, [pc, #236]	@ (8007bf4 <UART_SetConfig+0x2d4>)
 8007b06:	fba3 2301 	umull	r2, r3, r3, r1
 8007b0a:	095b      	lsrs	r3, r3, #5
 8007b0c:	2264      	movs	r2, #100	@ 0x64
 8007b0e:	fb02 f303 	mul.w	r3, r2, r3
 8007b12:	1acb      	subs	r3, r1, r3
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007b1a:	4b36      	ldr	r3, [pc, #216]	@ (8007bf4 <UART_SetConfig+0x2d4>)
 8007b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8007b20:	095b      	lsrs	r3, r3, #5
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b28:	441c      	add	r4, r3
 8007b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b3c:	4642      	mov	r2, r8
 8007b3e:	464b      	mov	r3, r9
 8007b40:	1891      	adds	r1, r2, r2
 8007b42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007b44:	415b      	adcs	r3, r3
 8007b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007b4c:	4641      	mov	r1, r8
 8007b4e:	1851      	adds	r1, r2, r1
 8007b50:	6339      	str	r1, [r7, #48]	@ 0x30
 8007b52:	4649      	mov	r1, r9
 8007b54:	414b      	adcs	r3, r1
 8007b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b58:	f04f 0200 	mov.w	r2, #0
 8007b5c:	f04f 0300 	mov.w	r3, #0
 8007b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007b64:	4659      	mov	r1, fp
 8007b66:	00cb      	lsls	r3, r1, #3
 8007b68:	4651      	mov	r1, sl
 8007b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b6e:	4651      	mov	r1, sl
 8007b70:	00ca      	lsls	r2, r1, #3
 8007b72:	4610      	mov	r0, r2
 8007b74:	4619      	mov	r1, r3
 8007b76:	4603      	mov	r3, r0
 8007b78:	4642      	mov	r2, r8
 8007b7a:	189b      	adds	r3, r3, r2
 8007b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b80:	464b      	mov	r3, r9
 8007b82:	460a      	mov	r2, r1
 8007b84:	eb42 0303 	adc.w	r3, r2, r3
 8007b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	18db      	adds	r3, r3, r3
 8007ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	eb42 0303 	adc.w	r3, r2, r3
 8007bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007bb6:	f7f8 fb07 	bl	80001c8 <__aeabi_uldivmod>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf4 <UART_SetConfig+0x2d4>)
 8007bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8007bc4:	095b      	lsrs	r3, r3, #5
 8007bc6:	2164      	movs	r1, #100	@ 0x64
 8007bc8:	fb01 f303 	mul.w	r3, r1, r3
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	3332      	adds	r3, #50	@ 0x32
 8007bd2:	4a08      	ldr	r2, [pc, #32]	@ (8007bf4 <UART_SetConfig+0x2d4>)
 8007bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd8:	095b      	lsrs	r3, r3, #5
 8007bda:	f003 0207 	and.w	r2, r3, #7
 8007bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4422      	add	r2, r4
 8007be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007be8:	e106      	b.n	8007df8 <UART_SetConfig+0x4d8>
 8007bea:	bf00      	nop
 8007bec:	40011000 	.word	0x40011000
 8007bf0:	40011400 	.word	0x40011400
 8007bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007c0a:	4642      	mov	r2, r8
 8007c0c:	464b      	mov	r3, r9
 8007c0e:	1891      	adds	r1, r2, r2
 8007c10:	6239      	str	r1, [r7, #32]
 8007c12:	415b      	adcs	r3, r3
 8007c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c1a:	4641      	mov	r1, r8
 8007c1c:	1854      	adds	r4, r2, r1
 8007c1e:	4649      	mov	r1, r9
 8007c20:	eb43 0501 	adc.w	r5, r3, r1
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	f04f 0300 	mov.w	r3, #0
 8007c2c:	00eb      	lsls	r3, r5, #3
 8007c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c32:	00e2      	lsls	r2, r4, #3
 8007c34:	4614      	mov	r4, r2
 8007c36:	461d      	mov	r5, r3
 8007c38:	4643      	mov	r3, r8
 8007c3a:	18e3      	adds	r3, r4, r3
 8007c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c40:	464b      	mov	r3, r9
 8007c42:	eb45 0303 	adc.w	r3, r5, r3
 8007c46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c5a:	f04f 0200 	mov.w	r2, #0
 8007c5e:	f04f 0300 	mov.w	r3, #0
 8007c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007c66:	4629      	mov	r1, r5
 8007c68:	008b      	lsls	r3, r1, #2
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c70:	4621      	mov	r1, r4
 8007c72:	008a      	lsls	r2, r1, #2
 8007c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c78:	f7f8 faa6 	bl	80001c8 <__aeabi_uldivmod>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4b60      	ldr	r3, [pc, #384]	@ (8007e04 <UART_SetConfig+0x4e4>)
 8007c82:	fba3 2302 	umull	r2, r3, r3, r2
 8007c86:	095b      	lsrs	r3, r3, #5
 8007c88:	011c      	lsls	r4, r3, #4
 8007c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	464b      	mov	r3, r9
 8007ca0:	1891      	adds	r1, r2, r2
 8007ca2:	61b9      	str	r1, [r7, #24]
 8007ca4:	415b      	adcs	r3, r3
 8007ca6:	61fb      	str	r3, [r7, #28]
 8007ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cac:	4641      	mov	r1, r8
 8007cae:	1851      	adds	r1, r2, r1
 8007cb0:	6139      	str	r1, [r7, #16]
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	414b      	adcs	r3, r1
 8007cb6:	617b      	str	r3, [r7, #20]
 8007cb8:	f04f 0200 	mov.w	r2, #0
 8007cbc:	f04f 0300 	mov.w	r3, #0
 8007cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007cc4:	4659      	mov	r1, fp
 8007cc6:	00cb      	lsls	r3, r1, #3
 8007cc8:	4651      	mov	r1, sl
 8007cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cce:	4651      	mov	r1, sl
 8007cd0:	00ca      	lsls	r2, r1, #3
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	4642      	mov	r2, r8
 8007cda:	189b      	adds	r3, r3, r2
 8007cdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ce0:	464b      	mov	r3, r9
 8007ce2:	460a      	mov	r2, r1
 8007ce4:	eb42 0303 	adc.w	r3, r2, r3
 8007ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007d04:	4649      	mov	r1, r9
 8007d06:	008b      	lsls	r3, r1, #2
 8007d08:	4641      	mov	r1, r8
 8007d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d0e:	4641      	mov	r1, r8
 8007d10:	008a      	lsls	r2, r1, #2
 8007d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007d16:	f7f8 fa57 	bl	80001c8 <__aeabi_uldivmod>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4611      	mov	r1, r2
 8007d20:	4b38      	ldr	r3, [pc, #224]	@ (8007e04 <UART_SetConfig+0x4e4>)
 8007d22:	fba3 2301 	umull	r2, r3, r3, r1
 8007d26:	095b      	lsrs	r3, r3, #5
 8007d28:	2264      	movs	r2, #100	@ 0x64
 8007d2a:	fb02 f303 	mul.w	r3, r2, r3
 8007d2e:	1acb      	subs	r3, r1, r3
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	3332      	adds	r3, #50	@ 0x32
 8007d34:	4a33      	ldr	r2, [pc, #204]	@ (8007e04 <UART_SetConfig+0x4e4>)
 8007d36:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3a:	095b      	lsrs	r3, r3, #5
 8007d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d40:	441c      	add	r4, r3
 8007d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d46:	2200      	movs	r2, #0
 8007d48:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007d50:	4642      	mov	r2, r8
 8007d52:	464b      	mov	r3, r9
 8007d54:	1891      	adds	r1, r2, r2
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	415b      	adcs	r3, r3
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d60:	4641      	mov	r1, r8
 8007d62:	1851      	adds	r1, r2, r1
 8007d64:	6039      	str	r1, [r7, #0]
 8007d66:	4649      	mov	r1, r9
 8007d68:	414b      	adcs	r3, r1
 8007d6a:	607b      	str	r3, [r7, #4]
 8007d6c:	f04f 0200 	mov.w	r2, #0
 8007d70:	f04f 0300 	mov.w	r3, #0
 8007d74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d78:	4659      	mov	r1, fp
 8007d7a:	00cb      	lsls	r3, r1, #3
 8007d7c:	4651      	mov	r1, sl
 8007d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d82:	4651      	mov	r1, sl
 8007d84:	00ca      	lsls	r2, r1, #3
 8007d86:	4610      	mov	r0, r2
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4642      	mov	r2, r8
 8007d8e:	189b      	adds	r3, r3, r2
 8007d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d92:	464b      	mov	r3, r9
 8007d94:	460a      	mov	r2, r1
 8007d96:	eb42 0303 	adc.w	r3, r2, r3
 8007d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007da6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007da8:	f04f 0200 	mov.w	r2, #0
 8007dac:	f04f 0300 	mov.w	r3, #0
 8007db0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007db4:	4649      	mov	r1, r9
 8007db6:	008b      	lsls	r3, r1, #2
 8007db8:	4641      	mov	r1, r8
 8007dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dbe:	4641      	mov	r1, r8
 8007dc0:	008a      	lsls	r2, r1, #2
 8007dc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007dc6:	f7f8 f9ff 	bl	80001c8 <__aeabi_uldivmod>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4b0d      	ldr	r3, [pc, #52]	@ (8007e04 <UART_SetConfig+0x4e4>)
 8007dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd4:	095b      	lsrs	r3, r3, #5
 8007dd6:	2164      	movs	r1, #100	@ 0x64
 8007dd8:	fb01 f303 	mul.w	r3, r1, r3
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	3332      	adds	r3, #50	@ 0x32
 8007de2:	4a08      	ldr	r2, [pc, #32]	@ (8007e04 <UART_SetConfig+0x4e4>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	095b      	lsrs	r3, r3, #5
 8007dea:	f003 020f 	and.w	r2, r3, #15
 8007dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4422      	add	r2, r4
 8007df6:	609a      	str	r2, [r3, #8]
}
 8007df8:	bf00      	nop
 8007dfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e04:	51eb851f 	.word	0x51eb851f

08007e08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e08:	b084      	sub	sp, #16
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	f107 001c 	add.w	r0, r7, #28
 8007e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d123      	bne.n	8007e6a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d105      	bne.n	8007e5e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f9dc 	bl	800821c <USB_CoreReset>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]
 8007e68:	e01b      	b.n	8007ea2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f9d0 	bl	800821c <USB_CoreReset>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d106      	bne.n	8007e96 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e94:	e005      	b.n	8007ea2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ea2:	7fbb      	ldrb	r3, [r7, #30]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d10b      	bne.n	8007ec0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f043 0206 	orr.w	r2, r3, #6
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f043 0220 	orr.w	r2, r3, #32
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ecc:	b004      	add	sp, #16
 8007ece:	4770      	bx	lr

08007ed0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	f043 0201 	orr.w	r2, r3, #1
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b083      	sub	sp, #12
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f023 0201 	bic.w	r2, r3, #1
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d115      	bne.n	8007f62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f42:	200a      	movs	r0, #10
 8007f44:	f7f9 fb6c 	bl	8001620 <HAL_Delay>
      ms += 10U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	330a      	adds	r3, #10
 8007f4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f956 	bl	8008200 <USB_GetMode>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d01e      	beq.n	8007f98 <USB_SetCurrentMode+0x84>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f5e:	d9f0      	bls.n	8007f42 <USB_SetCurrentMode+0x2e>
 8007f60:	e01a      	b.n	8007f98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f62:	78fb      	ldrb	r3, [r7, #3]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d115      	bne.n	8007f94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f74:	200a      	movs	r0, #10
 8007f76:	f7f9 fb53 	bl	8001620 <HAL_Delay>
      ms += 10U;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	330a      	adds	r3, #10
 8007f7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f93d 	bl	8008200 <USB_GetMode>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d005      	beq.n	8007f98 <USB_SetCurrentMode+0x84>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f90:	d9f0      	bls.n	8007f74 <USB_SetCurrentMode+0x60>
 8007f92:	e001      	b.n	8007f98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e005      	b.n	8007fa4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2bc8      	cmp	r3, #200	@ 0xc8
 8007f9c:	d101      	bne.n	8007fa2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e000      	b.n	8007fa4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fc6:	d901      	bls.n	8007fcc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e01b      	b.n	8008004 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	daf2      	bge.n	8007fba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	019b      	lsls	r3, r3, #6
 8007fdc:	f043 0220 	orr.w	r2, r3, #32
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ff0:	d901      	bls.n	8007ff6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e006      	b.n	8008004 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b20      	cmp	r3, #32
 8008000:	d0f0      	beq.n	8007fe4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3301      	adds	r3, #1
 8008020:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008028:	d901      	bls.n	800802e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e018      	b.n	8008060 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	2b00      	cmp	r3, #0
 8008034:	daf2      	bge.n	800801c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008036:	2300      	movs	r3, #0
 8008038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2210      	movs	r2, #16
 800803e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3301      	adds	r3, #1
 8008044:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800804c:	d901      	bls.n	8008052 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e006      	b.n	8008060 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f003 0310 	and.w	r3, r3, #16
 800805a:	2b10      	cmp	r3, #16
 800805c:	d0f0      	beq.n	8008040 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800806c:	b480      	push	{r7}
 800806e:	b089      	sub	sp, #36	@ 0x24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	4611      	mov	r1, r2
 8008078:	461a      	mov	r2, r3
 800807a:	460b      	mov	r3, r1
 800807c:	71fb      	strb	r3, [r7, #7]
 800807e:	4613      	mov	r3, r2
 8008080:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800808a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800808e:	2b00      	cmp	r3, #0
 8008090:	d123      	bne.n	80080da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008092:	88bb      	ldrh	r3, [r7, #4]
 8008094:	3303      	adds	r3, #3
 8008096:	089b      	lsrs	r3, r3, #2
 8008098:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800809a:	2300      	movs	r3, #0
 800809c:	61bb      	str	r3, [r7, #24]
 800809e:	e018      	b.n	80080d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	031a      	lsls	r2, r3, #12
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080ac:	461a      	mov	r2, r3
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	3301      	adds	r3, #1
 80080b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	3301      	adds	r3, #1
 80080be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	3301      	adds	r3, #1
 80080c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	3301      	adds	r3, #1
 80080ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	3301      	adds	r3, #1
 80080d0:	61bb      	str	r3, [r7, #24]
 80080d2:	69ba      	ldr	r2, [r7, #24]
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d3e2      	bcc.n	80080a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3724      	adds	r7, #36	@ 0x24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b08b      	sub	sp, #44	@ 0x2c
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	4613      	mov	r3, r2
 80080f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80080fe:	88fb      	ldrh	r3, [r7, #6]
 8008100:	089b      	lsrs	r3, r3, #2
 8008102:	b29b      	uxth	r3, r3
 8008104:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008106:	88fb      	ldrh	r3, [r7, #6]
 8008108:	f003 0303 	and.w	r3, r3, #3
 800810c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800810e:	2300      	movs	r3, #0
 8008110:	623b      	str	r3, [r7, #32]
 8008112:	e014      	b.n	800813e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008122:	3301      	adds	r3, #1
 8008124:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008128:	3301      	adds	r3, #1
 800812a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800812c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812e:	3301      	adds	r3, #1
 8008130:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008134:	3301      	adds	r3, #1
 8008136:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	3301      	adds	r3, #1
 800813c:	623b      	str	r3, [r7, #32]
 800813e:	6a3a      	ldr	r2, [r7, #32]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	429a      	cmp	r2, r3
 8008144:	d3e6      	bcc.n	8008114 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008146:	8bfb      	ldrh	r3, [r7, #30]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d01e      	beq.n	800818a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008156:	461a      	mov	r2, r3
 8008158:	f107 0310 	add.w	r3, r7, #16
 800815c:	6812      	ldr	r2, [r2, #0]
 800815e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	b2db      	uxtb	r3, r3
 8008166:	00db      	lsls	r3, r3, #3
 8008168:	fa22 f303 	lsr.w	r3, r2, r3
 800816c:	b2da      	uxtb	r2, r3
 800816e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008170:	701a      	strb	r2, [r3, #0]
      i++;
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	3301      	adds	r3, #1
 8008176:	623b      	str	r3, [r7, #32]
      pDest++;
 8008178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817a:	3301      	adds	r3, #1
 800817c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800817e:	8bfb      	ldrh	r3, [r7, #30]
 8008180:	3b01      	subs	r3, #1
 8008182:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008184:	8bfb      	ldrh	r3, [r7, #30]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1ea      	bne.n	8008160 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800818a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800818c:	4618      	mov	r0, r3
 800818e:	372c      	adds	r7, #44	@ 0x2c
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	695b      	ldr	r3, [r3, #20]
 80081a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	4013      	ands	r3, r2
 80081ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081b0:	68fb      	ldr	r3, [r7, #12]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80081be:	b480      	push	{r7}
 80081c0:	b085      	sub	sp, #20
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	460b      	mov	r3, r1
 80081c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80081ce:	78fb      	ldrb	r3, [r7, #3]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80081de:	78fb      	ldrb	r3, [r7, #3]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	4013      	ands	r3, r2
 80081f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80081f2:	68bb      	ldr	r3, [r7, #8]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	f003 0301 	and.w	r3, r3, #1
}
 8008210:	4618      	mov	r0, r3
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3301      	adds	r3, #1
 800822c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008234:	d901      	bls.n	800823a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e01b      	b.n	8008272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	daf2      	bge.n	8008228 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	f043 0201 	orr.w	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800825e:	d901      	bls.n	8008264 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e006      	b.n	8008272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b01      	cmp	r3, #1
 800826e:	d0f0      	beq.n	8008252 <USB_CoreReset+0x36>

  return HAL_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
	...

08008280 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008280:	b084      	sub	sp, #16
 8008282:	b580      	push	{r7, lr}
 8008284:	b086      	sub	sp, #24
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800828e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082a0:	461a      	mov	r2, r3
 80082a2:	2300      	movs	r3, #0
 80082a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082b6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d119      	bne.n	800830a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80082d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d10a      	bne.n	80082f4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80082ec:	f043 0304 	orr.w	r3, r3, #4
 80082f0:	6013      	str	r3, [r2, #0]
 80082f2:	e014      	b.n	800831e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008302:	f023 0304 	bic.w	r3, r3, #4
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	e009      	b.n	800831e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008318:	f023 0304 	bic.w	r3, r3, #4
 800831c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800831e:	2110      	movs	r1, #16
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff fe43 	bl	8007fac <USB_FlushTxFifo>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7ff fe6d 	bl	8008010 <USB_FlushRxFifo>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d001      	beq.n	8008340 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008340:	2300      	movs	r3, #0
 8008342:	613b      	str	r3, [r7, #16]
 8008344:	e015      	b.n	8008372 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	4413      	add	r3, r2
 800834e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008352:	461a      	mov	r2, r3
 8008354:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008358:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	015a      	lsls	r2, r3, #5
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	4413      	add	r3, r2
 8008362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008366:	461a      	mov	r2, r3
 8008368:	2300      	movs	r3, #0
 800836a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	3301      	adds	r3, #1
 8008370:	613b      	str	r3, [r7, #16]
 8008372:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008376:	461a      	mov	r2, r3
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	4293      	cmp	r3, r2
 800837c:	d3e3      	bcc.n	8008346 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800838a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a18      	ldr	r2, [pc, #96]	@ (80083f0 <USB_HostInit+0x170>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d10b      	bne.n	80083ac <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800839a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a15      	ldr	r2, [pc, #84]	@ (80083f4 <USB_HostInit+0x174>)
 80083a0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a14      	ldr	r2, [pc, #80]	@ (80083f8 <USB_HostInit+0x178>)
 80083a6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80083aa:	e009      	b.n	80083c0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2280      	movs	r2, #128	@ 0x80
 80083b0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a11      	ldr	r2, [pc, #68]	@ (80083fc <USB_HostInit+0x17c>)
 80083b6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a11      	ldr	r2, [pc, #68]	@ (8008400 <USB_HostInit+0x180>)
 80083bc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80083c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d105      	bne.n	80083d4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	f043 0210 	orr.w	r2, r3, #16
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	699a      	ldr	r2, [r3, #24]
 80083d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008404 <USB_HostInit+0x184>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083ec:	b004      	add	sp, #16
 80083ee:	4770      	bx	lr
 80083f0:	40040000 	.word	0x40040000
 80083f4:	01000200 	.word	0x01000200
 80083f8:	00e00300 	.word	0x00e00300
 80083fc:	00600080 	.word	0x00600080
 8008400:	004000e0 	.word	0x004000e0
 8008404:	a3200008 	.word	0xa3200008

08008408 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	460b      	mov	r3, r1
 8008412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008426:	f023 0303 	bic.w	r3, r3, #3
 800842a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	78fb      	ldrb	r3, [r7, #3]
 8008436:	f003 0303 	and.w	r3, r3, #3
 800843a:	68f9      	ldr	r1, [r7, #12]
 800843c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008440:	4313      	orrs	r3, r2
 8008442:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008444:	78fb      	ldrb	r3, [r7, #3]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d107      	bne.n	800845a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008450:	461a      	mov	r2, r3
 8008452:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008456:	6053      	str	r3, [r2, #4]
 8008458:	e00c      	b.n	8008474 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800845a:	78fb      	ldrb	r3, [r7, #3]
 800845c:	2b02      	cmp	r3, #2
 800845e:	d107      	bne.n	8008470 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008466:	461a      	mov	r2, r3
 8008468:	f241 7370 	movw	r3, #6000	@ 0x1770
 800846c:	6053      	str	r3, [r2, #4]
 800846e:	e001      	b.n	8008474 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e000      	b.n	8008476 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80084a2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80084ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084b0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80084b2:	2064      	movs	r0, #100	@ 0x64
 80084b4:	f7f9 f8b4 	bl	8001620 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80084c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084c4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80084c6:	200a      	movs	r0, #10
 80084c8:	f7f9 f8aa 	bl	8001620 <HAL_Delay>

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80084fa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d109      	bne.n	800851a <USB_DriveVbus+0x44>
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d106      	bne.n	800851a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008514:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008518:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008524:	d109      	bne.n	800853a <USB_DriveVbus+0x64>
 8008526:	78fb      	ldrb	r3, [r7, #3]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d106      	bne.n	800853a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008534:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008538:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3714      	adds	r7, #20
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008554:	2300      	movs	r3, #0
 8008556:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	0c5b      	lsrs	r3, r3, #17
 8008566:	f003 0303 	and.w	r3, r3, #3
}
 800856a:	4618      	mov	r0, r3
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	b29b      	uxth	r3, r3
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b088      	sub	sp, #32
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	4608      	mov	r0, r1
 80085a2:	4611      	mov	r1, r2
 80085a4:	461a      	mov	r2, r3
 80085a6:	4603      	mov	r3, r0
 80085a8:	70fb      	strb	r3, [r7, #3]
 80085aa:	460b      	mov	r3, r1
 80085ac:	70bb      	strb	r3, [r7, #2]
 80085ae:	4613      	mov	r3, r2
 80085b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80085ba:	78fb      	ldrb	r3, [r7, #3]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085c6:	461a      	mov	r2, r3
 80085c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085cc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80085ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d87c      	bhi.n	80086d0 <USB_HC_Init+0x138>
 80085d6:	a201      	add	r2, pc, #4	@ (adr r2, 80085dc <USB_HC_Init+0x44>)
 80085d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085dc:	080085ed 	.word	0x080085ed
 80085e0:	08008693 	.word	0x08008693
 80085e4:	080085ed 	.word	0x080085ed
 80085e8:	08008655 	.word	0x08008655
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085f8:	461a      	mov	r2, r3
 80085fa:	f240 439d 	movw	r3, #1181	@ 0x49d
 80085fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008600:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008604:	2b00      	cmp	r3, #0
 8008606:	da10      	bge.n	800862a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	4413      	add	r3, r2
 8008610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	78fa      	ldrb	r2, [r7, #3]
 8008618:	0151      	lsls	r1, r2, #5
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	440a      	add	r2, r1
 800861e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008626:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008628:	e055      	b.n	80086d6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a6f      	ldr	r2, [pc, #444]	@ (80087ec <USB_HC_Init+0x254>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d151      	bne.n	80086d6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008632:	78fb      	ldrb	r3, [r7, #3]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	4413      	add	r3, r2
 800863a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	78fa      	ldrb	r2, [r7, #3]
 8008642:	0151      	lsls	r1, r2, #5
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	440a      	add	r2, r1
 8008648:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800864c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008650:	60d3      	str	r3, [r2, #12]
      break;
 8008652:	e040      	b.n	80086d6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	4413      	add	r3, r2
 800865c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008660:	461a      	mov	r2, r3
 8008662:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008666:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008668:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800866c:	2b00      	cmp	r3, #0
 800866e:	da34      	bge.n	80086da <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008670:	78fb      	ldrb	r3, [r7, #3]
 8008672:	015a      	lsls	r2, r3, #5
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	4413      	add	r3, r2
 8008678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	78fa      	ldrb	r2, [r7, #3]
 8008680:	0151      	lsls	r1, r2, #5
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	440a      	add	r2, r1
 8008686:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800868a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800868e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008690:	e023      	b.n	80086da <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008692:	78fb      	ldrb	r3, [r7, #3]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	4413      	add	r3, r2
 800869a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800869e:	461a      	mov	r2, r3
 80086a0:	f240 2325 	movw	r3, #549	@ 0x225
 80086a4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80086a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	da17      	bge.n	80086de <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	78fa      	ldrb	r2, [r7, #3]
 80086be:	0151      	lsls	r1, r2, #5
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	440a      	add	r2, r1
 80086c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086c8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80086cc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80086ce:	e006      	b.n	80086de <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	77fb      	strb	r3, [r7, #31]
      break;
 80086d4:	e004      	b.n	80086e0 <USB_HC_Init+0x148>
      break;
 80086d6:	bf00      	nop
 80086d8:	e002      	b.n	80086e0 <USB_HC_Init+0x148>
      break;
 80086da:	bf00      	nop
 80086dc:	e000      	b.n	80086e0 <USB_HC_Init+0x148>
      break;
 80086de:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80086e0:	78fb      	ldrb	r3, [r7, #3]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086ec:	461a      	mov	r2, r3
 80086ee:	2300      	movs	r3, #0
 80086f0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80086f2:	78fb      	ldrb	r3, [r7, #3]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	78fa      	ldrb	r2, [r7, #3]
 8008702:	0151      	lsls	r1, r2, #5
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	440a      	add	r2, r1
 8008708:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800870c:	f043 0302 	orr.w	r3, r3, #2
 8008710:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008718:	699a      	ldr	r2, [r3, #24]
 800871a:	78fb      	ldrb	r3, [r7, #3]
 800871c:	f003 030f 	and.w	r3, r3, #15
 8008720:	2101      	movs	r1, #1
 8008722:	fa01 f303 	lsl.w	r3, r1, r3
 8008726:	6939      	ldr	r1, [r7, #16]
 8008728:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800872c:	4313      	orrs	r3, r2
 800872e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800873c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008740:	2b00      	cmp	r3, #0
 8008742:	da03      	bge.n	800874c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008744:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008748:	61bb      	str	r3, [r7, #24]
 800874a:	e001      	b.n	8008750 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7ff fef9 	bl	8008548 <USB_GetHostSpeed>
 8008756:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008758:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800875c:	2b02      	cmp	r3, #2
 800875e:	d106      	bne.n	800876e <USB_HC_Init+0x1d6>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b02      	cmp	r3, #2
 8008764:	d003      	beq.n	800876e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008766:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800876a:	617b      	str	r3, [r7, #20]
 800876c:	e001      	b.n	8008772 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008772:	787b      	ldrb	r3, [r7, #1]
 8008774:	059b      	lsls	r3, r3, #22
 8008776:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800877a:	78bb      	ldrb	r3, [r7, #2]
 800877c:	02db      	lsls	r3, r3, #11
 800877e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008782:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008784:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008788:	049b      	lsls	r3, r3, #18
 800878a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800878e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008790:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008792:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008796:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	431a      	orrs	r2, r3
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087a0:	78fa      	ldrb	r2, [r7, #3]
 80087a2:	0151      	lsls	r1, r2, #5
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	440a      	add	r2, r1
 80087a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80087ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087b0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80087b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d003      	beq.n	80087c2 <USB_HC_Init+0x22a>
 80087ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d10f      	bne.n	80087e2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80087c2:	78fb      	ldrb	r3, [r7, #3]
 80087c4:	015a      	lsls	r2, r3, #5
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	4413      	add	r3, r2
 80087ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	78fa      	ldrb	r2, [r7, #3]
 80087d2:	0151      	lsls	r1, r2, #5
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	440a      	add	r2, r1
 80087d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80087e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80087e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3720      	adds	r7, #32
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	40040000 	.word	0x40040000

080087f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08c      	sub	sp, #48	@ 0x30
 80087f4:	af02      	add	r7, sp, #8
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	785b      	ldrb	r3, [r3, #1]
 8008806:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008808:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800880c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	4a5d      	ldr	r2, [pc, #372]	@ (8008988 <USB_HC_StartXfer+0x198>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d12f      	bne.n	8008876 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d11c      	bne.n	8008856 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	7c9b      	ldrb	r3, [r3, #18]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d003      	beq.n	800882c <USB_HC_StartXfer+0x3c>
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	7c9b      	ldrb	r3, [r3, #18]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d124      	bne.n	8008876 <USB_HC_StartXfer+0x86>
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	799b      	ldrb	r3, [r3, #6]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d120      	bne.n	8008876 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	015a      	lsls	r2, r3, #5
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	4413      	add	r3, r2
 800883c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	69fa      	ldr	r2, [r7, #28]
 8008844:	0151      	lsls	r1, r2, #5
 8008846:	6a3a      	ldr	r2, [r7, #32]
 8008848:	440a      	add	r2, r1
 800884a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800884e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008852:	60d3      	str	r3, [r2, #12]
 8008854:	e00f      	b.n	8008876 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	791b      	ldrb	r3, [r3, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10b      	bne.n	8008876 <USB_HC_StartXfer+0x86>
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	795b      	ldrb	r3, [r3, #5]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d107      	bne.n	8008876 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	785b      	ldrb	r3, [r3, #1]
 800886a:	4619      	mov	r1, r3
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 fb6b 	bl	8008f48 <USB_DoPing>
        return HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	e232      	b.n	8008cdc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	799b      	ldrb	r3, [r3, #6]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d158      	bne.n	8008930 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800887e:	2301      	movs	r3, #1
 8008880:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	78db      	ldrb	r3, [r3, #3]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d007      	beq.n	800889a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800888a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	8a92      	ldrh	r2, [r2, #20]
 8008890:	fb03 f202 	mul.w	r2, r3, r2
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	61da      	str	r2, [r3, #28]
 8008898:	e07c      	b.n	8008994 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	7c9b      	ldrb	r3, [r3, #18]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d130      	bne.n	8008904 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	2bbc      	cmp	r3, #188	@ 0xbc
 80088a8:	d918      	bls.n	80088dc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	8a9b      	ldrh	r3, [r3, #20]
 80088ae:	461a      	mov	r2, r3
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	69da      	ldr	r2, [r3, #28]
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d003      	beq.n	80088cc <USB_HC_StartXfer+0xdc>
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d103      	bne.n	80088d4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2202      	movs	r2, #2
 80088d0:	60da      	str	r2, [r3, #12]
 80088d2:	e05f      	b.n	8008994 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2201      	movs	r2, #1
 80088d8:	60da      	str	r2, [r3, #12]
 80088da:	e05b      	b.n	8008994 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	6a1a      	ldr	r2, [r3, #32]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d007      	beq.n	80088fc <USB_HC_StartXfer+0x10c>
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d003      	beq.n	80088fc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	2204      	movs	r2, #4
 80088f8:	60da      	str	r2, [r3, #12]
 80088fa:	e04b      	b.n	8008994 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2203      	movs	r2, #3
 8008900:	60da      	str	r2, [r3, #12]
 8008902:	e047      	b.n	8008994 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008904:	79fb      	ldrb	r3, [r7, #7]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d10d      	bne.n	8008926 <USB_HC_StartXfer+0x136>
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	8a92      	ldrh	r2, [r2, #20]
 8008912:	4293      	cmp	r3, r2
 8008914:	d907      	bls.n	8008926 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008916:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	8a92      	ldrh	r2, [r2, #20]
 800891c:	fb03 f202 	mul.w	r2, r3, r2
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	61da      	str	r2, [r3, #28]
 8008924:	e036      	b.n	8008994 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	6a1a      	ldr	r2, [r3, #32]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	61da      	str	r2, [r3, #28]
 800892e:	e031      	b.n	8008994 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d018      	beq.n	800896a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	8a92      	ldrh	r2, [r2, #20]
 8008940:	4413      	add	r3, r2
 8008942:	3b01      	subs	r3, #1
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	8a92      	ldrh	r2, [r2, #20]
 8008948:	fbb3 f3f2 	udiv	r3, r3, r2
 800894c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800894e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008950:	8b7b      	ldrh	r3, [r7, #26]
 8008952:	429a      	cmp	r2, r3
 8008954:	d90b      	bls.n	800896e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008956:	8b7b      	ldrh	r3, [r7, #26]
 8008958:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800895a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	8a92      	ldrh	r2, [r2, #20]
 8008960:	fb03 f202 	mul.w	r2, r3, r2
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	61da      	str	r2, [r3, #28]
 8008968:	e001      	b.n	800896e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800896a:	2301      	movs	r3, #1
 800896c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	78db      	ldrb	r3, [r3, #3]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00a      	beq.n	800898c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008976:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	8a92      	ldrh	r2, [r2, #20]
 800897c:	fb03 f202 	mul.w	r2, r3, r2
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	61da      	str	r2, [r3, #28]
 8008984:	e006      	b.n	8008994 <USB_HC_StartXfer+0x1a4>
 8008986:	bf00      	nop
 8008988:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	6a1a      	ldr	r2, [r3, #32]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800899c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800899e:	04d9      	lsls	r1, r3, #19
 80089a0:	4ba3      	ldr	r3, [pc, #652]	@ (8008c30 <USB_HC_StartXfer+0x440>)
 80089a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80089a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	7d9b      	ldrb	r3, [r3, #22]
 80089aa:	075b      	lsls	r3, r3, #29
 80089ac:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80089b0:	69f9      	ldr	r1, [r7, #28]
 80089b2:	0148      	lsls	r0, r1, #5
 80089b4:	6a39      	ldr	r1, [r7, #32]
 80089b6:	4401      	add	r1, r0
 80089b8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80089bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80089be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d009      	beq.n	80089da <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	6999      	ldr	r1, [r3, #24]
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089d6:	460a      	mov	r2, r1
 80089d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	bf0c      	ite	eq
 80089ea:	2301      	moveq	r3, #1
 80089ec:	2300      	movne	r3, #0
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	69fa      	ldr	r2, [r7, #28]
 8008a02:	0151      	lsls	r1, r2, #5
 8008a04:	6a3a      	ldr	r2, [r7, #32]
 8008a06:	440a      	add	r2, r1
 8008a08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a0c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008a10:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	7e7b      	ldrb	r3, [r7, #25]
 8008a22:	075b      	lsls	r3, r3, #29
 8008a24:	69f9      	ldr	r1, [r7, #28]
 8008a26:	0148      	lsls	r0, r1, #5
 8008a28:	6a39      	ldr	r1, [r7, #32]
 8008a2a:	4401      	add	r1, r0
 8008a2c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008a30:	4313      	orrs	r3, r2
 8008a32:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	799b      	ldrb	r3, [r3, #6]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	f040 80c3 	bne.w	8008bc4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	7c5b      	ldrb	r3, [r3, #17]
 8008a42:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	0151      	lsls	r1, r2, #5
 8008a4e:	6a3a      	ldr	r2, [r7, #32]
 8008a50:	440a      	add	r2, r1
 8008a52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008a5a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	69fa      	ldr	r2, [r7, #28]
 8008a6c:	0151      	lsls	r1, r2, #5
 8008a6e:	6a3a      	ldr	r2, [r7, #32]
 8008a70:	440a      	add	r2, r1
 8008a72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a76:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008a7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	79db      	ldrb	r3, [r3, #7]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d123      	bne.n	8008acc <USB_HC_StartXfer+0x2dc>
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	78db      	ldrb	r3, [r3, #3]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d11f      	bne.n	8008acc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	69fa      	ldr	r2, [r7, #28]
 8008a9c:	0151      	lsls	r1, r2, #5
 8008a9e:	6a3a      	ldr	r2, [r7, #32]
 8008aa0:	440a      	add	r2, r1
 8008aa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008aa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008aaa:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	0151      	lsls	r1, r2, #5
 8008abe:	6a3a      	ldr	r2, [r7, #32]
 8008ac0:	440a      	add	r2, r1
 8008ac2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aca:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	7c9b      	ldrb	r3, [r3, #18]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d003      	beq.n	8008adc <USB_HC_StartXfer+0x2ec>
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	7c9b      	ldrb	r3, [r3, #18]
 8008ad8:	2b03      	cmp	r3, #3
 8008ada:	d117      	bne.n	8008b0c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d113      	bne.n	8008b0c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	78db      	ldrb	r3, [r3, #3]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d10f      	bne.n	8008b0c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	69fa      	ldr	r2, [r7, #28]
 8008afc:	0151      	lsls	r1, r2, #5
 8008afe:	6a3a      	ldr	r2, [r7, #32]
 8008b00:	440a      	add	r2, r1
 8008b02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b0a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	7c9b      	ldrb	r3, [r3, #18]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d162      	bne.n	8008bda <USB_HC_StartXfer+0x3ea>
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	78db      	ldrb	r3, [r3, #3]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d15e      	bne.n	8008bda <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	3b01      	subs	r3, #1
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	d858      	bhi.n	8008bd8 <USB_HC_StartXfer+0x3e8>
 8008b26:	a201      	add	r2, pc, #4	@ (adr r2, 8008b2c <USB_HC_StartXfer+0x33c>)
 8008b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2c:	08008b3d 	.word	0x08008b3d
 8008b30:	08008b5f 	.word	0x08008b5f
 8008b34:	08008b81 	.word	0x08008b81
 8008b38:	08008ba3 	.word	0x08008ba3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	69fa      	ldr	r2, [r7, #28]
 8008b4c:	0151      	lsls	r1, r2, #5
 8008b4e:	6a3a      	ldr	r2, [r7, #32]
 8008b50:	440a      	add	r2, r1
 8008b52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b5a:	6053      	str	r3, [r2, #4]
          break;
 8008b5c:	e03d      	b.n	8008bda <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	0151      	lsls	r1, r2, #5
 8008b70:	6a3a      	ldr	r2, [r7, #32]
 8008b72:	440a      	add	r2, r1
 8008b74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b78:	f043 030e 	orr.w	r3, r3, #14
 8008b7c:	6053      	str	r3, [r2, #4]
          break;
 8008b7e:	e02c      	b.n	8008bda <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	015a      	lsls	r2, r3, #5
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	4413      	add	r3, r2
 8008b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	0151      	lsls	r1, r2, #5
 8008b92:	6a3a      	ldr	r2, [r7, #32]
 8008b94:	440a      	add	r2, r1
 8008b96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b9e:	6053      	str	r3, [r2, #4]
          break;
 8008ba0:	e01b      	b.n	8008bda <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	6a3b      	ldr	r3, [r7, #32]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	69fa      	ldr	r2, [r7, #28]
 8008bb2:	0151      	lsls	r1, r2, #5
 8008bb4:	6a3a      	ldr	r2, [r7, #32]
 8008bb6:	440a      	add	r2, r1
 8008bb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bbc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008bc0:	6053      	str	r3, [r2, #4]
          break;
 8008bc2:	e00a      	b.n	8008bda <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	6a3b      	ldr	r3, [r7, #32]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	6053      	str	r3, [r2, #4]
 8008bd6:	e000      	b.n	8008bda <USB_HC_StartXfer+0x3ea>
          break;
 8008bd8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008bf0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	78db      	ldrb	r3, [r3, #3]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d004      	beq.n	8008c04 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c00:	613b      	str	r3, [r7, #16]
 8008c02:	e003      	b.n	8008c0c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c0a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c12:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	015a      	lsls	r2, r3, #5
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c20:	461a      	mov	r2, r3
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	e055      	b.n	8008cdc <USB_HC_StartXfer+0x4ec>
 8008c30:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	78db      	ldrb	r3, [r3, #3]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d14e      	bne.n	8008cda <USB_HC_StartXfer+0x4ea>
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	6a1b      	ldr	r3, [r3, #32]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d04a      	beq.n	8008cda <USB_HC_StartXfer+0x4ea>
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	79db      	ldrb	r3, [r3, #7]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d146      	bne.n	8008cda <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	7c9b      	ldrb	r3, [r3, #18]
 8008c50:	2b03      	cmp	r3, #3
 8008c52:	d831      	bhi.n	8008cb8 <USB_HC_StartXfer+0x4c8>
 8008c54:	a201      	add	r2, pc, #4	@ (adr r2, 8008c5c <USB_HC_StartXfer+0x46c>)
 8008c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5a:	bf00      	nop
 8008c5c:	08008c6d 	.word	0x08008c6d
 8008c60:	08008c91 	.word	0x08008c91
 8008c64:	08008c6d 	.word	0x08008c6d
 8008c68:	08008c91 	.word	0x08008c91
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	3303      	adds	r3, #3
 8008c72:	089b      	lsrs	r3, r3, #2
 8008c74:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008c76:	8afa      	ldrh	r2, [r7, #22]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d91c      	bls.n	8008cbc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	f043 0220 	orr.w	r2, r3, #32
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c8e:	e015      	b.n	8008cbc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	3303      	adds	r3, #3
 8008c96:	089b      	lsrs	r3, r3, #2
 8008c98:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008c9a:	8afa      	ldrh	r2, [r7, #22]
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d90a      	bls.n	8008cc0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	619a      	str	r2, [r3, #24]
        }
        break;
 8008cb6:	e003      	b.n	8008cc0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008cb8:	bf00      	nop
 8008cba:	e002      	b.n	8008cc2 <USB_HC_StartXfer+0x4d2>
        break;
 8008cbc:	bf00      	nop
 8008cbe:	e000      	b.n	8008cc2 <USB_HC_StartXfer+0x4d2>
        break;
 8008cc0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	6999      	ldr	r1, [r3, #24]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	785a      	ldrb	r2, [r3, #1]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	9000      	str	r0, [sp, #0]
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f7ff f9c9 	bl	800806c <USB_WritePacket>
  }

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3728      	adds	r7, #40	@ 0x28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	b29b      	uxth	r3, r3
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b089      	sub	sp, #36	@ 0x24
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008d16:	78fb      	ldrb	r3, [r7, #3]
 8008d18:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	015a      	lsls	r2, r3, #5
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	0c9b      	lsrs	r3, r3, #18
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	0fdb      	lsrs	r3, r3, #31
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	015a      	lsls	r2, r3, #5
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	4413      	add	r3, r2
 8008d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	0fdb      	lsrs	r3, r3, #31
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f003 0320 	and.w	r3, r3, #32
 8008d68:	2b20      	cmp	r3, #32
 8008d6a:	d10d      	bne.n	8008d88 <USB_HC_Halt+0x82>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10a      	bne.n	8008d88 <USB_HC_Halt+0x82>
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d005      	beq.n	8008d84 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d002      	beq.n	8008d84 <USB_HC_Halt+0x7e>
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2b03      	cmp	r3, #3
 8008d82:	d101      	bne.n	8008d88 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	e0d8      	b.n	8008f3a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d002      	beq.n	8008d94 <USB_HC_Halt+0x8e>
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d173      	bne.n	8008e7c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	0151      	lsls	r1, r2, #5
 8008da6:	69fa      	ldr	r2, [r7, #28]
 8008da8:	440a      	add	r2, r1
 8008daa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008db2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	f003 0320 	and.w	r3, r3, #32
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d14a      	bne.n	8008e56 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d133      	bne.n	8008e34 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	015a      	lsls	r2, r3, #5
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	69ba      	ldr	r2, [r7, #24]
 8008ddc:	0151      	lsls	r1, r2, #5
 8008dde:	69fa      	ldr	r2, [r7, #28]
 8008de0:	440a      	add	r2, r1
 8008de2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008de6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dea:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	015a      	lsls	r2, r3, #5
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	4413      	add	r3, r2
 8008df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	69ba      	ldr	r2, [r7, #24]
 8008dfc:	0151      	lsls	r1, r2, #5
 8008dfe:	69fa      	ldr	r2, [r7, #28]
 8008e00:	440a      	add	r2, r1
 8008e02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e0a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e18:	d82e      	bhi.n	8008e78 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e30:	d0ec      	beq.n	8008e0c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e32:	e081      	b.n	8008f38 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	69ba      	ldr	r2, [r7, #24]
 8008e44:	0151      	lsls	r1, r2, #5
 8008e46:	69fa      	ldr	r2, [r7, #28]
 8008e48:	440a      	add	r2, r1
 8008e4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e52:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e54:	e070      	b.n	8008f38 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	69ba      	ldr	r2, [r7, #24]
 8008e66:	0151      	lsls	r1, r2, #5
 8008e68:	69fa      	ldr	r2, [r7, #28]
 8008e6a:	440a      	add	r2, r1
 8008e6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e74:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e76:	e05f      	b.n	8008f38 <USB_HC_Halt+0x232>
            break;
 8008e78:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e7a:	e05d      	b.n	8008f38 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	0151      	lsls	r1, r2, #5
 8008e8e:	69fa      	ldr	r2, [r7, #28]
 8008e90:	440a      	add	r2, r1
 8008e92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e9a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d133      	bne.n	8008f14 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	0151      	lsls	r1, r2, #5
 8008ebe:	69fa      	ldr	r2, [r7, #28]
 8008ec0:	440a      	add	r2, r1
 8008ec2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ec6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008eca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69ba      	ldr	r2, [r7, #24]
 8008edc:	0151      	lsls	r1, r2, #5
 8008ede:	69fa      	ldr	r2, [r7, #28]
 8008ee0:	440a      	add	r2, r1
 8008ee2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ee6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008eea:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ef8:	d81d      	bhi.n	8008f36 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f10:	d0ec      	beq.n	8008eec <USB_HC_Halt+0x1e6>
 8008f12:	e011      	b.n	8008f38 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	69ba      	ldr	r2, [r7, #24]
 8008f24:	0151      	lsls	r1, r2, #5
 8008f26:	69fa      	ldr	r2, [r7, #28]
 8008f28:	440a      	add	r2, r1
 8008f2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f32:	6013      	str	r3, [r2, #0]
 8008f34:	e000      	b.n	8008f38 <USB_HC_Halt+0x232>
          break;
 8008f36:	bf00      	nop
    }
  }

  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3724      	adds	r7, #36	@ 0x24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
	...

08008f48 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008f58:	78fb      	ldrb	r3, [r7, #3]
 8008f5a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	04da      	lsls	r2, r3, #19
 8008f64:	4b15      	ldr	r3, [pc, #84]	@ (8008fbc <USB_DoPing+0x74>)
 8008f66:	4013      	ands	r3, r2
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	0151      	lsls	r1, r2, #5
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	440a      	add	r2, r1
 8008f70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f78:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f90:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f98:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	371c      	adds	r7, #28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	1ff80000 	.word	0x1ff80000

08008fc0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b088      	sub	sp, #32
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7fe ff8c 	bl	8007ef2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008fda:	2110      	movs	r1, #16
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7fe ffe5 	bl	8007fac <USB_FlushTxFifo>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d001      	beq.n	8008fec <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f7ff f80f 	bl	8008010 <USB_FlushRxFifo>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	61bb      	str	r3, [r7, #24]
 8009000:	e01f      	b.n	8009042 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	015a      	lsls	r2, r3, #5
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	4413      	add	r3, r2
 800900a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009018:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009020:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009028:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	4413      	add	r3, r2
 8009032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009036:	461a      	mov	r2, r3
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	3301      	adds	r3, #1
 8009040:	61bb      	str	r3, [r7, #24]
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	2b0f      	cmp	r3, #15
 8009046:	d9dc      	bls.n	8009002 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009048:	2300      	movs	r3, #0
 800904a:	61bb      	str	r3, [r7, #24]
 800904c:	e034      	b.n	80090b8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	4413      	add	r3, r2
 8009056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009064:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800906c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009074:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	4413      	add	r3, r2
 800907e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009082:	461a      	mov	r2, r3
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	3301      	adds	r3, #1
 800908c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009094:	d80c      	bhi.n	80090b0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	4413      	add	r3, r2
 800909e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090ac:	d0ec      	beq.n	8009088 <USB_StopHost+0xc8>
 80090ae:	e000      	b.n	80090b2 <USB_StopHost+0xf2>
        break;
 80090b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	3301      	adds	r3, #1
 80090b6:	61bb      	str	r3, [r7, #24]
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	2b0f      	cmp	r3, #15
 80090bc:	d9c7      	bls.n	800904e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80090c4:	461a      	mov	r2, r3
 80090c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7fe fefb 	bl	8007ed0 <USB_EnableGlobalInt>

  return ret;
 80090da:	7ffb      	ldrb	r3, [r7, #31]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3720      	adds	r7, #32
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80090e4:	b590      	push	{r4, r7, lr}
 80090e6:	b089      	sub	sp, #36	@ 0x24
 80090e8:	af04      	add	r7, sp, #16
 80090ea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80090ec:	2301      	movs	r3, #1
 80090ee:	2202      	movs	r2, #2
 80090f0:	2102      	movs	r1, #2
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fc85 	bl	8009a02 <USBH_FindInterface>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	2bff      	cmp	r3, #255	@ 0xff
 8009100:	d002      	beq.n	8009108 <USBH_CDC_InterfaceInit+0x24>
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d901      	bls.n	800910c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009108:	2302      	movs	r3, #2
 800910a:	e13d      	b.n	8009388 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fc5a 	bl	80099ca <USBH_SelectInterface>
 8009116:	4603      	mov	r3, r0
 8009118:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800911a:	7bbb      	ldrb	r3, [r7, #14]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009120:	2302      	movs	r3, #2
 8009122:	e131      	b.n	8009388 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800912a:	2050      	movs	r0, #80	@ 0x50
 800912c:	f002 fd9e 	bl	800bc6c <malloc>
 8009130:	4603      	mov	r3, r0
 8009132:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800913a:	69db      	ldr	r3, [r3, #28]
 800913c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009144:	2302      	movs	r3, #2
 8009146:	e11f      	b.n	8009388 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009148:	2250      	movs	r2, #80	@ 0x50
 800914a:	2100      	movs	r1, #0
 800914c:	68b8      	ldr	r0, [r7, #8]
 800914e:	f002 fe4b 	bl	800bde8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	211a      	movs	r1, #26
 8009158:	fb01 f303 	mul.w	r3, r1, r3
 800915c:	4413      	add	r3, r2
 800915e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	b25b      	sxtb	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	da15      	bge.n	8009196 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	211a      	movs	r1, #26
 8009170:	fb01 f303 	mul.w	r3, r1, r3
 8009174:	4413      	add	r3, r2
 8009176:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800917a:	781a      	ldrb	r2, [r3, #0]
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	211a      	movs	r1, #26
 8009186:	fb01 f303 	mul.w	r3, r1, r3
 800918a:	4413      	add	r3, r2
 800918c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009190:	881a      	ldrh	r2, [r3, #0]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	785b      	ldrb	r3, [r3, #1]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 ffbe 	bl	800b11e <USBH_AllocPipe>
 80091a2:	4603      	mov	r3, r0
 80091a4:	461a      	mov	r2, r3
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	7819      	ldrb	r1, [r3, #0]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	7858      	ldrb	r0, [r3, #1]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	8952      	ldrh	r2, [r2, #10]
 80091c2:	9202      	str	r2, [sp, #8]
 80091c4:	2203      	movs	r2, #3
 80091c6:	9201      	str	r2, [sp, #4]
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	4623      	mov	r3, r4
 80091cc:	4602      	mov	r2, r0
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f001 ff76 	bl	800b0c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2200      	movs	r2, #0
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f002 fa85 	bl	800b6ec <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80091e2:	2300      	movs	r3, #0
 80091e4:	2200      	movs	r2, #0
 80091e6:	210a      	movs	r1, #10
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fc0a 	bl	8009a02 <USBH_FindInterface>
 80091ee:	4603      	mov	r3, r0
 80091f0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
 80091f4:	2bff      	cmp	r3, #255	@ 0xff
 80091f6:	d002      	beq.n	80091fe <USBH_CDC_InterfaceInit+0x11a>
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d901      	bls.n	8009202 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80091fe:	2302      	movs	r3, #2
 8009200:	e0c2      	b.n	8009388 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	211a      	movs	r1, #26
 8009208:	fb01 f303 	mul.w	r3, r1, r3
 800920c:	4413      	add	r3, r2
 800920e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	b25b      	sxtb	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	da16      	bge.n	8009248 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	211a      	movs	r1, #26
 8009220:	fb01 f303 	mul.w	r3, r1, r3
 8009224:	4413      	add	r3, r2
 8009226:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800922a:	781a      	ldrb	r2, [r3, #0]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	211a      	movs	r1, #26
 8009236:	fb01 f303 	mul.w	r3, r1, r3
 800923a:	4413      	add	r3, r2
 800923c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009240:	881a      	ldrh	r2, [r3, #0]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	835a      	strh	r2, [r3, #26]
 8009246:	e015      	b.n	8009274 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	211a      	movs	r1, #26
 800924e:	fb01 f303 	mul.w	r3, r1, r3
 8009252:	4413      	add	r3, r2
 8009254:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009258:	781a      	ldrb	r2, [r3, #0]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	211a      	movs	r1, #26
 8009264:	fb01 f303 	mul.w	r3, r1, r3
 8009268:	4413      	add	r3, r2
 800926a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800926e:	881a      	ldrh	r2, [r3, #0]
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009274:	7bfb      	ldrb	r3, [r7, #15]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	211a      	movs	r1, #26
 800927a:	fb01 f303 	mul.w	r3, r1, r3
 800927e:	4413      	add	r3, r2
 8009280:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	b25b      	sxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	da16      	bge.n	80092ba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800928c:	7bfb      	ldrb	r3, [r7, #15]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	211a      	movs	r1, #26
 8009292:	fb01 f303 	mul.w	r3, r1, r3
 8009296:	4413      	add	r3, r2
 8009298:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800929c:	781a      	ldrb	r2, [r3, #0]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	211a      	movs	r1, #26
 80092a8:	fb01 f303 	mul.w	r3, r1, r3
 80092ac:	4413      	add	r3, r2
 80092ae:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80092b2:	881a      	ldrh	r2, [r3, #0]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	835a      	strh	r2, [r3, #26]
 80092b8:	e015      	b.n	80092e6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	211a      	movs	r1, #26
 80092c0:	fb01 f303 	mul.w	r3, r1, r3
 80092c4:	4413      	add	r3, r2
 80092c6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80092ca:	781a      	ldrb	r2, [r3, #0]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	211a      	movs	r1, #26
 80092d6:	fb01 f303 	mul.w	r3, r1, r3
 80092da:	4413      	add	r3, r2
 80092dc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80092e0:	881a      	ldrh	r2, [r3, #0]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	7b9b      	ldrb	r3, [r3, #14]
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f001 ff16 	bl	800b11e <USBH_AllocPipe>
 80092f2:	4603      	mov	r3, r0
 80092f4:	461a      	mov	r2, r3
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	7bdb      	ldrb	r3, [r3, #15]
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f001 ff0c 	bl	800b11e <USBH_AllocPipe>
 8009306:	4603      	mov	r3, r0
 8009308:	461a      	mov	r2, r3
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	7b59      	ldrb	r1, [r3, #13]
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	7b98      	ldrb	r0, [r3, #14]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	8b12      	ldrh	r2, [r2, #24]
 8009326:	9202      	str	r2, [sp, #8]
 8009328:	2202      	movs	r2, #2
 800932a:	9201      	str	r2, [sp, #4]
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	4623      	mov	r3, r4
 8009330:	4602      	mov	r2, r0
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f001 fec4 	bl	800b0c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	7b19      	ldrb	r1, [r3, #12]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	7bd8      	ldrb	r0, [r3, #15]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	8b52      	ldrh	r2, [r2, #26]
 8009350:	9202      	str	r2, [sp, #8]
 8009352:	2202      	movs	r2, #2
 8009354:	9201      	str	r2, [sp, #4]
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	4623      	mov	r3, r4
 800935a:	4602      	mov	r2, r0
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f001 feaf 	bl	800b0c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	7b5b      	ldrb	r3, [r3, #13]
 800936e:	2200      	movs	r2, #0
 8009370:	4619      	mov	r1, r3
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f002 f9ba 	bl	800b6ec <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	7b1b      	ldrb	r3, [r3, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f002 f9b3 	bl	800b6ec <USBH_LL_SetToggle>

  return USBH_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	bd90      	pop	{r4, r7, pc}

08009390 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800939e:	69db      	ldr	r3, [r3, #28]
 80093a0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00e      	beq.n	80093c8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f001 fea4 	bl	800b0fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f001 fecf 	bl	800b160 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	7b1b      	ldrb	r3, [r3, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00e      	beq.n	80093ee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	7b1b      	ldrb	r3, [r3, #12]
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 fe91 	bl	800b0fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	7b1b      	ldrb	r3, [r3, #12]
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f001 febc 	bl	800b160 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	7b5b      	ldrb	r3, [r3, #13]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00e      	beq.n	8009414 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	7b5b      	ldrb	r3, [r3, #13]
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f001 fe7e 	bl	800b0fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	7b5b      	ldrb	r3, [r3, #13]
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f001 fea9 	bl	800b160 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00b      	beq.n	8009438 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	4618      	mov	r0, r3
 800942a:	f002 fc27 	bl	800bc7c <free>
    phost->pActiveClass->pData = 0U;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009434:	2200      	movs	r2, #0
 8009436:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b084      	sub	sp, #16
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3340      	adds	r3, #64	@ 0x40
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f8b1 	bl	80095c2 <GetLineCoding>
 8009460:	4603      	mov	r3, r0
 8009462:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009464:	7afb      	ldrb	r3, [r7, #11]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d105      	bne.n	8009476 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009470:	2102      	movs	r1, #2
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009476:	7afb      	ldrb	r3, [r7, #11]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009488:	2301      	movs	r3, #1
 800948a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80094a0:	2b04      	cmp	r3, #4
 80094a2:	d877      	bhi.n	8009594 <USBH_CDC_Process+0x114>
 80094a4:	a201      	add	r2, pc, #4	@ (adr r2, 80094ac <USBH_CDC_Process+0x2c>)
 80094a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094aa:	bf00      	nop
 80094ac:	080094c1 	.word	0x080094c1
 80094b0:	080094c7 	.word	0x080094c7
 80094b4:	080094f7 	.word	0x080094f7
 80094b8:	0800956b 	.word	0x0800956b
 80094bc:	08009579 	.word	0x08009579
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	73fb      	strb	r3, [r7, #15]
      break;
 80094c4:	e06d      	b.n	80095a2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f897 	bl	8009600 <SetLineCoding>
 80094d2:	4603      	mov	r3, r0
 80094d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80094d6:	7bbb      	ldrb	r3, [r7, #14]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d104      	bne.n	80094e6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2202      	movs	r2, #2
 80094e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80094e4:	e058      	b.n	8009598 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d055      	beq.n	8009598 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	2204      	movs	r2, #4
 80094f0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80094f4:	e050      	b.n	8009598 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	3340      	adds	r3, #64	@ 0x40
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f860 	bl	80095c2 <GetLineCoding>
 8009502:	4603      	mov	r3, r0
 8009504:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d126      	bne.n	800955a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800951e:	791b      	ldrb	r3, [r3, #4]
 8009520:	429a      	cmp	r2, r3
 8009522:	d13b      	bne.n	800959c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800952e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009530:	429a      	cmp	r2, r3
 8009532:	d133      	bne.n	800959c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800953e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009540:	429a      	cmp	r2, r3
 8009542:	d12b      	bne.n	800959c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800954c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800954e:	429a      	cmp	r2, r3
 8009550:	d124      	bne.n	800959c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f958 	bl	8009808 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009558:	e020      	b.n	800959c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800955a:	7bbb      	ldrb	r3, [r7, #14]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d01d      	beq.n	800959c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2204      	movs	r2, #4
 8009564:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009568:	e018      	b.n	800959c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f867 	bl	800963e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f8da 	bl	800972a <CDC_ProcessReception>
      break;
 8009576:	e014      	b.n	80095a2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009578:	2100      	movs	r1, #0
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f001 f81a 	bl	800a5b4 <USBH_ClrFeature>
 8009580:	4603      	mov	r3, r0
 8009582:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009584:	7bbb      	ldrb	r3, [r7, #14]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10a      	bne.n	80095a0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009592:	e005      	b.n	80095a0 <USBH_CDC_Process+0x120>

    default:
      break;
 8009594:	bf00      	nop
 8009596:	e004      	b.n	80095a2 <USBH_CDC_Process+0x122>
      break;
 8009598:	bf00      	nop
 800959a:	e002      	b.n	80095a2 <USBH_CDC_Process+0x122>
      break;
 800959c:	bf00      	nop
 800959e:	e000      	b.n	80095a2 <USBH_CDC_Process+0x122>
      break;
 80095a0:	bf00      	nop

  }

  return status;
 80095a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	370c      	adds	r7, #12
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	22a1      	movs	r2, #161	@ 0xa1
 80095d0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2221      	movs	r2, #33	@ 0x21
 80095d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2207      	movs	r2, #7
 80095e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	2207      	movs	r2, #7
 80095ee:	4619      	mov	r1, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 fb14 	bl	800ac1e <USBH_CtlReq>
 80095f6:	4603      	mov	r3, r0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2221      	movs	r2, #33	@ 0x21
 800960e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2220      	movs	r2, #32
 8009614:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2207      	movs	r2, #7
 8009626:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	2207      	movs	r2, #7
 800962c:	4619      	mov	r1, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f001 faf5 	bl	800ac1e <USBH_CtlReq>
 8009634:	4603      	mov	r3, r0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b086      	sub	sp, #24
 8009642:	af02      	add	r7, sp, #8
 8009644:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009650:	2300      	movs	r3, #0
 8009652:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800965a:	2b01      	cmp	r3, #1
 800965c:	d002      	beq.n	8009664 <CDC_ProcessTransmission+0x26>
 800965e:	2b02      	cmp	r3, #2
 8009660:	d023      	beq.n	80096aa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009662:	e05e      	b.n	8009722 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	8b12      	ldrh	r2, [r2, #24]
 800966c:	4293      	cmp	r3, r2
 800966e:	d90b      	bls.n	8009688 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	69d9      	ldr	r1, [r3, #28]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	8b1a      	ldrh	r2, [r3, #24]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	7b5b      	ldrb	r3, [r3, #13]
 800967c:	2001      	movs	r0, #1
 800967e:	9000      	str	r0, [sp, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f001 fcda 	bl	800b03a <USBH_BulkSendData>
 8009686:	e00b      	b.n	80096a0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009690:	b29a      	uxth	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	7b5b      	ldrb	r3, [r3, #13]
 8009696:	2001      	movs	r0, #1
 8009698:	9000      	str	r0, [sp, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 fccd 	bl	800b03a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2202      	movs	r2, #2
 80096a4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80096a8:	e03b      	b.n	8009722 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	7b5b      	ldrb	r3, [r3, #13]
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f001 fff1 	bl	800b698 <USBH_LL_GetURBState>
 80096b6:	4603      	mov	r3, r0
 80096b8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80096ba:	7afb      	ldrb	r3, [r7, #11]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d128      	bne.n	8009712 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	8b12      	ldrh	r2, [r2, #24]
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d90e      	bls.n	80096ea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	8b12      	ldrh	r2, [r2, #24]
 80096d4:	1a9a      	subs	r2, r3, r2
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	8b12      	ldrh	r2, [r2, #24]
 80096e2:	441a      	add	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	61da      	str	r2, [r3, #28]
 80096e8:	e002      	b.n	80096f0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d004      	beq.n	8009702 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009700:	e00e      	b.n	8009720 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f868 	bl	80097e0 <USBH_CDC_TransmitCallback>
      break;
 8009710:	e006      	b.n	8009720 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009712:	7afb      	ldrb	r3, [r7, #11]
 8009714:	2b02      	cmp	r3, #2
 8009716:	d103      	bne.n	8009720 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009720:	bf00      	nop
  }
}
 8009722:	bf00      	nop
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b086      	sub	sp, #24
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800973c:	2300      	movs	r3, #0
 800973e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009746:	2b03      	cmp	r3, #3
 8009748:	d002      	beq.n	8009750 <CDC_ProcessReception+0x26>
 800974a:	2b04      	cmp	r3, #4
 800974c:	d00e      	beq.n	800976c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800974e:	e043      	b.n	80097d8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	6a19      	ldr	r1, [r3, #32]
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	8b5a      	ldrh	r2, [r3, #26]
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	7b1b      	ldrb	r3, [r3, #12]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f001 fc91 	bl	800b084 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	2204      	movs	r2, #4
 8009766:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800976a:	e035      	b.n	80097d8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	7b1b      	ldrb	r3, [r3, #12]
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 ff90 	bl	800b698 <USBH_LL_GetURBState>
 8009778:	4603      	mov	r3, r0
 800977a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800977c:	7cfb      	ldrb	r3, [r7, #19]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d129      	bne.n	80097d6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	7b1b      	ldrb	r3, [r3, #12]
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f001 fef3 	bl	800b574 <USBH_LL_GetLastXferSize>
 800978e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	429a      	cmp	r2, r3
 8009798:	d016      	beq.n	80097c8 <CDC_ProcessReception+0x9e>
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	8b5b      	ldrh	r3, [r3, #26]
 800979e:	461a      	mov	r2, r3
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d110      	bne.n	80097c8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	1ad2      	subs	r2, r2, r3
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	6a1a      	ldr	r2, [r3, #32]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	441a      	add	r2, r3
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2203      	movs	r2, #3
 80097c2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80097c6:	e006      	b.n	80097d6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f80f 	bl	80097f4 <USBH_CDC_ReceiveCallback>
      break;
 80097d6:	bf00      	nop
  }
}
 80097d8:	bf00      	nop
 80097da:	3718      	adds	r7, #24
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	4613      	mov	r3, r2
 8009828:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009830:	2302      	movs	r3, #2
 8009832:	e029      	b.n	8009888 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	79fa      	ldrb	r2, [r7, #7]
 8009838:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f000 f81f 	bl	8009890 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f001 fdc3 	bl	800b40c <USBH_LL_Init>

  return USBH_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800989c:	2300      	movs	r3, #0
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	e009      	b.n	80098b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	33e0      	adds	r3, #224	@ 0xe0
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	2200      	movs	r2, #0
 80098ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	3301      	adds	r3, #1
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2b0f      	cmp	r3, #15
 80098ba:	d9f2      	bls.n	80098a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80098bc:	2300      	movs	r3, #0
 80098be:	60fb      	str	r3, [r7, #12]
 80098c0:	e009      	b.n	80098d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80098cc:	2200      	movs	r2, #0
 80098ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	3301      	adds	r3, #1
 80098d4:	60fb      	str	r3, [r7, #12]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098dc:	d3f1      	bcc.n	80098c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2201      	movs	r2, #1
 80098fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2240      	movs	r2, #64	@ 0x40
 8009902:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	331c      	adds	r3, #28
 800992e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009932:	2100      	movs	r1, #0
 8009934:	4618      	mov	r0, r3
 8009936:	f002 fa57 	bl	800bde8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009944:	2100      	movs	r1, #0
 8009946:	4618      	mov	r0, r3
 8009948:	f002 fa4e 	bl	800bde8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009952:	2212      	movs	r2, #18
 8009954:	2100      	movs	r1, #0
 8009956:	4618      	mov	r0, r3
 8009958:	f002 fa46 	bl	800bde8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009962:	223e      	movs	r2, #62	@ 0x3e
 8009964:	2100      	movs	r1, #0
 8009966:	4618      	mov	r0, r3
 8009968:	f002 fa3e 	bl	800bde8 <memset>

  return USBH_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009976:	b480      	push	{r7}
 8009978:	b085      	sub	sp, #20
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d016      	beq.n	80099b8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10e      	bne.n	80099b2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800999a:	1c59      	adds	r1, r3, #1
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	33de      	adds	r3, #222	@ 0xde
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73fb      	strb	r3, [r7, #15]
 80099b0:	e004      	b.n	80099bc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80099b2:	2302      	movs	r3, #2
 80099b4:	73fb      	strb	r3, [r7, #15]
 80099b6:	e001      	b.n	80099bc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80099b8:	2302      	movs	r3, #2
 80099ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b085      	sub	sp, #20
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	460b      	mov	r3, r1
 80099d4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80099e0:	78fa      	ldrb	r2, [r7, #3]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d204      	bcs.n	80099f0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	78fa      	ldrb	r2, [r7, #3]
 80099ea:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80099ee:	e001      	b.n	80099f4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80099f0:	2302      	movs	r3, #2
 80099f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr

08009a02 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b087      	sub	sp, #28
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	4608      	mov	r0, r1
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	461a      	mov	r2, r3
 8009a10:	4603      	mov	r3, r0
 8009a12:	70fb      	strb	r3, [r7, #3]
 8009a14:	460b      	mov	r3, r1
 8009a16:	70bb      	strb	r3, [r7, #2]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009a20:	2300      	movs	r3, #0
 8009a22:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009a2a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a2c:	e025      	b.n	8009a7a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009a2e:	7dfb      	ldrb	r3, [r7, #23]
 8009a30:	221a      	movs	r2, #26
 8009a32:	fb02 f303 	mul.w	r3, r2, r3
 8009a36:	3308      	adds	r3, #8
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	3302      	adds	r3, #2
 8009a3e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	795b      	ldrb	r3, [r3, #5]
 8009a44:	78fa      	ldrb	r2, [r7, #3]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d002      	beq.n	8009a50 <USBH_FindInterface+0x4e>
 8009a4a:	78fb      	ldrb	r3, [r7, #3]
 8009a4c:	2bff      	cmp	r3, #255	@ 0xff
 8009a4e:	d111      	bne.n	8009a74 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009a54:	78ba      	ldrb	r2, [r7, #2]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d002      	beq.n	8009a60 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a5a:	78bb      	ldrb	r3, [r7, #2]
 8009a5c:	2bff      	cmp	r3, #255	@ 0xff
 8009a5e:	d109      	bne.n	8009a74 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a64:	787a      	ldrb	r2, [r7, #1]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d002      	beq.n	8009a70 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a6a:	787b      	ldrb	r3, [r7, #1]
 8009a6c:	2bff      	cmp	r3, #255	@ 0xff
 8009a6e:	d101      	bne.n	8009a74 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009a70:	7dfb      	ldrb	r3, [r7, #23]
 8009a72:	e006      	b.n	8009a82 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009a74:	7dfb      	ldrb	r3, [r7, #23]
 8009a76:	3301      	adds	r3, #1
 8009a78:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a7a:	7dfb      	ldrb	r3, [r7, #23]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d9d6      	bls.n	8009a2e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009a80:	23ff      	movs	r3, #255	@ 0xff
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	371c      	adds	r7, #28
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b082      	sub	sp, #8
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f001 fcf4 	bl	800b484 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f001 fe0d 	bl	800b6be <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
	...

08009ab0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b088      	sub	sp, #32
 8009ab4:	af04      	add	r7, sp, #16
 8009ab6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009abc:	2300      	movs	r3, #0
 8009abe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d102      	bne.n	8009ad2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2203      	movs	r2, #3
 8009ad0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b0b      	cmp	r3, #11
 8009ada:	f200 81bb 	bhi.w	8009e54 <USBH_Process+0x3a4>
 8009ade:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae4 <USBH_Process+0x34>)
 8009ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae4:	08009b15 	.word	0x08009b15
 8009ae8:	08009b47 	.word	0x08009b47
 8009aec:	08009baf 	.word	0x08009baf
 8009af0:	08009def 	.word	0x08009def
 8009af4:	08009e55 	.word	0x08009e55
 8009af8:	08009c4f 	.word	0x08009c4f
 8009afc:	08009d95 	.word	0x08009d95
 8009b00:	08009c85 	.word	0x08009c85
 8009b04:	08009ca5 	.word	0x08009ca5
 8009b08:	08009cc3 	.word	0x08009cc3
 8009b0c:	08009d07 	.word	0x08009d07
 8009b10:	08009dd7 	.word	0x08009dd7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 819b 	beq.w	8009e58 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009b28:	20c8      	movs	r0, #200	@ 0xc8
 8009b2a:	f001 fe12 	bl	800b752 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f001 fd05 	bl	800b53e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009b44:	e188      	b.n	8009e58 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d107      	bne.n	8009b60 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b5e:	e18a      	b.n	8009e76 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009b66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b6a:	d914      	bls.n	8009b96 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009b72:	3301      	adds	r3, #1
 8009b74:	b2da      	uxtb	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	d903      	bls.n	8009b8e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	220d      	movs	r2, #13
 8009b8a:	701a      	strb	r2, [r3, #0]
      break;
 8009b8c:	e173      	b.n	8009e76 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	701a      	strb	r2, [r3, #0]
      break;
 8009b94:	e16f      	b.n	8009e76 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009b9c:	f103 020a 	add.w	r2, r3, #10
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009ba6:	200a      	movs	r0, #10
 8009ba8:	f001 fdd3 	bl	800b752 <USBH_Delay>
      break;
 8009bac:	e163      	b.n	8009e76 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d005      	beq.n	8009bc4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009bbe:	2104      	movs	r1, #4
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009bc4:	2064      	movs	r0, #100	@ 0x64
 8009bc6:	f001 fdc4 	bl	800b752 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f001 fc90 	bl	800b4f0 <USBH_LL_GetSpeed>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2205      	movs	r2, #5
 8009bde:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009be0:	2100      	movs	r1, #0
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f001 fa9b 	bl	800b11e <USBH_AllocPipe>
 8009be8:	4603      	mov	r3, r0
 8009bea:	461a      	mov	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009bf0:	2180      	movs	r1, #128	@ 0x80
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f001 fa93 	bl	800b11e <USBH_AllocPipe>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	7919      	ldrb	r1, [r3, #4]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009c14:	9202      	str	r2, [sp, #8]
 8009c16:	2200      	movs	r2, #0
 8009c18:	9201      	str	r2, [sp, #4]
 8009c1a:	9300      	str	r3, [sp, #0]
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2280      	movs	r2, #128	@ 0x80
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f001 fa4d 	bl	800b0c0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	7959      	ldrb	r1, [r3, #5]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009c3a:	9202      	str	r2, [sp, #8]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	9201      	str	r2, [sp, #4]
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	4603      	mov	r3, r0
 8009c44:	2200      	movs	r2, #0
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 fa3a 	bl	800b0c0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c4c:	e113      	b.n	8009e76 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f916 	bl	8009e80 <USBH_HandleEnum>
 8009c54:	4603      	mov	r3, r0
 8009c56:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f040 80fd 	bne.w	8009e5c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d103      	bne.n	8009c7c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2208      	movs	r2, #8
 8009c78:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c7a:	e0ef      	b.n	8009e5c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2207      	movs	r2, #7
 8009c80:	701a      	strb	r2, [r3, #0]
      break;
 8009c82:	e0eb      	b.n	8009e5c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f000 80e8 	beq.w	8009e60 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c96:	2101      	movs	r1, #1
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2208      	movs	r2, #8
 8009ca0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009ca2:	e0dd      	b.n	8009e60 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fc3a 	bl	800a526 <USBH_SetCfg>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f040 80d5 	bne.w	8009e64 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2209      	movs	r2, #9
 8009cbe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009cc0:	e0d0      	b.n	8009e64 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009cc8:	f003 0320 	and.w	r3, r3, #32
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d016      	beq.n	8009cfe <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fc4a 	bl	800a56c <USBH_SetFeature>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d103      	bne.n	8009cec <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	220a      	movs	r2, #10
 8009ce8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009cea:	e0bd      	b.n	8009e68 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009cec:	7bbb      	ldrb	r3, [r7, #14]
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	f040 80b9 	bne.w	8009e68 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	220a      	movs	r2, #10
 8009cfa:	701a      	strb	r2, [r3, #0]
      break;
 8009cfc:	e0b4      	b.n	8009e68 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	220a      	movs	r2, #10
 8009d02:	701a      	strb	r2, [r3, #0]
      break;
 8009d04:	e0b0      	b.n	8009e68 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 80ad 	beq.w	8009e6c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73fb      	strb	r3, [r7, #15]
 8009d1e:	e016      	b.n	8009d4e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009d20:	7bfa      	ldrb	r2, [r7, #15]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	32de      	adds	r2, #222	@ 0xde
 8009d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d2a:	791a      	ldrb	r2, [r3, #4]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d108      	bne.n	8009d48 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009d36:	7bfa      	ldrb	r2, [r7, #15]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	32de      	adds	r2, #222	@ 0xde
 8009d3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009d46:	e005      	b.n	8009d54 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	73fb      	strb	r3, [r7, #15]
 8009d4e:	7bfb      	ldrb	r3, [r7, #15]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d0e5      	beq.n	8009d20 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d016      	beq.n	8009d8c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	4798      	blx	r3
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d109      	bne.n	8009d84 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2206      	movs	r2, #6
 8009d74:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d7c:	2103      	movs	r1, #3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009d82:	e073      	b.n	8009e6c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	220d      	movs	r2, #13
 8009d88:	701a      	strb	r2, [r3, #0]
      break;
 8009d8a:	e06f      	b.n	8009e6c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	220d      	movs	r2, #13
 8009d90:	701a      	strb	r2, [r3, #0]
      break;
 8009d92:	e06b      	b.n	8009e6c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d017      	beq.n	8009dce <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	4798      	blx	r3
 8009daa:	4603      	mov	r3, r0
 8009dac:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d103      	bne.n	8009dbe <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	220b      	movs	r2, #11
 8009dba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009dbc:	e058      	b.n	8009e70 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d154      	bne.n	8009e70 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	220d      	movs	r2, #13
 8009dca:	701a      	strb	r2, [r3, #0]
      break;
 8009dcc:	e050      	b.n	8009e70 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	220d      	movs	r2, #13
 8009dd2:	701a      	strb	r2, [r3, #0]
      break;
 8009dd4:	e04c      	b.n	8009e70 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d049      	beq.n	8009e74 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009de6:	695b      	ldr	r3, [r3, #20]
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	4798      	blx	r3
      }
      break;
 8009dec:	e042      	b.n	8009e74 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f7ff fd4a 	bl	8009890 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d009      	beq.n	8009e1a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e2a:	2105      	movs	r1, #5
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d107      	bne.n	8009e4c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7ff fe22 	bl	8009a8e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e4a:	e014      	b.n	8009e76 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f001 fb19 	bl	800b484 <USBH_LL_Start>
      break;
 8009e52:	e010      	b.n	8009e76 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009e54:	bf00      	nop
 8009e56:	e00e      	b.n	8009e76 <USBH_Process+0x3c6>
      break;
 8009e58:	bf00      	nop
 8009e5a:	e00c      	b.n	8009e76 <USBH_Process+0x3c6>
      break;
 8009e5c:	bf00      	nop
 8009e5e:	e00a      	b.n	8009e76 <USBH_Process+0x3c6>
    break;
 8009e60:	bf00      	nop
 8009e62:	e008      	b.n	8009e76 <USBH_Process+0x3c6>
      break;
 8009e64:	bf00      	nop
 8009e66:	e006      	b.n	8009e76 <USBH_Process+0x3c6>
      break;
 8009e68:	bf00      	nop
 8009e6a:	e004      	b.n	8009e76 <USBH_Process+0x3c6>
      break;
 8009e6c:	bf00      	nop
 8009e6e:	e002      	b.n	8009e76 <USBH_Process+0x3c6>
      break;
 8009e70:	bf00      	nop
 8009e72:	e000      	b.n	8009e76 <USBH_Process+0x3c6>
      break;
 8009e74:	bf00      	nop
  }
  return USBH_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af04      	add	r7, sp, #16
 8009e86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	785b      	ldrb	r3, [r3, #1]
 8009e94:	2b07      	cmp	r3, #7
 8009e96:	f200 81bd 	bhi.w	800a214 <USBH_HandleEnum+0x394>
 8009e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea0 <USBH_HandleEnum+0x20>)
 8009e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea0:	08009ec1 	.word	0x08009ec1
 8009ea4:	08009f7b 	.word	0x08009f7b
 8009ea8:	08009fe5 	.word	0x08009fe5
 8009eac:	0800a06f 	.word	0x0800a06f
 8009eb0:	0800a0d9 	.word	0x0800a0d9
 8009eb4:	0800a149 	.word	0x0800a149
 8009eb8:	0800a18f 	.word	0x0800a18f
 8009ebc:	0800a1d5 	.word	0x0800a1d5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009ec0:	2108      	movs	r1, #8
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fa4c 	bl	800a360 <USBH_Get_DevDesc>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d12e      	bne.n	8009f30 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	7919      	ldrb	r1, [r3, #4]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009ef6:	9202      	str	r2, [sp, #8]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	9201      	str	r2, [sp, #4]
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	4603      	mov	r3, r0
 8009f00:	2280      	movs	r2, #128	@ 0x80
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 f8dc 	bl	800b0c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	7959      	ldrb	r1, [r3, #5]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f1c:	9202      	str	r2, [sp, #8]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	9201      	str	r2, [sp, #4]
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	4603      	mov	r3, r0
 8009f26:	2200      	movs	r2, #0
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f001 f8c9 	bl	800b0c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009f2e:	e173      	b.n	800a218 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f30:	7bbb      	ldrb	r3, [r7, #14]
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	f040 8170 	bne.w	800a218 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f3e:	3301      	adds	r3, #1
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d903      	bls.n	8009f5a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	220d      	movs	r2, #13
 8009f56:	701a      	strb	r2, [r3, #0]
      break;
 8009f58:	e15e      	b.n	800a218 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	795b      	ldrb	r3, [r3, #5]
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 f8fd 	bl	800b160 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	791b      	ldrb	r3, [r3, #4]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 f8f7 	bl	800b160 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	701a      	strb	r2, [r3, #0]
      break;
 8009f78:	e14e      	b.n	800a218 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009f7a:	2112      	movs	r1, #18
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f9ef 	bl	800a360 <USBH_Get_DevDesc>
 8009f82:	4603      	mov	r3, r0
 8009f84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d103      	bne.n	8009f94 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2202      	movs	r2, #2
 8009f90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f92:	e143      	b.n	800a21c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	f040 8140 	bne.w	800a21c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d903      	bls.n	8009fbe <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	220d      	movs	r2, #13
 8009fba:	701a      	strb	r2, [r3, #0]
      break;
 8009fbc:	e12e      	b.n	800a21c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	795b      	ldrb	r3, [r3, #5]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f001 f8cb 	bl	800b160 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	791b      	ldrb	r3, [r3, #4]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f001 f8c5 	bl	800b160 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
      break;
 8009fe2:	e11b      	b.n	800a21c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fa79 	bl	800a4de <USBH_SetAddress>
 8009fec:	4603      	mov	r3, r0
 8009fee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d130      	bne.n	800a058 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009ff6:	2002      	movs	r0, #2
 8009ff8:	f001 fbab 	bl	800b752 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2203      	movs	r2, #3
 800a008:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	7919      	ldrb	r1, [r3, #4]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a01e:	9202      	str	r2, [sp, #8]
 800a020:	2200      	movs	r2, #0
 800a022:	9201      	str	r2, [sp, #4]
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	4603      	mov	r3, r0
 800a028:	2280      	movs	r2, #128	@ 0x80
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f001 f848 	bl	800b0c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	7959      	ldrb	r1, [r3, #5]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a044:	9202      	str	r2, [sp, #8]
 800a046:	2200      	movs	r2, #0
 800a048:	9201      	str	r2, [sp, #4]
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	4603      	mov	r3, r0
 800a04e:	2200      	movs	r2, #0
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f001 f835 	bl	800b0c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a056:	e0e3      	b.n	800a220 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a058:	7bbb      	ldrb	r3, [r7, #14]
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	f040 80e0 	bne.w	800a220 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	220d      	movs	r2, #13
 800a064:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	705a      	strb	r2, [r3, #1]
      break;
 800a06c:	e0d8      	b.n	800a220 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a06e:	2109      	movs	r1, #9
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f9a1 	bl	800a3b8 <USBH_Get_CfgDesc>
 800a076:	4603      	mov	r3, r0
 800a078:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a07a:	7bbb      	ldrb	r3, [r7, #14]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d103      	bne.n	800a088 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2204      	movs	r2, #4
 800a084:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a086:	e0cd      	b.n	800a224 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a088:	7bbb      	ldrb	r3, [r7, #14]
 800a08a:	2b03      	cmp	r3, #3
 800a08c:	f040 80ca 	bne.w	800a224 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a096:	3301      	adds	r3, #1
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0a6:	2b03      	cmp	r3, #3
 800a0a8:	d903      	bls.n	800a0b2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	220d      	movs	r2, #13
 800a0ae:	701a      	strb	r2, [r3, #0]
      break;
 800a0b0:	e0b8      	b.n	800a224 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	795b      	ldrb	r3, [r3, #5]
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f001 f851 	bl	800b160 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	791b      	ldrb	r3, [r3, #4]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f001 f84b 	bl	800b160 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	701a      	strb	r2, [r3, #0]
      break;
 800a0d6:	e0a5      	b.n	800a224 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a0de:	4619      	mov	r1, r3
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f969 	bl	800a3b8 <USBH_Get_CfgDesc>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0ea:	7bbb      	ldrb	r3, [r7, #14]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d103      	bne.n	800a0f8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2205      	movs	r2, #5
 800a0f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a0f6:	e097      	b.n	800a228 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0f8:	7bbb      	ldrb	r3, [r7, #14]
 800a0fa:	2b03      	cmp	r3, #3
 800a0fc:	f040 8094 	bne.w	800a228 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a106:	3301      	adds	r3, #1
 800a108:	b2da      	uxtb	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a116:	2b03      	cmp	r3, #3
 800a118:	d903      	bls.n	800a122 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	220d      	movs	r2, #13
 800a11e:	701a      	strb	r2, [r3, #0]
      break;
 800a120:	e082      	b.n	800a228 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	795b      	ldrb	r3, [r3, #5]
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f001 f819 	bl	800b160 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	791b      	ldrb	r3, [r3, #4]
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f001 f813 	bl	800b160 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	701a      	strb	r2, [r3, #0]
      break;
 800a146:	e06f      	b.n	800a228 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d019      	beq.n	800a186 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a15e:	23ff      	movs	r3, #255	@ 0xff
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f953 	bl	800a40c <USBH_Get_StringDesc>
 800a166:	4603      	mov	r3, r0
 800a168:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a16a:	7bbb      	ldrb	r3, [r7, #14]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d103      	bne.n	800a178 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2206      	movs	r2, #6
 800a174:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a176:	e059      	b.n	800a22c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a178:	7bbb      	ldrb	r3, [r7, #14]
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d156      	bne.n	800a22c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2206      	movs	r2, #6
 800a182:	705a      	strb	r2, [r3, #1]
      break;
 800a184:	e052      	b.n	800a22c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2206      	movs	r2, #6
 800a18a:	705a      	strb	r2, [r3, #1]
      break;
 800a18c:	e04e      	b.n	800a22c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a194:	2b00      	cmp	r3, #0
 800a196:	d019      	beq.n	800a1cc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a1a4:	23ff      	movs	r3, #255	@ 0xff
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f930 	bl	800a40c <USBH_Get_StringDesc>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a1b0:	7bbb      	ldrb	r3, [r7, #14]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d103      	bne.n	800a1be <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2207      	movs	r2, #7
 800a1ba:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a1bc:	e038      	b.n	800a230 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
 800a1c0:	2b03      	cmp	r3, #3
 800a1c2:	d135      	bne.n	800a230 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2207      	movs	r2, #7
 800a1c8:	705a      	strb	r2, [r3, #1]
      break;
 800a1ca:	e031      	b.n	800a230 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2207      	movs	r2, #7
 800a1d0:	705a      	strb	r2, [r3, #1]
      break;
 800a1d2:	e02d      	b.n	800a230 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d017      	beq.n	800a20e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a1ea:	23ff      	movs	r3, #255	@ 0xff
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f90d 	bl	800a40c <USBH_Get_StringDesc>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d102      	bne.n	800a202 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a200:	e018      	b.n	800a234 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a202:	7bbb      	ldrb	r3, [r7, #14]
 800a204:	2b03      	cmp	r3, #3
 800a206:	d115      	bne.n	800a234 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]
      break;
 800a20c:	e012      	b.n	800a234 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	73fb      	strb	r3, [r7, #15]
      break;
 800a212:	e00f      	b.n	800a234 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a214:	bf00      	nop
 800a216:	e00e      	b.n	800a236 <USBH_HandleEnum+0x3b6>
      break;
 800a218:	bf00      	nop
 800a21a:	e00c      	b.n	800a236 <USBH_HandleEnum+0x3b6>
      break;
 800a21c:	bf00      	nop
 800a21e:	e00a      	b.n	800a236 <USBH_HandleEnum+0x3b6>
      break;
 800a220:	bf00      	nop
 800a222:	e008      	b.n	800a236 <USBH_HandleEnum+0x3b6>
      break;
 800a224:	bf00      	nop
 800a226:	e006      	b.n	800a236 <USBH_HandleEnum+0x3b6>
      break;
 800a228:	bf00      	nop
 800a22a:	e004      	b.n	800a236 <USBH_HandleEnum+0x3b6>
      break;
 800a22c:	bf00      	nop
 800a22e:	e002      	b.n	800a236 <USBH_HandleEnum+0x3b6>
      break;
 800a230:	bf00      	nop
 800a232:	e000      	b.n	800a236 <USBH_HandleEnum+0x3b6>
      break;
 800a234:	bf00      	nop
  }
  return Status;
 800a236:	7bfb      	ldrb	r3, [r7, #15]
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a252:	bf00      	nop
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b082      	sub	sp, #8
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f804 	bl	800a282 <USBH_HandleSof>
}
 800a27a:	bf00      	nop
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b082      	sub	sp, #8
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	2b0b      	cmp	r3, #11
 800a292:	d10a      	bne.n	800a2aa <USBH_HandleSof+0x28>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d005      	beq.n	800a2aa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a2a4:	699b      	ldr	r3, [r3, #24]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	4798      	blx	r3
  }
}
 800a2aa:	bf00      	nop
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b083      	sub	sp, #12
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a2c2:	bf00      	nop
}
 800a2c4:	370c      	adds	r7, #12
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b083      	sub	sp, #12
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a2de:	bf00      	nop
}
 800a2e0:	370c      	adds	r7, #12
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b083      	sub	sp, #12
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 f8be 	bl	800b4ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	791b      	ldrb	r3, [r3, #4]
 800a342:	4619      	mov	r1, r3
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 ff0b 	bl	800b160 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	795b      	ldrb	r3, [r3, #5]
 800a34e:	4619      	mov	r1, r3
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 ff05 	bl	800b160 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af02      	add	r7, sp, #8
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a36c:	887b      	ldrh	r3, [r7, #2]
 800a36e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a372:	d901      	bls.n	800a378 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a374:	2303      	movs	r3, #3
 800a376:	e01b      	b.n	800a3b0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a37e:	887b      	ldrh	r3, [r7, #2]
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	4613      	mov	r3, r2
 800a384:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a388:	2100      	movs	r1, #0
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f872 	bl	800a474 <USBH_GetDescriptor>
 800a390:	4603      	mov	r3, r0
 800a392:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a394:	7bfb      	ldrb	r3, [r7, #15]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d109      	bne.n	800a3ae <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a3a0:	887a      	ldrh	r2, [r7, #2]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f929 	bl	800a5fc <USBH_ParseDevDesc>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af02      	add	r7, sp, #8
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	331c      	adds	r3, #28
 800a3c8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a3ca:	887b      	ldrh	r3, [r7, #2]
 800a3cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3d0:	d901      	bls.n	800a3d6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e016      	b.n	800a404 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a3d6:	887b      	ldrh	r3, [r7, #2]
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f846 	bl	800a474 <USBH_GetDescriptor>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d107      	bne.n	800a402 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a3f2:	887b      	ldrh	r3, [r7, #2]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	68b9      	ldr	r1, [r7, #8]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f9af 	bl	800a75c <USBH_ParseCfgDesc>
 800a3fe:	4603      	mov	r3, r0
 800a400:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a402:	7bfb      	ldrb	r3, [r7, #15]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af02      	add	r7, sp, #8
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	607a      	str	r2, [r7, #4]
 800a416:	461a      	mov	r2, r3
 800a418:	460b      	mov	r3, r1
 800a41a:	72fb      	strb	r3, [r7, #11]
 800a41c:	4613      	mov	r3, r2
 800a41e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a420:	893b      	ldrh	r3, [r7, #8]
 800a422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a426:	d802      	bhi.n	800a42e <USBH_Get_StringDesc+0x22>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a42e:	2303      	movs	r3, #3
 800a430:	e01c      	b.n	800a46c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a432:	7afb      	ldrb	r3, [r7, #11]
 800a434:	b29b      	uxth	r3, r3
 800a436:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a43a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a442:	893b      	ldrh	r3, [r7, #8]
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	460b      	mov	r3, r1
 800a448:	2100      	movs	r1, #0
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 f812 	bl	800a474 <USBH_GetDescriptor>
 800a450:	4603      	mov	r3, r0
 800a452:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a454:	7dfb      	ldrb	r3, [r7, #23]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d107      	bne.n	800a46a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a460:	893a      	ldrh	r2, [r7, #8]
 800a462:	6879      	ldr	r1, [r7, #4]
 800a464:	4618      	mov	r0, r3
 800a466:	f000 fb8d 	bl	800ab84 <USBH_ParseStringDesc>
  }

  return status;
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3718      	adds	r7, #24
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	607b      	str	r3, [r7, #4]
 800a47e:	460b      	mov	r3, r1
 800a480:	72fb      	strb	r3, [r7, #11]
 800a482:	4613      	mov	r3, r2
 800a484:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	789b      	ldrb	r3, [r3, #2]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d11c      	bne.n	800a4c8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a48e:	7afb      	ldrb	r3, [r7, #11]
 800a490:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a494:	b2da      	uxtb	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2206      	movs	r2, #6
 800a49e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	893a      	ldrh	r2, [r7, #8]
 800a4a4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a4a6:	893b      	ldrh	r3, [r7, #8]
 800a4a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a4ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4b0:	d104      	bne.n	800a4bc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f240 4209 	movw	r2, #1033	@ 0x409
 800a4b8:	829a      	strh	r2, [r3, #20]
 800a4ba:	e002      	b.n	800a4c2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	8b3a      	ldrh	r2, [r7, #24]
 800a4c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a4c8:	8b3b      	ldrh	r3, [r7, #24]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	6879      	ldr	r1, [r7, #4]
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f000 fba5 	bl	800ac1e <USBH_CtlReq>
 800a4d4:	4603      	mov	r3, r0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b082      	sub	sp, #8
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	789b      	ldrb	r3, [r3, #2]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d10f      	bne.n	800a512 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2205      	movs	r2, #5
 800a4fc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a4fe:	78fb      	ldrb	r3, [r7, #3]
 800a500:	b29a      	uxth	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a512:	2200      	movs	r2, #0
 800a514:	2100      	movs	r1, #0
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 fb81 	bl	800ac1e <USBH_CtlReq>
 800a51c:	4603      	mov	r3, r0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b082      	sub	sp, #8
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
 800a52e:	460b      	mov	r3, r1
 800a530:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	789b      	ldrb	r3, [r3, #2]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d10e      	bne.n	800a558 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2209      	movs	r2, #9
 800a544:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	887a      	ldrh	r2, [r7, #2]
 800a54a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2200      	movs	r2, #0
 800a550:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a558:	2200      	movs	r2, #0
 800a55a:	2100      	movs	r1, #0
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fb5e 	bl	800ac1e <USBH_CtlReq>
 800a562:	4603      	mov	r3, r0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	460b      	mov	r3, r1
 800a576:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	789b      	ldrb	r3, [r3, #2]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d10f      	bne.n	800a5a0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2203      	movs	r2, #3
 800a58a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a58c:	78fb      	ldrb	r3, [r7, #3]
 800a58e:	b29a      	uxth	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 fb3a 	bl	800ac1e <USBH_CtlReq>
 800a5aa:	4603      	mov	r3, r0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	789b      	ldrb	r3, [r3, #2]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d10f      	bne.n	800a5e8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a5da:	78fb      	ldrb	r3, [r7, #3]
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fb16 	bl	800ac1e <USBH_CtlReq>
 800a5f2:	4603      	mov	r3, r0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b087      	sub	sp, #28
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	4613      	mov	r3, r2
 800a608:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a610:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a612:	2300      	movs	r3, #0
 800a614:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a61c:	2302      	movs	r3, #2
 800a61e:	e094      	b.n	800a74a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	781a      	ldrb	r2, [r3, #0]
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	785a      	ldrb	r2, [r3, #1]
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	3302      	adds	r3, #2
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	461a      	mov	r2, r3
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	3303      	adds	r3, #3
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	021b      	lsls	r3, r3, #8
 800a640:	b29b      	uxth	r3, r3
 800a642:	4313      	orrs	r3, r2
 800a644:	b29a      	uxth	r2, r3
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	791a      	ldrb	r2, [r3, #4]
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	795a      	ldrb	r2, [r3, #5]
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	799a      	ldrb	r2, [r3, #6]
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	79da      	ldrb	r2, [r3, #7]
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a670:	2b00      	cmp	r3, #0
 800a672:	d004      	beq.n	800a67e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d11b      	bne.n	800a6b6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	79db      	ldrb	r3, [r3, #7]
 800a682:	2b20      	cmp	r3, #32
 800a684:	dc0f      	bgt.n	800a6a6 <USBH_ParseDevDesc+0xaa>
 800a686:	2b08      	cmp	r3, #8
 800a688:	db0f      	blt.n	800a6aa <USBH_ParseDevDesc+0xae>
 800a68a:	3b08      	subs	r3, #8
 800a68c:	4a32      	ldr	r2, [pc, #200]	@ (800a758 <USBH_ParseDevDesc+0x15c>)
 800a68e:	fa22 f303 	lsr.w	r3, r2, r3
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	2b00      	cmp	r3, #0
 800a698:	bf14      	ite	ne
 800a69a:	2301      	movne	r3, #1
 800a69c:	2300      	moveq	r3, #0
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d106      	bne.n	800a6b2 <USBH_ParseDevDesc+0xb6>
 800a6a4:	e001      	b.n	800a6aa <USBH_ParseDevDesc+0xae>
 800a6a6:	2b40      	cmp	r3, #64	@ 0x40
 800a6a8:	d003      	beq.n	800a6b2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	2208      	movs	r2, #8
 800a6ae:	71da      	strb	r2, [r3, #7]
        break;
 800a6b0:	e000      	b.n	800a6b4 <USBH_ParseDevDesc+0xb8>
        break;
 800a6b2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a6b4:	e00e      	b.n	800a6d4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d107      	bne.n	800a6d0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	79db      	ldrb	r3, [r3, #7]
 800a6c4:	2b08      	cmp	r3, #8
 800a6c6:	d005      	beq.n	800a6d4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	2208      	movs	r2, #8
 800a6cc:	71da      	strb	r2, [r3, #7]
 800a6ce:	e001      	b.n	800a6d4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a6d4:	88fb      	ldrh	r3, [r7, #6]
 800a6d6:	2b08      	cmp	r3, #8
 800a6d8:	d936      	bls.n	800a748 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	3308      	adds	r3, #8
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	3309      	adds	r3, #9
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	021b      	lsls	r3, r3, #8
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	330a      	adds	r3, #10
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	330b      	adds	r3, #11
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	021b      	lsls	r3, r3, #8
 800a704:	b29b      	uxth	r3, r3
 800a706:	4313      	orrs	r3, r2
 800a708:	b29a      	uxth	r2, r3
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	330c      	adds	r3, #12
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	461a      	mov	r2, r3
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	330d      	adds	r3, #13
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	021b      	lsls	r3, r3, #8
 800a71e:	b29b      	uxth	r3, r3
 800a720:	4313      	orrs	r3, r2
 800a722:	b29a      	uxth	r2, r3
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	7b9a      	ldrb	r2, [r3, #14]
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	7bda      	ldrb	r2, [r3, #15]
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	7c1a      	ldrb	r2, [r3, #16]
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	7c5a      	ldrb	r2, [r3, #17]
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a748:	7dfb      	ldrb	r3, [r7, #23]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	371c      	adds	r7, #28
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	01000101 	.word	0x01000101

0800a75c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b08c      	sub	sp, #48	@ 0x30
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	4613      	mov	r3, r2
 800a768:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a770:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a772:	2300      	movs	r3, #0
 800a774:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a778:	2300      	movs	r3, #0
 800a77a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a77e:	2300      	movs	r3, #0
 800a780:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d101      	bne.n	800a78e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a78a:	2302      	movs	r3, #2
 800a78c:	e0da      	b.n	800a944 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	2b09      	cmp	r3, #9
 800a798:	d002      	beq.n	800a7a0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a79c:	2209      	movs	r2, #9
 800a79e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	781a      	ldrb	r2, [r3, #0]
 800a7a4:	6a3b      	ldr	r3, [r7, #32]
 800a7a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	785a      	ldrb	r2, [r3, #1]
 800a7ac:	6a3b      	ldr	r3, [r7, #32]
 800a7ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	3302      	adds	r3, #2
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	3303      	adds	r3, #3
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	021b      	lsls	r3, r3, #8
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7ca:	bf28      	it	cs
 800a7cc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	791a      	ldrb	r2, [r3, #4]
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	795a      	ldrb	r2, [r3, #5]
 800a7e2:	6a3b      	ldr	r3, [r7, #32]
 800a7e4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	799a      	ldrb	r2, [r3, #6]
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	79da      	ldrb	r2, [r3, #7]
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	7a1a      	ldrb	r2, [r3, #8]
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a7fe:	88fb      	ldrh	r3, [r7, #6]
 800a800:	2b09      	cmp	r3, #9
 800a802:	f240 809d 	bls.w	800a940 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a806:	2309      	movs	r3, #9
 800a808:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a80e:	e081      	b.n	800a914 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a810:	f107 0316 	add.w	r3, r7, #22
 800a814:	4619      	mov	r1, r3
 800a816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a818:	f000 f9e7 	bl	800abea <USBH_GetNextDesc>
 800a81c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a820:	785b      	ldrb	r3, [r3, #1]
 800a822:	2b04      	cmp	r3, #4
 800a824:	d176      	bne.n	800a914 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	2b09      	cmp	r3, #9
 800a82c:	d002      	beq.n	800a834 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a830:	2209      	movs	r2, #9
 800a832:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a838:	221a      	movs	r2, #26
 800a83a:	fb02 f303 	mul.w	r3, r2, r3
 800a83e:	3308      	adds	r3, #8
 800a840:	6a3a      	ldr	r2, [r7, #32]
 800a842:	4413      	add	r3, r2
 800a844:	3302      	adds	r3, #2
 800a846:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a848:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a84a:	69f8      	ldr	r0, [r7, #28]
 800a84c:	f000 f87e 	bl	800a94c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a850:	2300      	movs	r3, #0
 800a852:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a856:	2300      	movs	r3, #0
 800a858:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a85a:	e043      	b.n	800a8e4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a85c:	f107 0316 	add.w	r3, r7, #22
 800a860:	4619      	mov	r1, r3
 800a862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a864:	f000 f9c1 	bl	800abea <USBH_GetNextDesc>
 800a868:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86c:	785b      	ldrb	r3, [r3, #1]
 800a86e:	2b05      	cmp	r3, #5
 800a870:	d138      	bne.n	800a8e4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	795b      	ldrb	r3, [r3, #5]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d113      	bne.n	800a8a2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d003      	beq.n	800a88a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a882:	69fb      	ldr	r3, [r7, #28]
 800a884:	799b      	ldrb	r3, [r3, #6]
 800a886:	2b03      	cmp	r3, #3
 800a888:	d10b      	bne.n	800a8a2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	79db      	ldrb	r3, [r3, #7]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10b      	bne.n	800a8aa <USBH_ParseCfgDesc+0x14e>
 800a892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	2b09      	cmp	r3, #9
 800a898:	d007      	beq.n	800a8aa <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89c:	2209      	movs	r2, #9
 800a89e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a8a0:	e003      	b.n	800a8aa <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a4:	2207      	movs	r2, #7
 800a8a6:	701a      	strb	r2, [r3, #0]
 800a8a8:	e000      	b.n	800a8ac <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a8aa:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a8b4:	3201      	adds	r2, #1
 800a8b6:	00d2      	lsls	r2, r2, #3
 800a8b8:	211a      	movs	r1, #26
 800a8ba:	fb01 f303 	mul.w	r3, r1, r3
 800a8be:	4413      	add	r3, r2
 800a8c0:	3308      	adds	r3, #8
 800a8c2:	6a3a      	ldr	r2, [r7, #32]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a8ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8cc:	69b9      	ldr	r1, [r7, #24]
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	f000 f870 	bl	800a9b4 <USBH_ParseEPDesc>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a8da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a8de:	3301      	adds	r3, #1
 800a8e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	791b      	ldrb	r3, [r3, #4]
 800a8e8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d204      	bcs.n	800a8fa <USBH_ParseCfgDesc+0x19e>
 800a8f0:	6a3b      	ldr	r3, [r7, #32]
 800a8f2:	885a      	ldrh	r2, [r3, #2]
 800a8f4:	8afb      	ldrh	r3, [r7, #22]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d8b0      	bhi.n	800a85c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	791b      	ldrb	r3, [r3, #4]
 800a8fe:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a902:	429a      	cmp	r2, r3
 800a904:	d201      	bcs.n	800a90a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a906:	2303      	movs	r3, #3
 800a908:	e01c      	b.n	800a944 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a90a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a90e:	3301      	adds	r3, #1
 800a910:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d805      	bhi.n	800a928 <USBH_ParseCfgDesc+0x1cc>
 800a91c:	6a3b      	ldr	r3, [r7, #32]
 800a91e:	885a      	ldrh	r2, [r3, #2]
 800a920:	8afb      	ldrh	r3, [r7, #22]
 800a922:	429a      	cmp	r2, r3
 800a924:	f63f af74 	bhi.w	800a810 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a928:	6a3b      	ldr	r3, [r7, #32]
 800a92a:	791b      	ldrb	r3, [r3, #4]
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	bf28      	it	cs
 800a930:	2302      	movcs	r3, #2
 800a932:	b2db      	uxtb	r3, r3
 800a934:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a938:	429a      	cmp	r2, r3
 800a93a:	d201      	bcs.n	800a940 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a93c:	2303      	movs	r3, #3
 800a93e:	e001      	b.n	800a944 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a940:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a944:	4618      	mov	r0, r3
 800a946:	3730      	adds	r7, #48	@ 0x30
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	781a      	ldrb	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	785a      	ldrb	r2, [r3, #1]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	789a      	ldrb	r2, [r3, #2]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	78da      	ldrb	r2, [r3, #3]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	3304      	adds	r3, #4
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	bf28      	it	cs
 800a980:	2302      	movcs	r3, #2
 800a982:	b2da      	uxtb	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	795a      	ldrb	r2, [r3, #5]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	799a      	ldrb	r2, [r3, #6]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	79da      	ldrb	r2, [r3, #7]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	7a1a      	ldrb	r2, [r3, #8]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	721a      	strb	r2, [r3, #8]
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	781a      	ldrb	r2, [r3, #0]
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	785a      	ldrb	r2, [r3, #1]
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	789a      	ldrb	r2, [r3, #2]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	78da      	ldrb	r2, [r3, #3]
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	3305      	adds	r3, #5
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	021b      	lsls	r3, r3, #8
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	799a      	ldrb	r2, [r3, #6]
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	889b      	ldrh	r3, [r3, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d009      	beq.n	800aa22 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800aa12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa16:	d804      	bhi.n	800aa22 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800aa1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa20:	d901      	bls.n	800aa26 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800aa22:	2303      	movs	r3, #3
 800aa24:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d136      	bne.n	800aa9e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	78db      	ldrb	r3, [r3, #3]
 800aa34:	f003 0303 	and.w	r3, r3, #3
 800aa38:	2b02      	cmp	r3, #2
 800aa3a:	d108      	bne.n	800aa4e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	889b      	ldrh	r3, [r3, #4]
 800aa40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa44:	f240 8097 	bls.w	800ab76 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	75fb      	strb	r3, [r7, #23]
 800aa4c:	e093      	b.n	800ab76 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	78db      	ldrb	r3, [r3, #3]
 800aa52:	f003 0303 	and.w	r3, r3, #3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d107      	bne.n	800aa6a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	889b      	ldrh	r3, [r3, #4]
 800aa5e:	2b40      	cmp	r3, #64	@ 0x40
 800aa60:	f240 8089 	bls.w	800ab76 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa64:	2303      	movs	r3, #3
 800aa66:	75fb      	strb	r3, [r7, #23]
 800aa68:	e085      	b.n	800ab76 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	78db      	ldrb	r3, [r3, #3]
 800aa6e:	f003 0303 	and.w	r3, r3, #3
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d005      	beq.n	800aa82 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	78db      	ldrb	r3, [r3, #3]
 800aa7a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	d10a      	bne.n	800aa98 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	799b      	ldrb	r3, [r3, #6]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d003      	beq.n	800aa92 <USBH_ParseEPDesc+0xde>
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	799b      	ldrb	r3, [r3, #6]
 800aa8e:	2b10      	cmp	r3, #16
 800aa90:	d970      	bls.n	800ab74 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800aa92:	2303      	movs	r3, #3
 800aa94:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aa96:	e06d      	b.n	800ab74 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	75fb      	strb	r3, [r7, #23]
 800aa9c:	e06b      	b.n	800ab76 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d13c      	bne.n	800ab22 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	78db      	ldrb	r3, [r3, #3]
 800aaac:	f003 0303 	and.w	r3, r3, #3
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d005      	beq.n	800aac0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	78db      	ldrb	r3, [r3, #3]
 800aab8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d106      	bne.n	800aace <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	889b      	ldrh	r3, [r3, #4]
 800aac4:	2b40      	cmp	r3, #64	@ 0x40
 800aac6:	d956      	bls.n	800ab76 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aac8:	2303      	movs	r3, #3
 800aaca:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aacc:	e053      	b.n	800ab76 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	78db      	ldrb	r3, [r3, #3]
 800aad2:	f003 0303 	and.w	r3, r3, #3
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d10e      	bne.n	800aaf8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	799b      	ldrb	r3, [r3, #6]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d007      	beq.n	800aaf2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800aae6:	2b10      	cmp	r3, #16
 800aae8:	d803      	bhi.n	800aaf2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800aaee:	2b40      	cmp	r3, #64	@ 0x40
 800aaf0:	d941      	bls.n	800ab76 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	75fb      	strb	r3, [r7, #23]
 800aaf6:	e03e      	b.n	800ab76 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	78db      	ldrb	r3, [r3, #3]
 800aafc:	f003 0303 	and.w	r3, r3, #3
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d10b      	bne.n	800ab1c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	799b      	ldrb	r3, [r3, #6]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d004      	beq.n	800ab16 <USBH_ParseEPDesc+0x162>
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	889b      	ldrh	r3, [r3, #4]
 800ab10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab14:	d32f      	bcc.n	800ab76 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab16:	2303      	movs	r3, #3
 800ab18:	75fb      	strb	r3, [r7, #23]
 800ab1a:	e02c      	b.n	800ab76 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	75fb      	strb	r3, [r7, #23]
 800ab20:	e029      	b.n	800ab76 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d120      	bne.n	800ab6e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	78db      	ldrb	r3, [r3, #3]
 800ab30:	f003 0303 	and.w	r3, r3, #3
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d106      	bne.n	800ab46 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	889b      	ldrh	r3, [r3, #4]
 800ab3c:	2b08      	cmp	r3, #8
 800ab3e:	d01a      	beq.n	800ab76 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab40:	2303      	movs	r3, #3
 800ab42:	75fb      	strb	r3, [r7, #23]
 800ab44:	e017      	b.n	800ab76 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	78db      	ldrb	r3, [r3, #3]
 800ab4a:	f003 0303 	and.w	r3, r3, #3
 800ab4e:	2b03      	cmp	r3, #3
 800ab50:	d10a      	bne.n	800ab68 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	799b      	ldrb	r3, [r3, #6]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d003      	beq.n	800ab62 <USBH_ParseEPDesc+0x1ae>
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	889b      	ldrh	r3, [r3, #4]
 800ab5e:	2b08      	cmp	r3, #8
 800ab60:	d909      	bls.n	800ab76 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab62:	2303      	movs	r3, #3
 800ab64:	75fb      	strb	r3, [r7, #23]
 800ab66:	e006      	b.n	800ab76 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	75fb      	strb	r3, [r7, #23]
 800ab6c:	e003      	b.n	800ab76 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	75fb      	strb	r3, [r7, #23]
 800ab72:	e000      	b.n	800ab76 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ab74:	bf00      	nop
  }

  return status;
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	371c      	adds	r7, #28
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b087      	sub	sp, #28
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3301      	adds	r3, #1
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	2b03      	cmp	r3, #3
 800ab9a:	d120      	bne.n	800abde <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	1e9a      	subs	r2, r3, #2
 800aba2:	88fb      	ldrh	r3, [r7, #6]
 800aba4:	4293      	cmp	r3, r2
 800aba6:	bf28      	it	cs
 800aba8:	4613      	movcs	r3, r2
 800abaa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	3302      	adds	r3, #2
 800abb0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800abb2:	2300      	movs	r3, #0
 800abb4:	82fb      	strh	r3, [r7, #22]
 800abb6:	e00b      	b.n	800abd0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800abb8:	8afb      	ldrh	r3, [r7, #22]
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	4413      	add	r3, r2
 800abbe:	781a      	ldrb	r2, [r3, #0]
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	3301      	adds	r3, #1
 800abc8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800abca:	8afb      	ldrh	r3, [r7, #22]
 800abcc:	3302      	adds	r3, #2
 800abce:	82fb      	strh	r3, [r7, #22]
 800abd0:	8afa      	ldrh	r2, [r7, #22]
 800abd2:	8abb      	ldrh	r3, [r7, #20]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d3ef      	bcc.n	800abb8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2200      	movs	r2, #0
 800abdc:	701a      	strb	r2, [r3, #0]
  }
}
 800abde:	bf00      	nop
 800abe0:	371c      	adds	r7, #28
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800abea:	b480      	push	{r7}
 800abec:	b085      	sub	sp, #20
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
 800abf2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	7812      	ldrb	r2, [r2, #0]
 800abfc:	4413      	add	r3, r2
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac10:	68fb      	ldr	r3, [r7, #12]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b086      	sub	sp, #24
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	789b      	ldrb	r3, [r3, #2]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d002      	beq.n	800ac3e <USBH_CtlReq+0x20>
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d00f      	beq.n	800ac5c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ac3c:	e027      	b.n	800ac8e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	88fa      	ldrh	r2, [r7, #6]
 800ac48:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2202      	movs	r2, #2
 800ac54:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ac56:	2301      	movs	r3, #1
 800ac58:	75fb      	strb	r3, [r7, #23]
      break;
 800ac5a:	e018      	b.n	800ac8e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f000 f81b 	bl	800ac98 <USBH_HandleControl>
 800ac62:	4603      	mov	r3, r0
 800ac64:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ac66:	7dfb      	ldrb	r3, [r7, #23]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d002      	beq.n	800ac72 <USBH_CtlReq+0x54>
 800ac6c:	7dfb      	ldrb	r3, [r7, #23]
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d106      	bne.n	800ac80 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2201      	movs	r2, #1
 800ac76:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	761a      	strb	r2, [r3, #24]
      break;
 800ac7e:	e005      	b.n	800ac8c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ac80:	7dfb      	ldrb	r3, [r7, #23]
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d102      	bne.n	800ac8c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	709a      	strb	r2, [r3, #2]
      break;
 800ac8c:	bf00      	nop
  }
  return status;
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3718      	adds	r7, #24
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aca0:	2301      	movs	r3, #1
 800aca2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aca4:	2300      	movs	r3, #0
 800aca6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	7e1b      	ldrb	r3, [r3, #24]
 800acac:	3b01      	subs	r3, #1
 800acae:	2b0a      	cmp	r3, #10
 800acb0:	f200 8156 	bhi.w	800af60 <USBH_HandleControl+0x2c8>
 800acb4:	a201      	add	r2, pc, #4	@ (adr r2, 800acbc <USBH_HandleControl+0x24>)
 800acb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acba:	bf00      	nop
 800acbc:	0800ace9 	.word	0x0800ace9
 800acc0:	0800ad03 	.word	0x0800ad03
 800acc4:	0800ad6d 	.word	0x0800ad6d
 800acc8:	0800ad93 	.word	0x0800ad93
 800accc:	0800adcb 	.word	0x0800adcb
 800acd0:	0800adf5 	.word	0x0800adf5
 800acd4:	0800ae47 	.word	0x0800ae47
 800acd8:	0800ae69 	.word	0x0800ae69
 800acdc:	0800aea5 	.word	0x0800aea5
 800ace0:	0800aecb 	.word	0x0800aecb
 800ace4:	0800af09 	.word	0x0800af09
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f103 0110 	add.w	r1, r3, #16
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	795b      	ldrb	r3, [r3, #5]
 800acf2:	461a      	mov	r2, r3
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 f943 	bl	800af80 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2202      	movs	r2, #2
 800acfe:	761a      	strb	r2, [r3, #24]
      break;
 800ad00:	e139      	b.n	800af76 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	795b      	ldrb	r3, [r3, #5]
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fcc5 	bl	800b698 <USBH_LL_GetURBState>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ad12:	7bbb      	ldrb	r3, [r7, #14]
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d11e      	bne.n	800ad56 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	7c1b      	ldrb	r3, [r3, #16]
 800ad1c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ad20:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	8adb      	ldrh	r3, [r3, #22]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00a      	beq.n	800ad40 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ad2a:	7b7b      	ldrb	r3, [r7, #13]
 800ad2c:	2b80      	cmp	r3, #128	@ 0x80
 800ad2e:	d103      	bne.n	800ad38 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2203      	movs	r2, #3
 800ad34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad36:	e115      	b.n	800af64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2205      	movs	r2, #5
 800ad3c:	761a      	strb	r2, [r3, #24]
      break;
 800ad3e:	e111      	b.n	800af64 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ad40:	7b7b      	ldrb	r3, [r7, #13]
 800ad42:	2b80      	cmp	r3, #128	@ 0x80
 800ad44:	d103      	bne.n	800ad4e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2209      	movs	r2, #9
 800ad4a:	761a      	strb	r2, [r3, #24]
      break;
 800ad4c:	e10a      	b.n	800af64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2207      	movs	r2, #7
 800ad52:	761a      	strb	r2, [r3, #24]
      break;
 800ad54:	e106      	b.n	800af64 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ad56:	7bbb      	ldrb	r3, [r7, #14]
 800ad58:	2b04      	cmp	r3, #4
 800ad5a:	d003      	beq.n	800ad64 <USBH_HandleControl+0xcc>
 800ad5c:	7bbb      	ldrb	r3, [r7, #14]
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	f040 8100 	bne.w	800af64 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	220b      	movs	r2, #11
 800ad68:	761a      	strb	r2, [r3, #24]
      break;
 800ad6a:	e0fb      	b.n	800af64 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6899      	ldr	r1, [r3, #8]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	899a      	ldrh	r2, [r3, #12]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	791b      	ldrb	r3, [r3, #4]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 f93a 	bl	800affe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2204      	movs	r2, #4
 800ad8e:	761a      	strb	r2, [r3, #24]
      break;
 800ad90:	e0f1      	b.n	800af76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	791b      	ldrb	r3, [r3, #4]
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fc7d 	bl	800b698 <USBH_LL_GetURBState>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ada2:	7bbb      	ldrb	r3, [r7, #14]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d102      	bne.n	800adae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2209      	movs	r2, #9
 800adac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800adae:	7bbb      	ldrb	r3, [r7, #14]
 800adb0:	2b05      	cmp	r3, #5
 800adb2:	d102      	bne.n	800adba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800adb4:	2303      	movs	r3, #3
 800adb6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800adb8:	e0d6      	b.n	800af68 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800adba:	7bbb      	ldrb	r3, [r7, #14]
 800adbc:	2b04      	cmp	r3, #4
 800adbe:	f040 80d3 	bne.w	800af68 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	220b      	movs	r2, #11
 800adc6:	761a      	strb	r2, [r3, #24]
      break;
 800adc8:	e0ce      	b.n	800af68 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6899      	ldr	r1, [r3, #8]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	899a      	ldrh	r2, [r3, #12]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	795b      	ldrb	r3, [r3, #5]
 800add6:	2001      	movs	r0, #1
 800add8:	9000      	str	r0, [sp, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f8ea 	bl	800afb4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2206      	movs	r2, #6
 800adf0:	761a      	strb	r2, [r3, #24]
      break;
 800adf2:	e0c0      	b.n	800af76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	795b      	ldrb	r3, [r3, #5]
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fc4c 	bl	800b698 <USBH_LL_GetURBState>
 800ae00:	4603      	mov	r3, r0
 800ae02:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae04:	7bbb      	ldrb	r3, [r7, #14]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d103      	bne.n	800ae12 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2207      	movs	r2, #7
 800ae0e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae10:	e0ac      	b.n	800af6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ae12:	7bbb      	ldrb	r3, [r7, #14]
 800ae14:	2b05      	cmp	r3, #5
 800ae16:	d105      	bne.n	800ae24 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	220c      	movs	r2, #12
 800ae1c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ae1e:	2303      	movs	r3, #3
 800ae20:	73fb      	strb	r3, [r7, #15]
      break;
 800ae22:	e0a3      	b.n	800af6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae24:	7bbb      	ldrb	r3, [r7, #14]
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d103      	bne.n	800ae32 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2205      	movs	r2, #5
 800ae2e:	761a      	strb	r2, [r3, #24]
      break;
 800ae30:	e09c      	b.n	800af6c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ae32:	7bbb      	ldrb	r3, [r7, #14]
 800ae34:	2b04      	cmp	r3, #4
 800ae36:	f040 8099 	bne.w	800af6c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	220b      	movs	r2, #11
 800ae3e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ae40:	2302      	movs	r3, #2
 800ae42:	73fb      	strb	r3, [r7, #15]
      break;
 800ae44:	e092      	b.n	800af6c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	791b      	ldrb	r3, [r3, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f8d5 	bl	800affe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2208      	movs	r2, #8
 800ae64:	761a      	strb	r2, [r3, #24]

      break;
 800ae66:	e086      	b.n	800af76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	791b      	ldrb	r3, [r3, #4]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fc12 	bl	800b698 <USBH_LL_GetURBState>
 800ae74:	4603      	mov	r3, r0
 800ae76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae78:	7bbb      	ldrb	r3, [r7, #14]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d105      	bne.n	800ae8a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	220d      	movs	r2, #13
 800ae82:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ae84:	2300      	movs	r3, #0
 800ae86:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae88:	e072      	b.n	800af70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ae8a:	7bbb      	ldrb	r3, [r7, #14]
 800ae8c:	2b04      	cmp	r3, #4
 800ae8e:	d103      	bne.n	800ae98 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	220b      	movs	r2, #11
 800ae94:	761a      	strb	r2, [r3, #24]
      break;
 800ae96:	e06b      	b.n	800af70 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ae98:	7bbb      	ldrb	r3, [r7, #14]
 800ae9a:	2b05      	cmp	r3, #5
 800ae9c:	d168      	bne.n	800af70 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ae9e:	2303      	movs	r3, #3
 800aea0:	73fb      	strb	r3, [r7, #15]
      break;
 800aea2:	e065      	b.n	800af70 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	795b      	ldrb	r3, [r3, #5]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	9200      	str	r2, [sp, #0]
 800aeac:	2200      	movs	r2, #0
 800aeae:	2100      	movs	r1, #0
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f87f 	bl	800afb4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	220a      	movs	r2, #10
 800aec6:	761a      	strb	r2, [r3, #24]
      break;
 800aec8:	e055      	b.n	800af76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	795b      	ldrb	r3, [r3, #5]
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fbe1 	bl	800b698 <USBH_LL_GetURBState>
 800aed6:	4603      	mov	r3, r0
 800aed8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aeda:	7bbb      	ldrb	r3, [r7, #14]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d105      	bne.n	800aeec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	220d      	movs	r2, #13
 800aee8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aeea:	e043      	b.n	800af74 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aeec:	7bbb      	ldrb	r3, [r7, #14]
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d103      	bne.n	800aefa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2209      	movs	r2, #9
 800aef6:	761a      	strb	r2, [r3, #24]
      break;
 800aef8:	e03c      	b.n	800af74 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800aefa:	7bbb      	ldrb	r3, [r7, #14]
 800aefc:	2b04      	cmp	r3, #4
 800aefe:	d139      	bne.n	800af74 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	220b      	movs	r2, #11
 800af04:	761a      	strb	r2, [r3, #24]
      break;
 800af06:	e035      	b.n	800af74 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	7e5b      	ldrb	r3, [r3, #25]
 800af0c:	3301      	adds	r3, #1
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	765a      	strb	r2, [r3, #25]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	7e5b      	ldrb	r3, [r3, #25]
 800af18:	2b02      	cmp	r3, #2
 800af1a:	d806      	bhi.n	800af2a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2201      	movs	r2, #1
 800af20:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2201      	movs	r2, #1
 800af26:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800af28:	e025      	b.n	800af76 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800af30:	2106      	movs	r1, #6
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	795b      	ldrb	r3, [r3, #5]
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f90c 	bl	800b160 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	791b      	ldrb	r3, [r3, #4]
 800af4c:	4619      	mov	r1, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f906 	bl	800b160 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800af5a:	2302      	movs	r3, #2
 800af5c:	73fb      	strb	r3, [r7, #15]
      break;
 800af5e:	e00a      	b.n	800af76 <USBH_HandleControl+0x2de>

    default:
      break;
 800af60:	bf00      	nop
 800af62:	e008      	b.n	800af76 <USBH_HandleControl+0x2de>
      break;
 800af64:	bf00      	nop
 800af66:	e006      	b.n	800af76 <USBH_HandleControl+0x2de>
      break;
 800af68:	bf00      	nop
 800af6a:	e004      	b.n	800af76 <USBH_HandleControl+0x2de>
      break;
 800af6c:	bf00      	nop
 800af6e:	e002      	b.n	800af76 <USBH_HandleControl+0x2de>
      break;
 800af70:	bf00      	nop
 800af72:	e000      	b.n	800af76 <USBH_HandleControl+0x2de>
      break;
 800af74:	bf00      	nop
  }

  return status;
 800af76:	7bfb      	ldrb	r3, [r7, #15]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b088      	sub	sp, #32
 800af84:	af04      	add	r7, sp, #16
 800af86:	60f8      	str	r0, [r7, #12]
 800af88:	60b9      	str	r1, [r7, #8]
 800af8a:	4613      	mov	r3, r2
 800af8c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800af8e:	79f9      	ldrb	r1, [r7, #7]
 800af90:	2300      	movs	r3, #0
 800af92:	9303      	str	r3, [sp, #12]
 800af94:	2308      	movs	r3, #8
 800af96:	9302      	str	r3, [sp, #8]
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	9301      	str	r3, [sp, #4]
 800af9c:	2300      	movs	r3, #0
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	2300      	movs	r3, #0
 800afa2:	2200      	movs	r2, #0
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 fb46 	bl	800b636 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b088      	sub	sp, #32
 800afb8:	af04      	add	r7, sp, #16
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	4611      	mov	r1, r2
 800afc0:	461a      	mov	r2, r3
 800afc2:	460b      	mov	r3, r1
 800afc4:	80fb      	strh	r3, [r7, #6]
 800afc6:	4613      	mov	r3, r2
 800afc8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d001      	beq.n	800afd8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800afd4:	2300      	movs	r3, #0
 800afd6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800afd8:	7979      	ldrb	r1, [r7, #5]
 800afda:	7e3b      	ldrb	r3, [r7, #24]
 800afdc:	9303      	str	r3, [sp, #12]
 800afde:	88fb      	ldrh	r3, [r7, #6]
 800afe0:	9302      	str	r3, [sp, #8]
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	9301      	str	r3, [sp, #4]
 800afe6:	2301      	movs	r3, #1
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	2300      	movs	r3, #0
 800afec:	2200      	movs	r2, #0
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f000 fb21 	bl	800b636 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b088      	sub	sp, #32
 800b002:	af04      	add	r7, sp, #16
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	60b9      	str	r1, [r7, #8]
 800b008:	4611      	mov	r1, r2
 800b00a:	461a      	mov	r2, r3
 800b00c:	460b      	mov	r3, r1
 800b00e:	80fb      	strh	r3, [r7, #6]
 800b010:	4613      	mov	r3, r2
 800b012:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b014:	7979      	ldrb	r1, [r7, #5]
 800b016:	2300      	movs	r3, #0
 800b018:	9303      	str	r3, [sp, #12]
 800b01a:	88fb      	ldrh	r3, [r7, #6]
 800b01c:	9302      	str	r3, [sp, #8]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	9301      	str	r3, [sp, #4]
 800b022:	2301      	movs	r3, #1
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	2300      	movs	r3, #0
 800b028:	2201      	movs	r2, #1
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f000 fb03 	bl	800b636 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b030:	2300      	movs	r3, #0

}
 800b032:	4618      	mov	r0, r3
 800b034:	3710      	adds	r7, #16
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b088      	sub	sp, #32
 800b03e:	af04      	add	r7, sp, #16
 800b040:	60f8      	str	r0, [r7, #12]
 800b042:	60b9      	str	r1, [r7, #8]
 800b044:	4611      	mov	r1, r2
 800b046:	461a      	mov	r2, r3
 800b048:	460b      	mov	r3, r1
 800b04a:	80fb      	strh	r3, [r7, #6]
 800b04c:	4613      	mov	r3, r2
 800b04e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b056:	2b00      	cmp	r3, #0
 800b058:	d001      	beq.n	800b05e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b05a:	2300      	movs	r3, #0
 800b05c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b05e:	7979      	ldrb	r1, [r7, #5]
 800b060:	7e3b      	ldrb	r3, [r7, #24]
 800b062:	9303      	str	r3, [sp, #12]
 800b064:	88fb      	ldrh	r3, [r7, #6]
 800b066:	9302      	str	r3, [sp, #8]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	9301      	str	r3, [sp, #4]
 800b06c:	2301      	movs	r3, #1
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	2302      	movs	r3, #2
 800b072:	2200      	movs	r2, #0
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f000 fade 	bl	800b636 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b088      	sub	sp, #32
 800b088:	af04      	add	r7, sp, #16
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	4611      	mov	r1, r2
 800b090:	461a      	mov	r2, r3
 800b092:	460b      	mov	r3, r1
 800b094:	80fb      	strh	r3, [r7, #6]
 800b096:	4613      	mov	r3, r2
 800b098:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b09a:	7979      	ldrb	r1, [r7, #5]
 800b09c:	2300      	movs	r3, #0
 800b09e:	9303      	str	r3, [sp, #12]
 800b0a0:	88fb      	ldrh	r3, [r7, #6]
 800b0a2:	9302      	str	r3, [sp, #8]
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	9301      	str	r3, [sp, #4]
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f000 fac0 	bl	800b636 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3710      	adds	r7, #16
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af04      	add	r7, sp, #16
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	4608      	mov	r0, r1
 800b0ca:	4611      	mov	r1, r2
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	70fb      	strb	r3, [r7, #3]
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	70bb      	strb	r3, [r7, #2]
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b0da:	7878      	ldrb	r0, [r7, #1]
 800b0dc:	78ba      	ldrb	r2, [r7, #2]
 800b0de:	78f9      	ldrb	r1, [r7, #3]
 800b0e0:	8b3b      	ldrh	r3, [r7, #24]
 800b0e2:	9302      	str	r3, [sp, #8]
 800b0e4:	7d3b      	ldrb	r3, [r7, #20]
 800b0e6:	9301      	str	r3, [sp, #4]
 800b0e8:	7c3b      	ldrb	r3, [r7, #16]
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fa53 	bl	800b59a <USBH_LL_OpenPipe>

  return USBH_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b082      	sub	sp, #8
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	460b      	mov	r3, r1
 800b108:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b10a:	78fb      	ldrb	r3, [r7, #3]
 800b10c:	4619      	mov	r1, r3
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 fa72 	bl	800b5f8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b084      	sub	sp, #16
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	460b      	mov	r3, r1
 800b128:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f836 	bl	800b19c <USBH_GetFreePipe>
 800b130:	4603      	mov	r3, r0
 800b132:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b134:	89fb      	ldrh	r3, [r7, #14]
 800b136:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d00a      	beq.n	800b154 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b13e:	78fa      	ldrb	r2, [r7, #3]
 800b140:	89fb      	ldrh	r3, [r7, #14]
 800b142:	f003 030f 	and.w	r3, r3, #15
 800b146:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b14a:	6879      	ldr	r1, [r7, #4]
 800b14c:	33e0      	adds	r3, #224	@ 0xe0
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	440b      	add	r3, r1
 800b152:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b154:	89fb      	ldrh	r3, [r7, #14]
 800b156:	b2db      	uxtb	r3, r3
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	460b      	mov	r3, r1
 800b16a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b16c:	78fb      	ldrb	r3, [r7, #3]
 800b16e:	2b0f      	cmp	r3, #15
 800b170:	d80d      	bhi.n	800b18e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b172:	78fb      	ldrb	r3, [r7, #3]
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	33e0      	adds	r3, #224	@ 0xe0
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	4413      	add	r3, r2
 800b17c:	685a      	ldr	r2, [r3, #4]
 800b17e:	78fb      	ldrb	r3, [r7, #3]
 800b180:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b184:	6879      	ldr	r1, [r7, #4]
 800b186:	33e0      	adds	r3, #224	@ 0xe0
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	440b      	add	r3, r1
 800b18c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	73fb      	strb	r3, [r7, #15]
 800b1ac:	e00f      	b.n	800b1ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	33e0      	adds	r3, #224	@ 0xe0
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	4413      	add	r3, r2
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d102      	bne.n	800b1c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	e007      	b.n	800b1d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b1c8:	7bfb      	ldrb	r3, [r7, #15]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	73fb      	strb	r3, [r7, #15]
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
 800b1d0:	2b0f      	cmp	r3, #15
 800b1d2:	d9ec      	bls.n	800b1ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b1d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3714      	adds	r7, #20
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	490e      	ldr	r1, [pc, #56]	@ (800b224 <MX_USB_HOST_Init+0x40>)
 800b1ec:	480e      	ldr	r0, [pc, #56]	@ (800b228 <MX_USB_HOST_Init+0x44>)
 800b1ee:	f7fe fb15 	bl	800981c <USBH_Init>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b1f8:	f7f5 ff16 	bl	8001028 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b1fc:	490b      	ldr	r1, [pc, #44]	@ (800b22c <MX_USB_HOST_Init+0x48>)
 800b1fe:	480a      	ldr	r0, [pc, #40]	@ (800b228 <MX_USB_HOST_Init+0x44>)
 800b200:	f7fe fbb9 	bl	8009976 <USBH_RegisterClass>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b20a:	f7f5 ff0d 	bl	8001028 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b20e:	4806      	ldr	r0, [pc, #24]	@ (800b228 <MX_USB_HOST_Init+0x44>)
 800b210:	f7fe fc3d 	bl	8009a8e <USBH_Start>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d001      	beq.n	800b21e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b21a:	f7f5 ff05 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b21e:	bf00      	nop
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	0800b245 	.word	0x0800b245
 800b228:	200021a0 	.word	0x200021a0
 800b22c:	2000080c 	.word	0x2000080c

0800b230 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b234:	4802      	ldr	r0, [pc, #8]	@ (800b240 <MX_USB_HOST_Process+0x10>)
 800b236:	f7fe fc3b 	bl	8009ab0 <USBH_Process>
}
 800b23a:	bf00      	nop
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	200021a0 	.word	0x200021a0

0800b244 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	460b      	mov	r3, r1
 800b24e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b250:	78fb      	ldrb	r3, [r7, #3]
 800b252:	3b01      	subs	r3, #1
 800b254:	2b04      	cmp	r3, #4
 800b256:	d819      	bhi.n	800b28c <USBH_UserProcess+0x48>
 800b258:	a201      	add	r2, pc, #4	@ (adr r2, 800b260 <USBH_UserProcess+0x1c>)
 800b25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b25e:	bf00      	nop
 800b260:	0800b28d 	.word	0x0800b28d
 800b264:	0800b27d 	.word	0x0800b27d
 800b268:	0800b28d 	.word	0x0800b28d
 800b26c:	0800b285 	.word	0x0800b285
 800b270:	0800b275 	.word	0x0800b275
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b274:	4b09      	ldr	r3, [pc, #36]	@ (800b29c <USBH_UserProcess+0x58>)
 800b276:	2203      	movs	r2, #3
 800b278:	701a      	strb	r2, [r3, #0]
  break;
 800b27a:	e008      	b.n	800b28e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b27c:	4b07      	ldr	r3, [pc, #28]	@ (800b29c <USBH_UserProcess+0x58>)
 800b27e:	2202      	movs	r2, #2
 800b280:	701a      	strb	r2, [r3, #0]
  break;
 800b282:	e004      	b.n	800b28e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b284:	4b05      	ldr	r3, [pc, #20]	@ (800b29c <USBH_UserProcess+0x58>)
 800b286:	2201      	movs	r2, #1
 800b288:	701a      	strb	r2, [r3, #0]
  break;
 800b28a:	e000      	b.n	800b28e <USBH_UserProcess+0x4a>

  default:
  break;
 800b28c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b28e:	bf00      	nop
 800b290:	370c      	adds	r7, #12
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	20002578 	.word	0x20002578

0800b2a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b08a      	sub	sp, #40	@ 0x28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2a8:	f107 0314 	add.w	r3, r7, #20
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	601a      	str	r2, [r3, #0]
 800b2b0:	605a      	str	r2, [r3, #4]
 800b2b2:	609a      	str	r2, [r3, #8]
 800b2b4:	60da      	str	r2, [r3, #12]
 800b2b6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2c0:	d147      	bne.n	800b352 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	613b      	str	r3, [r7, #16]
 800b2c6:	4b25      	ldr	r3, [pc, #148]	@ (800b35c <HAL_HCD_MspInit+0xbc>)
 800b2c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ca:	4a24      	ldr	r2, [pc, #144]	@ (800b35c <HAL_HCD_MspInit+0xbc>)
 800b2cc:	f043 0301 	orr.w	r3, r3, #1
 800b2d0:	6313      	str	r3, [r2, #48]	@ 0x30
 800b2d2:	4b22      	ldr	r3, [pc, #136]	@ (800b35c <HAL_HCD_MspInit+0xbc>)
 800b2d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	613b      	str	r3, [r7, #16]
 800b2dc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b2de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b2ec:	f107 0314 	add.w	r3, r7, #20
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	481b      	ldr	r0, [pc, #108]	@ (800b360 <HAL_HCD_MspInit+0xc0>)
 800b2f4:	f7f7 fa42 	bl	800277c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b2f8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b2fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2fe:	2302      	movs	r3, #2
 800b300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b302:	2300      	movs	r3, #0
 800b304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b306:	2300      	movs	r3, #0
 800b308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b30a:	230a      	movs	r3, #10
 800b30c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b30e:	f107 0314 	add.w	r3, r7, #20
 800b312:	4619      	mov	r1, r3
 800b314:	4812      	ldr	r0, [pc, #72]	@ (800b360 <HAL_HCD_MspInit+0xc0>)
 800b316:	f7f7 fa31 	bl	800277c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b31a:	4b10      	ldr	r3, [pc, #64]	@ (800b35c <HAL_HCD_MspInit+0xbc>)
 800b31c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b31e:	4a0f      	ldr	r2, [pc, #60]	@ (800b35c <HAL_HCD_MspInit+0xbc>)
 800b320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b324:	6353      	str	r3, [r2, #52]	@ 0x34
 800b326:	2300      	movs	r3, #0
 800b328:	60fb      	str	r3, [r7, #12]
 800b32a:	4b0c      	ldr	r3, [pc, #48]	@ (800b35c <HAL_HCD_MspInit+0xbc>)
 800b32c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b32e:	4a0b      	ldr	r2, [pc, #44]	@ (800b35c <HAL_HCD_MspInit+0xbc>)
 800b330:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b334:	6453      	str	r3, [r2, #68]	@ 0x44
 800b336:	4b09      	ldr	r3, [pc, #36]	@ (800b35c <HAL_HCD_MspInit+0xbc>)
 800b338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b33a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b342:	2200      	movs	r2, #0
 800b344:	2100      	movs	r1, #0
 800b346:	2043      	movs	r0, #67	@ 0x43
 800b348:	f7f6 fe71 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b34c:	2043      	movs	r0, #67	@ 0x43
 800b34e:	f7f6 fe8a 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b352:	bf00      	nop
 800b354:	3728      	adds	r7, #40	@ 0x28
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	40023800 	.word	0x40023800
 800b360:	40020000 	.word	0x40020000

0800b364 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b372:	4618      	mov	r0, r3
 800b374:	f7fe ff73 	bl	800a25e <USBH_LL_IncTimer>
}
 800b378:	bf00      	nop
 800b37a:	3708      	adds	r7, #8
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fe ffab 	bl	800a2ea <USBH_LL_Connect>
}
 800b394:	bf00      	nop
 800b396:	3708      	adds	r7, #8
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fe ffb4 	bl	800a318 <USBH_LL_Disconnect>
}
 800b3b0:	bf00      	nop
 800b3b2:	3708      	adds	r7, #8
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	70fb      	strb	r3, [r7, #3]
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7fe ff65 	bl	800a2b2 <USBH_LL_PortEnabled>
}
 800b3e8:	bf00      	nop
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fe ff65 	bl	800a2ce <USBH_LL_PortDisabled>
}
 800b404:	bf00      	nop
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d12a      	bne.n	800b474 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b41e:	4a18      	ldr	r2, [pc, #96]	@ (800b480 <USBH_LL_Init+0x74>)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4a15      	ldr	r2, [pc, #84]	@ (800b480 <USBH_LL_Init+0x74>)
 800b42a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b42e:	4b14      	ldr	r3, [pc, #80]	@ (800b480 <USBH_LL_Init+0x74>)
 800b430:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b434:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b436:	4b12      	ldr	r3, [pc, #72]	@ (800b480 <USBH_LL_Init+0x74>)
 800b438:	2208      	movs	r2, #8
 800b43a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b43c:	4b10      	ldr	r3, [pc, #64]	@ (800b480 <USBH_LL_Init+0x74>)
 800b43e:	2201      	movs	r2, #1
 800b440:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b442:	4b0f      	ldr	r3, [pc, #60]	@ (800b480 <USBH_LL_Init+0x74>)
 800b444:	2200      	movs	r2, #0
 800b446:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b448:	4b0d      	ldr	r3, [pc, #52]	@ (800b480 <USBH_LL_Init+0x74>)
 800b44a:	2202      	movs	r2, #2
 800b44c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b44e:	4b0c      	ldr	r3, [pc, #48]	@ (800b480 <USBH_LL_Init+0x74>)
 800b450:	2200      	movs	r2, #0
 800b452:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b454:	480a      	ldr	r0, [pc, #40]	@ (800b480 <USBH_LL_Init+0x74>)
 800b456:	f7f7 fb46 	bl	8002ae6 <HAL_HCD_Init>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b460:	f7f5 fde2 	bl	8001028 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b464:	4806      	ldr	r0, [pc, #24]	@ (800b480 <USBH_LL_Init+0x74>)
 800b466:	f7f7 ffa7 	bl	80033b8 <HAL_HCD_GetCurrentFrame>
 800b46a:	4603      	mov	r3, r0
 800b46c:	4619      	mov	r1, r3
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7fe fee6 	bl	800a240 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	2000257c 	.word	0x2000257c

0800b484 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7f7 ff14 	bl	80032c8 <HAL_HCD_Start>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4a4:	7bfb      	ldrb	r3, [r7, #15]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 f95e 	bl	800b768 <USBH_Get_USB_Status>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b084      	sub	sp, #16
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7f7 ff1c 	bl	800330e <HAL_HCD_Stop>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f000 f943 	bl	800b768 <USBH_Get_USB_Status>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b502:	4618      	mov	r0, r3
 800b504:	f7f7 ff66 	bl	80033d4 <HAL_HCD_GetCurrentSpeed>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d00c      	beq.n	800b528 <USBH_LL_GetSpeed+0x38>
 800b50e:	2b02      	cmp	r3, #2
 800b510:	d80d      	bhi.n	800b52e <USBH_LL_GetSpeed+0x3e>
 800b512:	2b00      	cmp	r3, #0
 800b514:	d002      	beq.n	800b51c <USBH_LL_GetSpeed+0x2c>
 800b516:	2b01      	cmp	r3, #1
 800b518:	d003      	beq.n	800b522 <USBH_LL_GetSpeed+0x32>
 800b51a:	e008      	b.n	800b52e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b51c:	2300      	movs	r3, #0
 800b51e:	73fb      	strb	r3, [r7, #15]
    break;
 800b520:	e008      	b.n	800b534 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b522:	2301      	movs	r3, #1
 800b524:	73fb      	strb	r3, [r7, #15]
    break;
 800b526:	e005      	b.n	800b534 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b528:	2302      	movs	r3, #2
 800b52a:	73fb      	strb	r3, [r7, #15]
    break;
 800b52c:	e002      	b.n	800b534 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b52e:	2301      	movs	r3, #1
 800b530:	73fb      	strb	r3, [r7, #15]
    break;
 800b532:	bf00      	nop
  }
  return  speed;
 800b534:	7bfb      	ldrb	r3, [r7, #15]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b084      	sub	sp, #16
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b546:	2300      	movs	r3, #0
 800b548:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b54a:	2300      	movs	r3, #0
 800b54c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b554:	4618      	mov	r0, r3
 800b556:	f7f7 fef7 	bl	8003348 <HAL_HCD_ResetPort>
 800b55a:	4603      	mov	r3, r0
 800b55c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
 800b560:	4618      	mov	r0, r3
 800b562:	f000 f901 	bl	800b768 <USBH_Get_USB_Status>
 800b566:	4603      	mov	r3, r0
 800b568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b56a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	460b      	mov	r3, r1
 800b57e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b586:	78fa      	ldrb	r2, [r7, #3]
 800b588:	4611      	mov	r1, r2
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7f7 feff 	bl	800338e <HAL_HCD_HC_GetXferCount>
 800b590:	4603      	mov	r3, r0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b59a:	b590      	push	{r4, r7, lr}
 800b59c:	b089      	sub	sp, #36	@ 0x24
 800b59e:	af04      	add	r7, sp, #16
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	4608      	mov	r0, r1
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	70fb      	strb	r3, [r7, #3]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	70bb      	strb	r3, [r7, #2]
 800b5b0:	4613      	mov	r3, r2
 800b5b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b5c2:	787c      	ldrb	r4, [r7, #1]
 800b5c4:	78ba      	ldrb	r2, [r7, #2]
 800b5c6:	78f9      	ldrb	r1, [r7, #3]
 800b5c8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b5ca:	9302      	str	r3, [sp, #8]
 800b5cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b5d0:	9301      	str	r3, [sp, #4]
 800b5d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	4623      	mov	r3, r4
 800b5da:	f7f7 faeb 	bl	8002bb4 <HAL_HCD_HC_Init>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5e2:	7bfb      	ldrb	r3, [r7, #15]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 f8bf 	bl	800b768 <USBH_Get_USB_Status>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd90      	pop	{r4, r7, pc}

0800b5f8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	460b      	mov	r3, r1
 800b602:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b604:	2300      	movs	r3, #0
 800b606:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b608:	2300      	movs	r3, #0
 800b60a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b612:	78fa      	ldrb	r2, [r7, #3]
 800b614:	4611      	mov	r1, r2
 800b616:	4618      	mov	r0, r3
 800b618:	f7f7 fb84 	bl	8002d24 <HAL_HCD_HC_Halt>
 800b61c:	4603      	mov	r3, r0
 800b61e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b620:	7bfb      	ldrb	r3, [r7, #15]
 800b622:	4618      	mov	r0, r3
 800b624:	f000 f8a0 	bl	800b768 <USBH_Get_USB_Status>
 800b628:	4603      	mov	r3, r0
 800b62a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b62c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b636:	b590      	push	{r4, r7, lr}
 800b638:	b089      	sub	sp, #36	@ 0x24
 800b63a:	af04      	add	r7, sp, #16
 800b63c:	6078      	str	r0, [r7, #4]
 800b63e:	4608      	mov	r0, r1
 800b640:	4611      	mov	r1, r2
 800b642:	461a      	mov	r2, r3
 800b644:	4603      	mov	r3, r0
 800b646:	70fb      	strb	r3, [r7, #3]
 800b648:	460b      	mov	r3, r1
 800b64a:	70bb      	strb	r3, [r7, #2]
 800b64c:	4613      	mov	r3, r2
 800b64e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b650:	2300      	movs	r3, #0
 800b652:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b654:	2300      	movs	r3, #0
 800b656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b65e:	787c      	ldrb	r4, [r7, #1]
 800b660:	78ba      	ldrb	r2, [r7, #2]
 800b662:	78f9      	ldrb	r1, [r7, #3]
 800b664:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b668:	9303      	str	r3, [sp, #12]
 800b66a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b66c:	9302      	str	r3, [sp, #8]
 800b66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b670:	9301      	str	r3, [sp, #4]
 800b672:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b676:	9300      	str	r3, [sp, #0]
 800b678:	4623      	mov	r3, r4
 800b67a:	f7f7 fb77 	bl	8002d6c <HAL_HCD_HC_SubmitRequest>
 800b67e:	4603      	mov	r3, r0
 800b680:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b682:	7bfb      	ldrb	r3, [r7, #15]
 800b684:	4618      	mov	r0, r3
 800b686:	f000 f86f 	bl	800b768 <USBH_Get_USB_Status>
 800b68a:	4603      	mov	r3, r0
 800b68c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b68e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3714      	adds	r7, #20
 800b694:	46bd      	mov	sp, r7
 800b696:	bd90      	pop	{r4, r7, pc}

0800b698 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b6aa:	78fa      	ldrb	r2, [r7, #3]
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7f7 fe58 	bl	8003364 <HAL_HCD_HC_GetURBState>
 800b6b4:	4603      	mov	r3, r0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b082      	sub	sp, #8
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d103      	bne.n	800b6dc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b6d4:	78fb      	ldrb	r3, [r7, #3]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f000 f872 	bl	800b7c0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b6dc:	20c8      	movs	r0, #200	@ 0xc8
 800b6de:	f7f5 ff9f 	bl	8001620 <HAL_Delay>
  return USBH_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	70fb      	strb	r3, [r7, #3]
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b702:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b704:	78fa      	ldrb	r2, [r7, #3]
 800b706:	68f9      	ldr	r1, [r7, #12]
 800b708:	4613      	mov	r3, r2
 800b70a:	011b      	lsls	r3, r3, #4
 800b70c:	1a9b      	subs	r3, r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	440b      	add	r3, r1
 800b712:	3317      	adds	r3, #23
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00a      	beq.n	800b730 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b71a:	78fa      	ldrb	r2, [r7, #3]
 800b71c:	68f9      	ldr	r1, [r7, #12]
 800b71e:	4613      	mov	r3, r2
 800b720:	011b      	lsls	r3, r3, #4
 800b722:	1a9b      	subs	r3, r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	440b      	add	r3, r1
 800b728:	333c      	adds	r3, #60	@ 0x3c
 800b72a:	78ba      	ldrb	r2, [r7, #2]
 800b72c:	701a      	strb	r2, [r3, #0]
 800b72e:	e009      	b.n	800b744 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b730:	78fa      	ldrb	r2, [r7, #3]
 800b732:	68f9      	ldr	r1, [r7, #12]
 800b734:	4613      	mov	r3, r2
 800b736:	011b      	lsls	r3, r3, #4
 800b738:	1a9b      	subs	r3, r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	440b      	add	r3, r1
 800b73e:	333d      	adds	r3, #61	@ 0x3d
 800b740:	78ba      	ldrb	r2, [r7, #2]
 800b742:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3714      	adds	r7, #20
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b082      	sub	sp, #8
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7f5 ff60 	bl	8001620 <HAL_Delay>
}
 800b760:	bf00      	nop
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	4603      	mov	r3, r0
 800b770:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b776:	79fb      	ldrb	r3, [r7, #7]
 800b778:	2b03      	cmp	r3, #3
 800b77a:	d817      	bhi.n	800b7ac <USBH_Get_USB_Status+0x44>
 800b77c:	a201      	add	r2, pc, #4	@ (adr r2, 800b784 <USBH_Get_USB_Status+0x1c>)
 800b77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b782:	bf00      	nop
 800b784:	0800b795 	.word	0x0800b795
 800b788:	0800b79b 	.word	0x0800b79b
 800b78c:	0800b7a1 	.word	0x0800b7a1
 800b790:	0800b7a7 	.word	0x0800b7a7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b794:	2300      	movs	r3, #0
 800b796:	73fb      	strb	r3, [r7, #15]
    break;
 800b798:	e00b      	b.n	800b7b2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b79a:	2302      	movs	r3, #2
 800b79c:	73fb      	strb	r3, [r7, #15]
    break;
 800b79e:	e008      	b.n	800b7b2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b7a4:	e005      	b.n	800b7b2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b7a6:	2302      	movs	r3, #2
 800b7a8:	73fb      	strb	r3, [r7, #15]
    break;
 800b7aa:	e002      	b.n	800b7b2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b7b0:	bf00      	nop
  }
  return usb_status;
 800b7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b7ca:	79fb      	ldrb	r3, [r7, #7]
 800b7cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b7ce:	79fb      	ldrb	r3, [r7, #7]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d102      	bne.n	800b7da <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	73fb      	strb	r3, [r7, #15]
 800b7d8:	e001      	b.n	800b7de <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b7de:	7bfb      	ldrb	r3, [r7, #15]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	2101      	movs	r1, #1
 800b7e4:	4803      	ldr	r0, [pc, #12]	@ (800b7f4 <MX_DriverVbusFS+0x34>)
 800b7e6:	f7f7 f965 	bl	8002ab4 <HAL_GPIO_WritePin>
}
 800b7ea:	bf00      	nop
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	40020800 	.word	0x40020800

0800b7f8 <arm_float_to_q15>:
 800b7f8:	b4f0      	push	{r4, r5, r6, r7}
 800b7fa:	0897      	lsrs	r7, r2, #2
 800b7fc:	d06e      	beq.n	800b8dc <arm_float_to_q15+0xe4>
 800b7fe:	eddf 5a49 	vldr	s11, [pc, #292]	@ 800b924 <arm_float_to_q15+0x12c>
 800b802:	f100 0510 	add.w	r5, r0, #16
 800b806:	f101 0408 	add.w	r4, r1, #8
 800b80a:	463e      	mov	r6, r7
 800b80c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b810:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 800b814:	ed55 7a04 	vldr	s15, [r5, #-16]
 800b818:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b81c:	3510      	adds	r5, #16
 800b81e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b826:	bfd4      	ite	le
 800b828:	eef0 7a66 	vmovle.f32	s15, s13
 800b82c:	eef0 7a46 	vmovgt.f32	s15, s12
 800b830:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b834:	3408      	adds	r4, #8
 800b836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b83a:	ee17 3a90 	vmov	r3, s15
 800b83e:	f303 030f 	ssat	r3, #16, r3
 800b842:	f824 3c10 	strh.w	r3, [r4, #-16]
 800b846:	ed55 7a07 	vldr	s15, [r5, #-28]	@ 0xffffffe4
 800b84a:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b84e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b856:	bfd4      	ite	le
 800b858:	eef0 7a66 	vmovle.f32	s15, s13
 800b85c:	eef0 7a46 	vmovgt.f32	s15, s12
 800b860:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b864:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b868:	ee17 3a90 	vmov	r3, s15
 800b86c:	f303 030f 	ssat	r3, #16, r3
 800b870:	f824 3c0e 	strh.w	r3, [r4, #-14]
 800b874:	ed55 7a06 	vldr	s15, [r5, #-24]	@ 0xffffffe8
 800b878:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b87c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b884:	bfd4      	ite	le
 800b886:	eef0 7a66 	vmovle.f32	s15, s13
 800b88a:	eef0 7a46 	vmovgt.f32	s15, s12
 800b88e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b896:	ee17 3a90 	vmov	r3, s15
 800b89a:	f303 030f 	ssat	r3, #16, r3
 800b89e:	f824 3c0c 	strh.w	r3, [r4, #-12]
 800b8a2:	ed55 7a05 	vldr	s15, [r5, #-20]	@ 0xffffffec
 800b8a6:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b8aa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8b2:	bfd4      	ite	le
 800b8b4:	eef0 7a66 	vmovle.f32	s15, s13
 800b8b8:	eef0 7a46 	vmovgt.f32	s15, s12
 800b8bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b8c0:	3e01      	subs	r6, #1
 800b8c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8c6:	ee17 3a90 	vmov	r3, s15
 800b8ca:	f303 030f 	ssat	r3, #16, r3
 800b8ce:	f824 3c0a 	strh.w	r3, [r4, #-10]
 800b8d2:	d19f      	bne.n	800b814 <arm_float_to_q15+0x1c>
 800b8d4:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800b8d8:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800b8dc:	f012 0203 	ands.w	r2, r2, #3
 800b8e0:	d01e      	beq.n	800b920 <arm_float_to_q15+0x128>
 800b8e2:	eddf 5a10 	vldr	s11, [pc, #64]	@ 800b924 <arm_float_to_q15+0x12c>
 800b8e6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b8ea:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 800b8ee:	ecf0 7a01 	vldmia	r0!, {s15}
 800b8f2:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b8f6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8fe:	bfd4      	ite	le
 800b900:	eef0 7a66 	vmovle.f32	s15, s13
 800b904:	eef0 7a46 	vmovgt.f32	s15, s12
 800b908:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b90c:	3a01      	subs	r2, #1
 800b90e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b912:	ee17 3a90 	vmov	r3, s15
 800b916:	f303 030f 	ssat	r3, #16, r3
 800b91a:	f821 3b02 	strh.w	r3, [r1], #2
 800b91e:	d1e6      	bne.n	800b8ee <arm_float_to_q15+0xf6>
 800b920:	bcf0      	pop	{r4, r5, r6, r7}
 800b922:	4770      	bx	lr
 800b924:	47000000 	.word	0x47000000

0800b928 <arm_fir_q15>:
 800b928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b92c:	4605      	mov	r5, r0
 800b92e:	b095      	sub	sp, #84	@ 0x54
 800b930:	686c      	ldr	r4, [r5, #4]
 800b932:	9012      	str	r0, [sp, #72]	@ 0x48
 800b934:	8800      	ldrh	r0, [r0, #0]
 800b936:	940c      	str	r4, [sp, #48]	@ 0x30
 800b938:	4626      	mov	r6, r4
 800b93a:	f100 4c00 	add.w	ip, r0, #2147483648	@ 0x80000000
 800b93e:	68ac      	ldr	r4, [r5, #8]
 800b940:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b942:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b946:	461f      	mov	r7, r3
 800b948:	9408      	str	r4, [sp, #32]
 800b94a:	4623      	mov	r3, r4
 800b94c:	eb06 044c 	add.w	r4, r6, ip, lsl #1
 800b950:	4625      	mov	r5, r4
 800b952:	940d      	str	r4, [sp, #52]	@ 0x34
 800b954:	08bc      	lsrs	r4, r7, #2
 800b956:	9010      	str	r0, [sp, #64]	@ 0x40
 800b958:	910e      	str	r1, [sp, #56]	@ 0x38
 800b95a:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b95c:	4627      	mov	r7, r4
 800b95e:	9411      	str	r4, [sp, #68]	@ 0x44
 800b960:	f000 80c0 	beq.w	800bae4 <arm_fir_q15+0x1bc>
 800b964:	4604      	mov	r4, r0
 800b966:	0880      	lsrs	r0, r0, #2
 800b968:	9007      	str	r0, [sp, #28]
 800b96a:	00c0      	lsls	r0, r0, #3
 800b96c:	4403      	add	r3, r0
 800b96e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b970:	f004 0303 	and.w	r3, r4, #3
 800b974:	9309      	str	r3, [sp, #36]	@ 0x24
 800b976:	f105 0308 	add.w	r3, r5, #8
 800b97a:	9301      	str	r3, [sp, #4]
 800b97c:	460b      	mov	r3, r1
 800b97e:	3308      	adds	r3, #8
 800b980:	9302      	str	r3, [sp, #8]
 800b982:	4613      	mov	r3, r2
 800b984:	3308      	adds	r3, #8
 800b986:	9305      	str	r3, [sp, #20]
 800b988:	f106 0308 	add.w	r3, r6, #8
 800b98c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b98e:	9303      	str	r3, [sp, #12]
 800b990:	9704      	str	r7, [sp, #16]
 800b992:	9a02      	ldr	r2, [sp, #8]
 800b994:	9c01      	ldr	r4, [sp, #4]
 800b996:	f832 3c08 	ldrh.w	r3, [r2, #-8]
 800b99a:	f824 3c08 	strh.w	r3, [r4, #-8]
 800b99e:	f832 3c06 	ldrh.w	r3, [r2, #-6]
 800b9a2:	f824 3c06 	strh.w	r3, [r4, #-6]
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	9d07      	ldr	r5, [sp, #28]
 800b9aa:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 800b9ae:	f824 3c04 	strh.w	r3, [r4, #-4]
 800b9b2:	9a03      	ldr	r2, [sp, #12]
 800b9b4:	f831 3c02 	ldrh.w	r3, [r1, #-2]
 800b9b8:	f824 3c02 	strh.w	r3, [r4, #-2]
 800b9bc:	f852 0c08 	ldr.w	r0, [r2, #-8]
 800b9c0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	2d00      	cmp	r5, #0
 800b9ca:	f000 810e 	beq.w	800bbea <arm_fir_q15+0x2c2>
 800b9ce:	3308      	adds	r3, #8
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	9306      	str	r3, [sp, #24]
 800b9d4:	9908      	ldr	r1, [sp, #32]
 800b9d6:	9500      	str	r5, [sp, #0]
 800b9d8:	2300      	movs	r3, #0
 800b9da:	469c      	mov	ip, r3
 800b9dc:	4693      	mov	fp, r2
 800b9de:	461e      	mov	r6, r3
 800b9e0:	469e      	mov	lr, r3
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	461f      	mov	r7, r3
 800b9e6:	4698      	mov	r8, r3
 800b9e8:	f101 0a08 	add.w	sl, r1, #8
 800b9ec:	4665      	mov	r5, ip
 800b9ee:	f85a 1c08 	ldr.w	r1, [sl, #-8]
 800b9f2:	fbc0 85c1 	smlald	r8, r5, r0, r1
 800b9f6:	fbc4 cec1 	smlald	ip, lr, r4, r1
 800b9fa:	eac4 0900 	pkhbt	r9, r4, r0
 800b9fe:	f85b 0c08 	ldr.w	r0, [fp, #-8]
 800ba02:	fbc9 27d1 	smlaldx	r2, r7, r9, r1
 800ba06:	eac0 0904 	pkhbt	r9, r0, r4
 800ba0a:	fbc9 36d1 	smlaldx	r3, r6, r9, r1
 800ba0e:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 800ba12:	fbc4 85c1 	smlald	r8, r5, r4, r1
 800ba16:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 800ba1a:	fbc0 cec1 	smlald	ip, lr, r0, r1
 800ba1e:	fbc9 27d1 	smlaldx	r2, r7, r9, r1
 800ba22:	eac4 0900 	pkhbt	r9, r4, r0
 800ba26:	fbc9 36d1 	smlaldx	r3, r6, r9, r1
 800ba2a:	9900      	ldr	r1, [sp, #0]
 800ba2c:	3901      	subs	r1, #1
 800ba2e:	f10a 0a08 	add.w	sl, sl, #8
 800ba32:	f10b 0b08 	add.w	fp, fp, #8
 800ba36:	9100      	str	r1, [sp, #0]
 800ba38:	d1d9      	bne.n	800b9ee <arm_fir_q15+0xc6>
 800ba3a:	46c1      	mov	r9, r8
 800ba3c:	9903      	ldr	r1, [sp, #12]
 800ba3e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ba42:	46a8      	mov	r8, r5
 800ba44:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ba46:	4429      	add	r1, r5
 800ba48:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ba4a:	b175      	cbz	r5, 800ba6a <arm_fir_q15+0x142>
 800ba4c:	f8da 5000 	ldr.w	r5, [sl]
 800ba50:	fbc0 98c5 	smlald	r9, r8, r0, r5
 800ba54:	fbc4 cec5 	smlald	ip, lr, r4, r5
 800ba58:	eac4 0000 	pkhbt	r0, r4, r0
 800ba5c:	6809      	ldr	r1, [r1, #0]
 800ba5e:	fbc0 27d5 	smlaldx	r2, r7, r0, r5
 800ba62:	eac1 0404 	pkhbt	r4, r1, r4
 800ba66:	fbc4 36d5 	smlaldx	r3, r6, r4, r5
 800ba6a:	9805      	ldr	r0, [sp, #20]
 800ba6c:	ea4f 39d9 	mov.w	r9, r9, lsr #15
 800ba70:	0bd2      	lsrs	r2, r2, #15
 800ba72:	ea49 4948 	orr.w	r9, r9, r8, lsl #17
 800ba76:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
 800ba7a:	f309 090f 	ssat	r9, #16, r9
 800ba7e:	f302 020f 	ssat	r2, #16, r2
 800ba82:	eac9 4202 	pkhbt	r2, r9, r2, lsl #16
 800ba86:	f840 2c08 	str.w	r2, [r0, #-8]
 800ba8a:	9a01      	ldr	r2, [sp, #4]
 800ba8c:	ea4f 3cdc 	mov.w	ip, ip, lsr #15
 800ba90:	3208      	adds	r2, #8
 800ba92:	0bdb      	lsrs	r3, r3, #15
 800ba94:	ea4c 4c4e 	orr.w	ip, ip, lr, lsl #17
 800ba98:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 800ba9c:	f30c 0c0f 	ssat	ip, #16, ip
 800baa0:	9201      	str	r2, [sp, #4]
 800baa2:	f303 030f 	ssat	r3, #16, r3
 800baa6:	9a02      	ldr	r2, [sp, #8]
 800baa8:	eacc 4303 	pkhbt	r3, ip, r3, lsl #16
 800baac:	f840 3c04 	str.w	r3, [r0, #-4]
 800bab0:	f100 0308 	add.w	r3, r0, #8
 800bab4:	9305      	str	r3, [sp, #20]
 800bab6:	9b04      	ldr	r3, [sp, #16]
 800bab8:	3208      	adds	r2, #8
 800baba:	9202      	str	r2, [sp, #8]
 800babc:	3b01      	subs	r3, #1
 800babe:	9a06      	ldr	r2, [sp, #24]
 800bac0:	9203      	str	r2, [sp, #12]
 800bac2:	9304      	str	r3, [sp, #16]
 800bac4:	f47f af65 	bne.w	800b992 <arm_fir_q15+0x6a>
 800bac8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800baca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bacc:	00db      	lsls	r3, r3, #3
 800bace:	441a      	add	r2, r3
 800bad0:	920d      	str	r2, [sp, #52]	@ 0x34
 800bad2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bad4:	441a      	add	r2, r3
 800bad6:	920e      	str	r2, [sp, #56]	@ 0x38
 800bad8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bada:	441a      	add	r2, r3
 800badc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bade:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bae0:	441a      	add	r2, r3
 800bae2:	920c      	str	r2, [sp, #48]	@ 0x30
 800bae4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bae6:	f013 0303 	ands.w	r3, r3, #3
 800baea:	9302      	str	r3, [sp, #8]
 800baec:	d03f      	beq.n	800bb6e <arm_fir_q15+0x246>
 800baee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800baf0:	f1a2 0c02 	sub.w	ip, r2, #2
 800baf4:	9a08      	ldr	r2, [sp, #32]
 800baf6:	f102 0904 	add.w	r9, r2, #4
 800bafa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800bafc:	f8cd 9004 	str.w	r9, [sp, #4]
 800bb00:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800bb04:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bb06:	f8cd 8000 	str.w	r8, [sp]
 800bb0a:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
 800bb0e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 800bb12:	f102 0e04 	add.w	lr, r2, #4
 800bb16:	461f      	mov	r7, r3
 800bb18:	f838 3b02 	ldrh.w	r3, [r8], #2
 800bb1c:	9a01      	ldr	r2, [sp, #4]
 800bb1e:	9900      	ldr	r1, [sp, #0]
 800bb20:	f82c 3f02 	strh.w	r3, [ip, #2]!
 800bb24:	2400      	movs	r4, #0
 800bb26:	4673      	mov	r3, lr
 800bb28:	2500      	movs	r5, #0
 800bb2a:	f833 bc04 	ldrh.w	fp, [r3, #-4]
 800bb2e:	f832 ac04 	ldrh.w	sl, [r2, #-4]
 800bb32:	f833 6c02 	ldrh.w	r6, [r3, #-2]
 800bb36:	f832 0c02 	ldrh.w	r0, [r2, #-2]
 800bb3a:	fbcb 458a 	smlalbb	r4, r5, fp, sl
 800bb3e:	3901      	subs	r1, #1
 800bb40:	f103 0304 	add.w	r3, r3, #4
 800bb44:	fbc6 4580 	smlalbb	r4, r5, r6, r0
 800bb48:	f102 0204 	add.w	r2, r2, #4
 800bb4c:	d1ed      	bne.n	800bb2a <arm_fir_q15+0x202>
 800bb4e:	0be3      	lsrs	r3, r4, #15
 800bb50:	3f01      	subs	r7, #1
 800bb52:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
 800bb56:	f10e 0e02 	add.w	lr, lr, #2
 800bb5a:	f303 030f 	ssat	r3, #16, r3
 800bb5e:	f829 3b02 	strh.w	r3, [r9], #2
 800bb62:	d1d9      	bne.n	800bb18 <arm_fir_q15+0x1f0>
 800bb64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb66:	9a02      	ldr	r2, [sp, #8]
 800bb68:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800bb6c:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb70:	1e5f      	subs	r7, r3, #1
 800bb72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb74:	08bd      	lsrs	r5, r7, #2
 800bb76:	685e      	ldr	r6, [r3, #4]
 800bb78:	d029      	beq.n	800bbce <arm_fir_q15+0x2a6>
 800bb7a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	3310      	adds	r3, #16
 800bb80:	f106 0210 	add.w	r2, r6, #16
 800bb84:	4290      	cmp	r0, r2
 800bb86:	bf38      	it	cc
 800bb88:	429e      	cmpcc	r6, r3
 800bb8a:	bf2c      	ite	cs
 800bb8c:	2301      	movcs	r3, #1
 800bb8e:	2300      	movcc	r3, #0
 800bb90:	2d06      	cmp	r5, #6
 800bb92:	bf94      	ite	ls
 800bb94:	2300      	movls	r3, #0
 800bb96:	f003 0301 	andhi.w	r3, r3, #1
 800bb9a:	b3a3      	cbz	r3, 800bc06 <arm_fir_q15+0x2de>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	4333      	orrs	r3, r6
 800bba0:	079b      	lsls	r3, r3, #30
 800bba2:	d130      	bne.n	800bc06 <arm_fir_q15+0x2de>
 800bba4:	f100 0208 	add.w	r2, r0, #8
 800bba8:	f106 0308 	add.w	r3, r6, #8
 800bbac:	2100      	movs	r1, #0
 800bbae:	e912 0011 	ldmdb	r2, {r0, r4}
 800bbb2:	3101      	adds	r1, #1
 800bbb4:	42a9      	cmp	r1, r5
 800bbb6:	e903 0011 	stmdb	r3, {r0, r4}
 800bbba:	f102 0208 	add.w	r2, r2, #8
 800bbbe:	f103 0308 	add.w	r3, r3, #8
 800bbc2:	d1f4      	bne.n	800bbae <arm_fir_q15+0x286>
 800bbc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbc6:	00ed      	lsls	r5, r5, #3
 800bbc8:	442b      	add	r3, r5
 800bbca:	442e      	add	r6, r5
 800bbcc:	930c      	str	r3, [sp, #48]	@ 0x30
 800bbce:	f017 0303 	ands.w	r3, r7, #3
 800bbd2:	d007      	beq.n	800bbe4 <arm_fir_q15+0x2bc>
 800bbd4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bbd6:	3e02      	subs	r6, #2
 800bbd8:	f832 1b02 	ldrh.w	r1, [r2], #2
 800bbdc:	f826 1f02 	strh.w	r1, [r6, #2]!
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	d1f9      	bne.n	800bbd8 <arm_fir_q15+0x2b0>
 800bbe4:	b015      	add	sp, #84	@ 0x54
 800bbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbea:	46a8      	mov	r8, r5
 800bbec:	462b      	mov	r3, r5
 800bbee:	462e      	mov	r6, r5
 800bbf0:	46ac      	mov	ip, r5
 800bbf2:	46ae      	mov	lr, r5
 800bbf4:	462a      	mov	r2, r5
 800bbf6:	462f      	mov	r7, r5
 800bbf8:	46a9      	mov	r9, r5
 800bbfa:	f101 0508 	add.w	r5, r1, #8
 800bbfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bc02:	9506      	str	r5, [sp, #24]
 800bc04:	e720      	b.n	800ba48 <arm_fir_q15+0x120>
 800bc06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc08:	f106 0208 	add.w	r2, r6, #8
 800bc0c:	3308      	adds	r3, #8
 800bc0e:	4629      	mov	r1, r5
 800bc10:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800bc14:	f822 0c08 	strh.w	r0, [r2, #-8]
 800bc18:	f833 0c06 	ldrh.w	r0, [r3, #-6]
 800bc1c:	f822 0c06 	strh.w	r0, [r2, #-6]
 800bc20:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 800bc24:	f822 0c04 	strh.w	r0, [r2, #-4]
 800bc28:	f833 0c02 	ldrh.w	r0, [r3, #-2]
 800bc2c:	f822 0c02 	strh.w	r0, [r2, #-2]
 800bc30:	3901      	subs	r1, #1
 800bc32:	f103 0308 	add.w	r3, r3, #8
 800bc36:	f102 0208 	add.w	r2, r2, #8
 800bc3a:	d1e9      	bne.n	800bc10 <arm_fir_q15+0x2e8>
 800bc3c:	e7c2      	b.n	800bbc4 <arm_fir_q15+0x29c>
 800bc3e:	bf00      	nop

0800bc40 <arm_fir_init_q15>:
 800bc40:	b570      	push	{r4, r5, r6, lr}
 800bc42:	f011 0401 	ands.w	r4, r1, #1
 800bc46:	d10f      	bne.n	800bc68 <arm_fir_init_q15+0x28>
 800bc48:	461e      	mov	r6, r3
 800bc4a:	9b04      	ldr	r3, [sp, #16]
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	4610      	mov	r0, r2
 800bc50:	18ca      	adds	r2, r1, r3
 800bc52:	8029      	strh	r1, [r5, #0]
 800bc54:	60a8      	str	r0, [r5, #8]
 800bc56:	0052      	lsls	r2, r2, #1
 800bc58:	4630      	mov	r0, r6
 800bc5a:	4621      	mov	r1, r4
 800bc5c:	f000 f8c4 	bl	800bde8 <memset>
 800bc60:	606e      	str	r6, [r5, #4]
 800bc62:	4620      	mov	r0, r4
 800bc64:	b240      	sxtb	r0, r0
 800bc66:	bd70      	pop	{r4, r5, r6, pc}
 800bc68:	20ff      	movs	r0, #255	@ 0xff
 800bc6a:	e7fb      	b.n	800bc64 <arm_fir_init_q15+0x24>

0800bc6c <malloc>:
 800bc6c:	4b02      	ldr	r3, [pc, #8]	@ (800bc78 <malloc+0xc>)
 800bc6e:	4601      	mov	r1, r0
 800bc70:	6818      	ldr	r0, [r3, #0]
 800bc72:	f000 b82d 	b.w	800bcd0 <_malloc_r>
 800bc76:	bf00      	nop
 800bc78:	2000082c 	.word	0x2000082c

0800bc7c <free>:
 800bc7c:	4b02      	ldr	r3, [pc, #8]	@ (800bc88 <free+0xc>)
 800bc7e:	4601      	mov	r1, r0
 800bc80:	6818      	ldr	r0, [r3, #0]
 800bc82:	f000 b8f5 	b.w	800be70 <_free_r>
 800bc86:	bf00      	nop
 800bc88:	2000082c 	.word	0x2000082c

0800bc8c <sbrk_aligned>:
 800bc8c:	b570      	push	{r4, r5, r6, lr}
 800bc8e:	4e0f      	ldr	r6, [pc, #60]	@ (800bccc <sbrk_aligned+0x40>)
 800bc90:	460c      	mov	r4, r1
 800bc92:	6831      	ldr	r1, [r6, #0]
 800bc94:	4605      	mov	r5, r0
 800bc96:	b911      	cbnz	r1, 800bc9e <sbrk_aligned+0x12>
 800bc98:	f000 f8ae 	bl	800bdf8 <_sbrk_r>
 800bc9c:	6030      	str	r0, [r6, #0]
 800bc9e:	4621      	mov	r1, r4
 800bca0:	4628      	mov	r0, r5
 800bca2:	f000 f8a9 	bl	800bdf8 <_sbrk_r>
 800bca6:	1c43      	adds	r3, r0, #1
 800bca8:	d103      	bne.n	800bcb2 <sbrk_aligned+0x26>
 800bcaa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bcae:	4620      	mov	r0, r4
 800bcb0:	bd70      	pop	{r4, r5, r6, pc}
 800bcb2:	1cc4      	adds	r4, r0, #3
 800bcb4:	f024 0403 	bic.w	r4, r4, #3
 800bcb8:	42a0      	cmp	r0, r4
 800bcba:	d0f8      	beq.n	800bcae <sbrk_aligned+0x22>
 800bcbc:	1a21      	subs	r1, r4, r0
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	f000 f89a 	bl	800bdf8 <_sbrk_r>
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	d1f2      	bne.n	800bcae <sbrk_aligned+0x22>
 800bcc8:	e7ef      	b.n	800bcaa <sbrk_aligned+0x1e>
 800bcca:	bf00      	nop
 800bccc:	2000295c 	.word	0x2000295c

0800bcd0 <_malloc_r>:
 800bcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcd4:	1ccd      	adds	r5, r1, #3
 800bcd6:	f025 0503 	bic.w	r5, r5, #3
 800bcda:	3508      	adds	r5, #8
 800bcdc:	2d0c      	cmp	r5, #12
 800bcde:	bf38      	it	cc
 800bce0:	250c      	movcc	r5, #12
 800bce2:	2d00      	cmp	r5, #0
 800bce4:	4606      	mov	r6, r0
 800bce6:	db01      	blt.n	800bcec <_malloc_r+0x1c>
 800bce8:	42a9      	cmp	r1, r5
 800bcea:	d904      	bls.n	800bcf6 <_malloc_r+0x26>
 800bcec:	230c      	movs	r3, #12
 800bcee:	6033      	str	r3, [r6, #0]
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bdcc <_malloc_r+0xfc>
 800bcfa:	f000 f869 	bl	800bdd0 <__malloc_lock>
 800bcfe:	f8d8 3000 	ldr.w	r3, [r8]
 800bd02:	461c      	mov	r4, r3
 800bd04:	bb44      	cbnz	r4, 800bd58 <_malloc_r+0x88>
 800bd06:	4629      	mov	r1, r5
 800bd08:	4630      	mov	r0, r6
 800bd0a:	f7ff ffbf 	bl	800bc8c <sbrk_aligned>
 800bd0e:	1c43      	adds	r3, r0, #1
 800bd10:	4604      	mov	r4, r0
 800bd12:	d158      	bne.n	800bdc6 <_malloc_r+0xf6>
 800bd14:	f8d8 4000 	ldr.w	r4, [r8]
 800bd18:	4627      	mov	r7, r4
 800bd1a:	2f00      	cmp	r7, #0
 800bd1c:	d143      	bne.n	800bda6 <_malloc_r+0xd6>
 800bd1e:	2c00      	cmp	r4, #0
 800bd20:	d04b      	beq.n	800bdba <_malloc_r+0xea>
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	4639      	mov	r1, r7
 800bd26:	4630      	mov	r0, r6
 800bd28:	eb04 0903 	add.w	r9, r4, r3
 800bd2c:	f000 f864 	bl	800bdf8 <_sbrk_r>
 800bd30:	4581      	cmp	r9, r0
 800bd32:	d142      	bne.n	800bdba <_malloc_r+0xea>
 800bd34:	6821      	ldr	r1, [r4, #0]
 800bd36:	1a6d      	subs	r5, r5, r1
 800bd38:	4629      	mov	r1, r5
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f7ff ffa6 	bl	800bc8c <sbrk_aligned>
 800bd40:	3001      	adds	r0, #1
 800bd42:	d03a      	beq.n	800bdba <_malloc_r+0xea>
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	442b      	add	r3, r5
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	f8d8 3000 	ldr.w	r3, [r8]
 800bd4e:	685a      	ldr	r2, [r3, #4]
 800bd50:	bb62      	cbnz	r2, 800bdac <_malloc_r+0xdc>
 800bd52:	f8c8 7000 	str.w	r7, [r8]
 800bd56:	e00f      	b.n	800bd78 <_malloc_r+0xa8>
 800bd58:	6822      	ldr	r2, [r4, #0]
 800bd5a:	1b52      	subs	r2, r2, r5
 800bd5c:	d420      	bmi.n	800bda0 <_malloc_r+0xd0>
 800bd5e:	2a0b      	cmp	r2, #11
 800bd60:	d917      	bls.n	800bd92 <_malloc_r+0xc2>
 800bd62:	1961      	adds	r1, r4, r5
 800bd64:	42a3      	cmp	r3, r4
 800bd66:	6025      	str	r5, [r4, #0]
 800bd68:	bf18      	it	ne
 800bd6a:	6059      	strne	r1, [r3, #4]
 800bd6c:	6863      	ldr	r3, [r4, #4]
 800bd6e:	bf08      	it	eq
 800bd70:	f8c8 1000 	streq.w	r1, [r8]
 800bd74:	5162      	str	r2, [r4, r5]
 800bd76:	604b      	str	r3, [r1, #4]
 800bd78:	4630      	mov	r0, r6
 800bd7a:	f000 f82f 	bl	800bddc <__malloc_unlock>
 800bd7e:	f104 000b 	add.w	r0, r4, #11
 800bd82:	1d23      	adds	r3, r4, #4
 800bd84:	f020 0007 	bic.w	r0, r0, #7
 800bd88:	1ac2      	subs	r2, r0, r3
 800bd8a:	bf1c      	itt	ne
 800bd8c:	1a1b      	subne	r3, r3, r0
 800bd8e:	50a3      	strne	r3, [r4, r2]
 800bd90:	e7af      	b.n	800bcf2 <_malloc_r+0x22>
 800bd92:	6862      	ldr	r2, [r4, #4]
 800bd94:	42a3      	cmp	r3, r4
 800bd96:	bf0c      	ite	eq
 800bd98:	f8c8 2000 	streq.w	r2, [r8]
 800bd9c:	605a      	strne	r2, [r3, #4]
 800bd9e:	e7eb      	b.n	800bd78 <_malloc_r+0xa8>
 800bda0:	4623      	mov	r3, r4
 800bda2:	6864      	ldr	r4, [r4, #4]
 800bda4:	e7ae      	b.n	800bd04 <_malloc_r+0x34>
 800bda6:	463c      	mov	r4, r7
 800bda8:	687f      	ldr	r7, [r7, #4]
 800bdaa:	e7b6      	b.n	800bd1a <_malloc_r+0x4a>
 800bdac:	461a      	mov	r2, r3
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	42a3      	cmp	r3, r4
 800bdb2:	d1fb      	bne.n	800bdac <_malloc_r+0xdc>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	6053      	str	r3, [r2, #4]
 800bdb8:	e7de      	b.n	800bd78 <_malloc_r+0xa8>
 800bdba:	230c      	movs	r3, #12
 800bdbc:	6033      	str	r3, [r6, #0]
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	f000 f80c 	bl	800bddc <__malloc_unlock>
 800bdc4:	e794      	b.n	800bcf0 <_malloc_r+0x20>
 800bdc6:	6005      	str	r5, [r0, #0]
 800bdc8:	e7d6      	b.n	800bd78 <_malloc_r+0xa8>
 800bdca:	bf00      	nop
 800bdcc:	20002960 	.word	0x20002960

0800bdd0 <__malloc_lock>:
 800bdd0:	4801      	ldr	r0, [pc, #4]	@ (800bdd8 <__malloc_lock+0x8>)
 800bdd2:	f000 b84b 	b.w	800be6c <__retarget_lock_acquire_recursive>
 800bdd6:	bf00      	nop
 800bdd8:	20002aa0 	.word	0x20002aa0

0800bddc <__malloc_unlock>:
 800bddc:	4801      	ldr	r0, [pc, #4]	@ (800bde4 <__malloc_unlock+0x8>)
 800bdde:	f000 b846 	b.w	800be6e <__retarget_lock_release_recursive>
 800bde2:	bf00      	nop
 800bde4:	20002aa0 	.word	0x20002aa0

0800bde8 <memset>:
 800bde8:	4402      	add	r2, r0
 800bdea:	4603      	mov	r3, r0
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d100      	bne.n	800bdf2 <memset+0xa>
 800bdf0:	4770      	bx	lr
 800bdf2:	f803 1b01 	strb.w	r1, [r3], #1
 800bdf6:	e7f9      	b.n	800bdec <memset+0x4>

0800bdf8 <_sbrk_r>:
 800bdf8:	b538      	push	{r3, r4, r5, lr}
 800bdfa:	4d06      	ldr	r5, [pc, #24]	@ (800be14 <_sbrk_r+0x1c>)
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	4604      	mov	r4, r0
 800be00:	4608      	mov	r0, r1
 800be02:	602b      	str	r3, [r5, #0]
 800be04:	f7f5 fa14 	bl	8001230 <_sbrk>
 800be08:	1c43      	adds	r3, r0, #1
 800be0a:	d102      	bne.n	800be12 <_sbrk_r+0x1a>
 800be0c:	682b      	ldr	r3, [r5, #0]
 800be0e:	b103      	cbz	r3, 800be12 <_sbrk_r+0x1a>
 800be10:	6023      	str	r3, [r4, #0]
 800be12:	bd38      	pop	{r3, r4, r5, pc}
 800be14:	20002a9c 	.word	0x20002a9c

0800be18 <__errno>:
 800be18:	4b01      	ldr	r3, [pc, #4]	@ (800be20 <__errno+0x8>)
 800be1a:	6818      	ldr	r0, [r3, #0]
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop
 800be20:	2000082c 	.word	0x2000082c

0800be24 <__libc_init_array>:
 800be24:	b570      	push	{r4, r5, r6, lr}
 800be26:	4d0d      	ldr	r5, [pc, #52]	@ (800be5c <__libc_init_array+0x38>)
 800be28:	4c0d      	ldr	r4, [pc, #52]	@ (800be60 <__libc_init_array+0x3c>)
 800be2a:	1b64      	subs	r4, r4, r5
 800be2c:	10a4      	asrs	r4, r4, #2
 800be2e:	2600      	movs	r6, #0
 800be30:	42a6      	cmp	r6, r4
 800be32:	d109      	bne.n	800be48 <__libc_init_array+0x24>
 800be34:	4d0b      	ldr	r5, [pc, #44]	@ (800be64 <__libc_init_array+0x40>)
 800be36:	4c0c      	ldr	r4, [pc, #48]	@ (800be68 <__libc_init_array+0x44>)
 800be38:	f000 f864 	bl	800bf04 <_init>
 800be3c:	1b64      	subs	r4, r4, r5
 800be3e:	10a4      	asrs	r4, r4, #2
 800be40:	2600      	movs	r6, #0
 800be42:	42a6      	cmp	r6, r4
 800be44:	d105      	bne.n	800be52 <__libc_init_array+0x2e>
 800be46:	bd70      	pop	{r4, r5, r6, pc}
 800be48:	f855 3b04 	ldr.w	r3, [r5], #4
 800be4c:	4798      	blx	r3
 800be4e:	3601      	adds	r6, #1
 800be50:	e7ee      	b.n	800be30 <__libc_init_array+0xc>
 800be52:	f855 3b04 	ldr.w	r3, [r5], #4
 800be56:	4798      	blx	r3
 800be58:	3601      	adds	r6, #1
 800be5a:	e7f2      	b.n	800be42 <__libc_init_array+0x1e>
 800be5c:	0800bf48 	.word	0x0800bf48
 800be60:	0800bf48 	.word	0x0800bf48
 800be64:	0800bf48 	.word	0x0800bf48
 800be68:	0800bf4c 	.word	0x0800bf4c

0800be6c <__retarget_lock_acquire_recursive>:
 800be6c:	4770      	bx	lr

0800be6e <__retarget_lock_release_recursive>:
 800be6e:	4770      	bx	lr

0800be70 <_free_r>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	4605      	mov	r5, r0
 800be74:	2900      	cmp	r1, #0
 800be76:	d041      	beq.n	800befc <_free_r+0x8c>
 800be78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be7c:	1f0c      	subs	r4, r1, #4
 800be7e:	2b00      	cmp	r3, #0
 800be80:	bfb8      	it	lt
 800be82:	18e4      	addlt	r4, r4, r3
 800be84:	f7ff ffa4 	bl	800bdd0 <__malloc_lock>
 800be88:	4a1d      	ldr	r2, [pc, #116]	@ (800bf00 <_free_r+0x90>)
 800be8a:	6813      	ldr	r3, [r2, #0]
 800be8c:	b933      	cbnz	r3, 800be9c <_free_r+0x2c>
 800be8e:	6063      	str	r3, [r4, #4]
 800be90:	6014      	str	r4, [r2, #0]
 800be92:	4628      	mov	r0, r5
 800be94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be98:	f7ff bfa0 	b.w	800bddc <__malloc_unlock>
 800be9c:	42a3      	cmp	r3, r4
 800be9e:	d908      	bls.n	800beb2 <_free_r+0x42>
 800bea0:	6820      	ldr	r0, [r4, #0]
 800bea2:	1821      	adds	r1, r4, r0
 800bea4:	428b      	cmp	r3, r1
 800bea6:	bf01      	itttt	eq
 800bea8:	6819      	ldreq	r1, [r3, #0]
 800beaa:	685b      	ldreq	r3, [r3, #4]
 800beac:	1809      	addeq	r1, r1, r0
 800beae:	6021      	streq	r1, [r4, #0]
 800beb0:	e7ed      	b.n	800be8e <_free_r+0x1e>
 800beb2:	461a      	mov	r2, r3
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	b10b      	cbz	r3, 800bebc <_free_r+0x4c>
 800beb8:	42a3      	cmp	r3, r4
 800beba:	d9fa      	bls.n	800beb2 <_free_r+0x42>
 800bebc:	6811      	ldr	r1, [r2, #0]
 800bebe:	1850      	adds	r0, r2, r1
 800bec0:	42a0      	cmp	r0, r4
 800bec2:	d10b      	bne.n	800bedc <_free_r+0x6c>
 800bec4:	6820      	ldr	r0, [r4, #0]
 800bec6:	4401      	add	r1, r0
 800bec8:	1850      	adds	r0, r2, r1
 800beca:	4283      	cmp	r3, r0
 800becc:	6011      	str	r1, [r2, #0]
 800bece:	d1e0      	bne.n	800be92 <_free_r+0x22>
 800bed0:	6818      	ldr	r0, [r3, #0]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	6053      	str	r3, [r2, #4]
 800bed6:	4408      	add	r0, r1
 800bed8:	6010      	str	r0, [r2, #0]
 800beda:	e7da      	b.n	800be92 <_free_r+0x22>
 800bedc:	d902      	bls.n	800bee4 <_free_r+0x74>
 800bede:	230c      	movs	r3, #12
 800bee0:	602b      	str	r3, [r5, #0]
 800bee2:	e7d6      	b.n	800be92 <_free_r+0x22>
 800bee4:	6820      	ldr	r0, [r4, #0]
 800bee6:	1821      	adds	r1, r4, r0
 800bee8:	428b      	cmp	r3, r1
 800beea:	bf04      	itt	eq
 800beec:	6819      	ldreq	r1, [r3, #0]
 800beee:	685b      	ldreq	r3, [r3, #4]
 800bef0:	6063      	str	r3, [r4, #4]
 800bef2:	bf04      	itt	eq
 800bef4:	1809      	addeq	r1, r1, r0
 800bef6:	6021      	streq	r1, [r4, #0]
 800bef8:	6054      	str	r4, [r2, #4]
 800befa:	e7ca      	b.n	800be92 <_free_r+0x22>
 800befc:	bd38      	pop	{r3, r4, r5, pc}
 800befe:	bf00      	nop
 800bf00:	20002960 	.word	0x20002960

0800bf04 <_init>:
 800bf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf06:	bf00      	nop
 800bf08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf0a:	bc08      	pop	{r3}
 800bf0c:	469e      	mov	lr, r3
 800bf0e:	4770      	bx	lr

0800bf10 <_fini>:
 800bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf12:	bf00      	nop
 800bf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf16:	bc08      	pop	{r3}
 800bf18:	469e      	mov	lr, r3
 800bf1a:	4770      	bx	lr
