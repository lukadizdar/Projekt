
Projekt_DOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08008a60  08008a60  00009a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d30  08008d30  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008d30  08008d30  00009d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d38  08008d38  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d38  08008d38  00009d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d3c  08008d3c  00009d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008d40  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a068  2**0
                  CONTENTS
 10 .bss          00000798  20000068  20000068  0000a068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000800  20000800  0000a068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ab8  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d08  00000000  00000000  00021b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  00025858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f0  00000000  00000000  00026e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025106  00000000  00000000  00027f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c476  00000000  00000000  0004d046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d54a3  00000000  00000000  000694bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e95f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000696c  00000000  00000000  0013e9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00145310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a48 	.word	0x08008a48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08008a48 	.word	0x08008a48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <init_AudioReset>:
#include "i2s.h"
#include "spi.h"
#include "usb_host.h"
#include "gpio.h"
#include "audio.h"
void init_AudioReset() {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2110      	movs	r1, #16
 8000f04:	4802      	ldr	r0, [pc, #8]	@ (8000f10 <init_AudioReset+0x14>)
 8000f06:	f001 f98f 	bl	8002228 <HAL_GPIO_WritePin>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40020c00 	.word	0x40020c00

08000f14 <configAudio>:
void configAudio() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af02      	add	r7, sp, #8
    uint8_t bytes[2];
    init_AudioReset();
 8000f1a:	f7ff ffef 	bl	8000efc <init_AudioReset>

    /* Power sequence */
    // Set Power Control Register to "on" state
    bytes[0] = 0x02;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x01;
 8000f22:	2301      	movs	r3, #1
 8000f24:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f26:	1d3a      	adds	r2, r7, #4
 8000f28:	2364      	movs	r3, #100	@ 0x64
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	2194      	movs	r1, #148	@ 0x94
 8000f30:	486f      	ldr	r0, [pc, #444]	@ (80010f0 <configAudio+0x1dc>)
 8000f32:	f003 f87d 	bl	8004030 <HAL_I2C_Master_Transmit>

    /* Initialization sequence */
    bytes[0] = 0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x99;
 8000f3a:	2399      	movs	r3, #153	@ 0x99
 8000f3c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f3e:	1d3a      	adds	r2, r7, #4
 8000f40:	2364      	movs	r3, #100	@ 0x64
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2302      	movs	r3, #2
 8000f46:	2194      	movs	r1, #148	@ 0x94
 8000f48:	4869      	ldr	r0, [pc, #420]	@ (80010f0 <configAudio+0x1dc>)
 8000f4a:	f003 f871 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x47;
 8000f4e:	2347      	movs	r3, #71	@ 0x47
 8000f50:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f56:	1d3a      	adds	r2, r7, #4
 8000f58:	2364      	movs	r3, #100	@ 0x64
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	2194      	movs	r1, #148	@ 0x94
 8000f60:	4863      	ldr	r0, [pc, #396]	@ (80010f0 <configAudio+0x1dc>)
 8000f62:	f003 f865 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 8000f66:	2332      	movs	r3, #50	@ 0x32
 8000f68:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x80;
 8000f6a:	2380      	movs	r3, #128	@ 0x80
 8000f6c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f6e:	1d3a      	adds	r2, r7, #4
 8000f70:	2364      	movs	r3, #100	@ 0x64
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2302      	movs	r3, #2
 8000f76:	2194      	movs	r1, #148	@ 0x94
 8000f78:	485d      	ldr	r0, [pc, #372]	@ (80010f0 <configAudio+0x1dc>)
 8000f7a:	f003 f859 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x32;
 8000f7e:	2332      	movs	r3, #50	@ 0x32
 8000f80:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f86:	1d3a      	adds	r2, r7, #4
 8000f88:	2364      	movs	r3, #100	@ 0x64
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	2194      	movs	r1, #148	@ 0x94
 8000f90:	4857      	ldr	r0, [pc, #348]	@ (80010f0 <configAudio+0x1dc>)
 8000f92:	f003 f84d 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000f9e:	1d3a      	adds	r2, r7, #4
 8000fa0:	2364      	movs	r3, #100	@ 0x64
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	2194      	movs	r1, #148	@ 0x94
 8000fa8:	4851      	ldr	r0, [pc, #324]	@ (80010f0 <configAudio+0x1dc>)
 8000faa:	f003 f841 	bl	8004030 <HAL_I2C_Master_Transmit>

    /* Ctl registers configuration */
    bytes[0] = 0x04;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xAF;
 8000fb2:	23af      	movs	r3, #175	@ 0xaf
 8000fb4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000fb6:	1d3a      	adds	r2, r7, #4
 8000fb8:	2364      	movs	r3, #100	@ 0x64
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	2194      	movs	r1, #148	@ 0x94
 8000fc0:	484b      	ldr	r0, [pc, #300]	@ (80010f0 <configAudio+0x1dc>)
 8000fc2:	f003 f835 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0D;
 8000fc6:	230d      	movs	r3, #13
 8000fc8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x70;
 8000fca:	2370      	movs	r3, #112	@ 0x70
 8000fcc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000fce:	1d3a      	adds	r2, r7, #4
 8000fd0:	2364      	movs	r3, #100	@ 0x64
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	2194      	movs	r1, #148	@ 0x94
 8000fd8:	4845      	ldr	r0, [pc, #276]	@ (80010f0 <configAudio+0x1dc>)
 8000fda:	f003 f829 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x05;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x81;
 8000fe2:	2381      	movs	r3, #129	@ 0x81
 8000fe4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000fe6:	1d3a      	adds	r2, r7, #4
 8000fe8:	2364      	movs	r3, #100	@ 0x64
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2302      	movs	r3, #2
 8000fee:	2194      	movs	r1, #148	@ 0x94
 8000ff0:	483f      	ldr	r0, [pc, #252]	@ (80010f0 <configAudio+0x1dc>)
 8000ff2:	f003 f81d 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x06;
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x07;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8000ffe:	1d3a      	adds	r2, r7, #4
 8001000:	2364      	movs	r3, #100	@ 0x64
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2302      	movs	r3, #2
 8001006:	2194      	movs	r1, #148	@ 0x94
 8001008:	4839      	ldr	r0, [pc, #228]	@ (80010f0 <configAudio+0x1dc>)
 800100a:	f003 f811 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x0A;
 800100e:	230a      	movs	r3, #10
 8001010:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 8001012:	2300      	movs	r3, #0
 8001014:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8001016:	1d3a      	adds	r2, r7, #4
 8001018:	2364      	movs	r3, #100	@ 0x64
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2302      	movs	r3, #2
 800101e:	2194      	movs	r1, #148	@ 0x94
 8001020:	4833      	ldr	r0, [pc, #204]	@ (80010f0 <configAudio+0x1dc>)
 8001022:	f003 f805 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x27;
 8001026:	2327      	movs	r3, #39	@ 0x27
 8001028:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x00;
 800102a:	2300      	movs	r3, #0
 800102c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800102e:	1d3a      	adds	r2, r7, #4
 8001030:	2364      	movs	r3, #100	@ 0x64
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2302      	movs	r3, #2
 8001036:	2194      	movs	r1, #148	@ 0x94
 8001038:	482d      	ldr	r0, [pc, #180]	@ (80010f0 <configAudio+0x1dc>)
 800103a:	f002 fff9 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x1F;
 800103e:	231f      	movs	r3, #31
 8001040:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x0F;
 8001042:	230f      	movs	r3, #15
 8001044:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8001046:	1d3a      	adds	r2, r7, #4
 8001048:	2364      	movs	r3, #100	@ 0x64
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2302      	movs	r3, #2
 800104e:	2194      	movs	r1, #148	@ 0x94
 8001050:	4827      	ldr	r0, [pc, #156]	@ (80010f0 <configAudio+0x1dc>)
 8001052:	f002 ffed 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x22;
 8001056:	2322      	movs	r3, #34	@ 0x22
 8001058:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0xC0;
 800105a:	23c0      	movs	r3, #192	@ 0xc0
 800105c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800105e:	1d3a      	adds	r2, r7, #4
 8001060:	2364      	movs	r3, #100	@ 0x64
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2302      	movs	r3, #2
 8001066:	2194      	movs	r1, #148	@ 0x94
 8001068:	4821      	ldr	r0, [pc, #132]	@ (80010f0 <configAudio+0x1dc>)
 800106a:	f002 ffe1 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x14;
 800106e:	2314      	movs	r3, #20
 8001070:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 8001072:	2302      	movs	r3, #2
 8001074:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 8001076:	1d3a      	adds	r2, r7, #4
 8001078:	2364      	movs	r3, #100	@ 0x64
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2302      	movs	r3, #2
 800107e:	2194      	movs	r1, #148	@ 0x94
 8001080:	481b      	ldr	r0, [pc, #108]	@ (80010f0 <configAudio+0x1dc>)
 8001082:	f002 ffd5 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x15;
 8001086:	2315      	movs	r3, #21
 8001088:	713b      	strb	r3, [r7, #4]
    bytes[1] = 2;
 800108a:	2302      	movs	r3, #2
 800108c:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 800108e:	1d3a      	adds	r2, r7, #4
 8001090:	2364      	movs	r3, #100	@ 0x64
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2302      	movs	r3, #2
 8001096:	2194      	movs	r1, #148	@ 0x94
 8001098:	4815      	ldr	r0, [pc, #84]	@ (80010f0 <configAudio+0x1dc>)
 800109a:	f002 ffc9 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x20;
 800109e:	2320      	movs	r3, #32
 80010a0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80010a2:	2318      	movs	r3, #24
 80010a4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80010a6:	1d3a      	adds	r2, r7, #4
 80010a8:	2364      	movs	r3, #100	@ 0x64
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2302      	movs	r3, #2
 80010ae:	2194      	movs	r1, #148	@ 0x94
 80010b0:	480f      	ldr	r0, [pc, #60]	@ (80010f0 <configAudio+0x1dc>)
 80010b2:	f002 ffbd 	bl	8004030 <HAL_I2C_Master_Transmit>

    bytes[0] = 0x21;
 80010b6:	2321      	movs	r3, #33	@ 0x21
 80010b8:	713b      	strb	r3, [r7, #4]
    bytes[1] = 24;
 80010ba:	2318      	movs	r3, #24
 80010bc:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80010be:	1d3a      	adds	r2, r7, #4
 80010c0:	2364      	movs	r3, #100	@ 0x64
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2302      	movs	r3, #2
 80010c6:	2194      	movs	r1, #148	@ 0x94
 80010c8:	4809      	ldr	r0, [pc, #36]	@ (80010f0 <configAudio+0x1dc>)
 80010ca:	f002 ffb1 	bl	8004030 <HAL_I2C_Master_Transmit>

    /* Power up */
    bytes[0] = 0x02;
 80010ce:	2302      	movs	r3, #2
 80010d0:	713b      	strb	r3, [r7, #4]
    bytes[1] = 0x9E;
 80010d2:	239e      	movs	r3, #158	@ 0x9e
 80010d4:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, AUDIO_I2C_ADDRESS, bytes, 2, 100);
 80010d6:	1d3a      	adds	r2, r7, #4
 80010d8:	2364      	movs	r3, #100	@ 0x64
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2302      	movs	r3, #2
 80010de:	2194      	movs	r1, #148	@ 0x94
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <configAudio+0x1dc>)
 80010e2:	f002 ffa5 	bl	8004030 <HAL_I2C_Master_Transmit>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000084 	.word	0x20000084

080010f4 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	@ 0x30
 80010f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	4b72      	ldr	r3, [pc, #456]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a71      	ldr	r2, [pc, #452]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b6f      	ldr	r3, [pc, #444]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	4b6b      	ldr	r3, [pc, #428]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a6a      	ldr	r2, [pc, #424]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b68      	ldr	r3, [pc, #416]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b64      	ldr	r3, [pc, #400]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a63      	ldr	r2, [pc, #396]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800114c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b61      	ldr	r3, [pc, #388]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b5d      	ldr	r3, [pc, #372]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a5c      	ldr	r2, [pc, #368]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b5a      	ldr	r3, [pc, #360]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b56      	ldr	r3, [pc, #344]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a55      	ldr	r2, [pc, #340]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b53      	ldr	r3, [pc, #332]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b4f      	ldr	r3, [pc, #316]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a4e      	ldr	r2, [pc, #312]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b4c      	ldr	r3, [pc, #304]	@ (80012d8 <MX_GPIO_Init+0x1e4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2108      	movs	r1, #8
 80011b6:	4849      	ldr	r0, [pc, #292]	@ (80012dc <MX_GPIO_Init+0x1e8>)
 80011b8:	f001 f836 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2101      	movs	r1, #1
 80011c0:	4847      	ldr	r0, [pc, #284]	@ (80012e0 <MX_GPIO_Init+0x1ec>)
 80011c2:	f001 f831 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011c6:	2200      	movs	r2, #0
 80011c8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80011cc:	4845      	ldr	r0, [pc, #276]	@ (80012e4 <MX_GPIO_Init+0x1f0>)
 80011ce:	f001 f82b 	bl	8002228 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011d2:	2308      	movs	r3, #8
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	483c      	ldr	r0, [pc, #240]	@ (80012dc <MX_GPIO_Init+0x1e8>)
 80011ea:	f000 fe81 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4836      	ldr	r0, [pc, #216]	@ (80012e0 <MX_GPIO_Init+0x1ec>)
 8001206:	f000 fe73 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800120a:	2308      	movs	r3, #8
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800121a:	2305      	movs	r3, #5
 800121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	482e      	ldr	r0, [pc, #184]	@ (80012e0 <MX_GPIO_Init+0x1ec>)
 8001226:	f000 fe63 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800122a:	2301      	movs	r3, #1
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800122e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	482a      	ldr	r0, [pc, #168]	@ (80012e8 <MX_GPIO_Init+0x1f4>)
 8001240:	f000 fe56 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001244:	2304      	movs	r3, #4
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4825      	ldr	r0, [pc, #148]	@ (80012ec <MX_GPIO_Init+0x1f8>)
 8001258:	f000 fe4a 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800125c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800126e:	2305      	movs	r3, #5
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	481c      	ldr	r0, [pc, #112]	@ (80012ec <MX_GPIO_Init+0x1f8>)
 800127a:	f000 fe39 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800127e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001282:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4813      	ldr	r0, [pc, #76]	@ (80012e4 <MX_GPIO_Init+0x1f0>)
 8001298:	f000 fe2a 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800129c:	2320      	movs	r3, #32
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <MX_GPIO_Init+0x1f0>)
 80012b0:	f000 fe1e 	bl	8001ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012b8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <MX_GPIO_Init+0x1e8>)
 80012ca:	f000 fe11 	bl	8001ef0 <HAL_GPIO_Init>

}
 80012ce:	bf00      	nop
 80012d0:	3730      	adds	r7, #48	@ 0x30
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400

080012f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <MX_I2C1_Init+0x50>)
 80012f6:	4a13      	ldr	r2, [pc, #76]	@ (8001344 <MX_I2C1_Init+0x54>)
 80012f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_I2C1_Init+0x50>)
 80012fc:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <MX_I2C1_Init+0x58>)
 80012fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_I2C1_Init+0x50>)
 800130e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001312:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	@ (8001340 <MX_I2C1_Init+0x50>)
 800132e:	f002 fd3b 	bl	8003da8 <HAL_I2C_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001338:	f000 fa90 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000084 	.word	0x20000084
 8001344:	40005400 	.word	0x40005400
 8001348:	000186a0 	.word	0x000186a0

0800134c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <HAL_I2C_MspInit+0x84>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12c      	bne.n	80013c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800138a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001390:	2312      	movs	r3, #18
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001394:	2301      	movs	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139c:	2304      	movs	r3, #4
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	480c      	ldr	r0, [pc, #48]	@ (80013d8 <HAL_I2C_MspInit+0x8c>)
 80013a8:	f000 fda2 	bl	8001ef0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	4a07      	ldr	r2, [pc, #28]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 80013b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_I2C_MspInit+0x88>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	@ 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40005400 	.word	0x40005400
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020400 	.word	0x40020400

080013dc <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80013e0:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013e2:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <MX_I2S3_Init+0x58>)
 80013e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80013fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <MX_I2S3_Init+0x54>)
 80013fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001400:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <MX_I2S3_Init+0x54>)
 8001404:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001408:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_I2S3_Init+0x54>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_I2S3_Init+0x54>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_I2S3_Init+0x54>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_I2S3_Init+0x54>)
 800141e:	f003 f961 	bl	80046e4 <HAL_I2S_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001428:	f000 fa18 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200000d8 	.word	0x200000d8
 8001434:	40003c00 	.word	0x40003c00

08001438 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	@ 0x38
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a31      	ldr	r2, [pc, #196]	@ (8001528 <HAL_I2S_MspInit+0xf0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d15a      	bne.n	800151e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001468:	2301      	movs	r3, #1
 800146a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800146c:	23c0      	movs	r3, #192	@ 0xc0
 800146e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001470:	2302      	movs	r3, #2
 8001472:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4618      	mov	r0, r3
 800147a:	f004 fb7d 	bl	8005b78 <HAL_RCCEx_PeriphCLKConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001484:	f000 f9ea 	bl	800185c <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	4b27      	ldr	r3, [pc, #156]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	4a26      	ldr	r2, [pc, #152]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 8001492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001496:	6413      	str	r3, [r2, #64]	@ 0x40
 8001498:	4b24      	ldr	r3, [pc, #144]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b20      	ldr	r3, [pc, #128]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ac:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c8:	4a18      	ldr	r2, [pc, #96]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <HAL_I2S_MspInit+0xf4>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014dc:	2310      	movs	r3, #16
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ec:	2306      	movs	r3, #6
 80014ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	480e      	ldr	r0, [pc, #56]	@ (8001530 <HAL_I2S_MspInit+0xf8>)
 80014f8:	f000 fcfa 	bl	8001ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80014fc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800150e:	2306      	movs	r3, #6
 8001510:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	4806      	ldr	r0, [pc, #24]	@ (8001534 <HAL_I2S_MspInit+0xfc>)
 800151a:	f000 fce9 	bl	8001ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800151e:	bf00      	nop
 8001520:	3738      	adds	r7, #56	@ 0x38
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40003c00 	.word	0x40003c00
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020800 	.word	0x40020800

08001538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153c:	f000 fb80 	bl	8001c40 <HAL_Init>

  /* USER CODE BEGIN Init */
  last_systick = HAL_GetTick();
 8001540:	f000 fbe4 	bl	8001d0c <HAL_GetTick>
 8001544:	4603      	mov	r3, r0
 8001546:	4a22      	ldr	r2, [pc, #136]	@ (80015d0 <main+0x98>)
 8001548:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154a:	f000 f849 	bl	80015e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154e:	f7ff fdd1 	bl	80010f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001552:	f7ff fecd 	bl	80012f0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001556:	f7ff ff41 	bl	80013dc <MX_I2S3_Init>
  MX_SPI1_Init();
 800155a:	f000 f985 	bl	8001868 <MX_SPI1_Init>
//  MX_USB_HOST_Init();
//  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  configAudio();
 800155e:	f7ff fcd9 	bl	8000f14 <configAudio>
  last_systick = HAL_GetTick(); //traje 5 milisekundi
 8001562:	f000 fbd3 	bl	8001d0c <HAL_GetTick>
 8001566:	4603      	mov	r3, r0
 8001568:	4a19      	ldr	r2, [pc, #100]	@ (80015d0 <main+0x98>)
 800156a:	6013      	str	r3, [r2, #0]
  generate_fake_signal(&fake_signal, BUFFER_SIZE); //traje 1 milisekundu
 800156c:	212c      	movs	r1, #44	@ 0x2c
 800156e:	4819      	ldr	r0, [pc, #100]	@ (80015d4 <main+0x9c>)
 8001570:	f000 f8a2 	bl	80016b8 <generate_fake_signal>
  last_systick = HAL_GetTick();
 8001574:	f000 fbca 	bl	8001d0c <HAL_GetTick>
 8001578:	4603      	mov	r3, r0
 800157a:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <main+0x98>)
 800157c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
//    MX_USB_HOST_Process();
    last_systick= HAL_GetTick();
 800157e:	f000 fbc5 	bl	8001d0c <HAL_GetTick>
 8001582:	4603      	mov	r3, r0
 8001584:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <main+0x98>)
 8001586:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN 3 */


    echo_effect(&fake_signal, BUFFER_SIZE, 0.5, 10); //treba 1 ms za apply echo
 8001588:	220a      	movs	r2, #10
 800158a:	ed9f 0b0f 	vldr	d0, [pc, #60]	@ 80015c8 <main+0x90>
 800158e:	212c      	movs	r1, #44	@ 0x2c
 8001590:	4810      	ldr	r0, [pc, #64]	@ (80015d4 <main+0x9c>)
 8001592:	f000 f91b 	bl	80017cc <echo_effect>
    last_systick = HAL_GetTick();
 8001596:	f000 fbb9 	bl	8001d0c <HAL_GetTick>
 800159a:	4603      	mov	r3, r0
 800159c:	4a0c      	ldr	r2, [pc, #48]	@ (80015d0 <main+0x98>)
 800159e:	6013      	str	r3, [r2, #0]
    HAL_I2S_Transmit(&hi2s3, &fake_signal, 1, 10);
 80015a0:	230a      	movs	r3, #10
 80015a2:	2201      	movs	r2, #1
 80015a4:	490b      	ldr	r1, [pc, #44]	@ (80015d4 <main+0x9c>)
 80015a6:	480c      	ldr	r0, [pc, #48]	@ (80015d8 <main+0xa0>)
 80015a8:	f003 f9dc 	bl	8004964 <HAL_I2S_Transmit>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015b2:	480a      	ldr	r0, [pc, #40]	@ (80015dc <main+0xa4>)
 80015b4:	f000 fe38 	bl	8002228 <HAL_GPIO_WritePin>
    last_systick = HAL_GetTick();
 80015b8:	f000 fba8 	bl	8001d0c <HAL_GetTick>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a04      	ldr	r2, [pc, #16]	@ (80015d0 <main+0x98>)
 80015c0:	6013      	str	r3, [r2, #0]
  {
 80015c2:	bf00      	nop
 80015c4:	e7db      	b.n	800157e <main+0x46>
 80015c6:	bf00      	nop
 80015c8:	00000000 	.word	0x00000000
 80015cc:	3fe00000 	.word	0x3fe00000
 80015d0:	20000178 	.word	0x20000178
 80015d4:	20000120 	.word	0x20000120
 80015d8:	200000d8 	.word	0x200000d8
 80015dc:	40020c00 	.word	0x40020c00

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b094      	sub	sp, #80	@ 0x50
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	2230      	movs	r2, #48	@ 0x30
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f005 fc13 	bl	8006e1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	4b28      	ldr	r3, [pc, #160]	@ (80016ac <SystemClock_Config+0xcc>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	4a27      	ldr	r2, [pc, #156]	@ (80016ac <SystemClock_Config+0xcc>)
 800160e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001612:	6413      	str	r3, [r2, #64]	@ 0x40
 8001614:	4b25      	ldr	r3, [pc, #148]	@ (80016ac <SystemClock_Config+0xcc>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	4b22      	ldr	r3, [pc, #136]	@ (80016b0 <SystemClock_Config+0xd0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a21      	ldr	r2, [pc, #132]	@ (80016b0 <SystemClock_Config+0xd0>)
 800162a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <SystemClock_Config+0xd0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800163c:	2301      	movs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001640:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	2302      	movs	r3, #2
 8001648:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800164e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001650:	2304      	movs	r3, #4
 8001652:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001654:	23a8      	movs	r3, #168	@ 0xa8
 8001656:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001658:	2302      	movs	r3, #2
 800165a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800165c:	2307      	movs	r3, #7
 800165e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001660:	f107 0320 	add.w	r3, r7, #32
 8001664:	4618      	mov	r0, r3
 8001666:	f003 fe03 	bl	8005270 <HAL_RCC_OscConfig>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001670:	f000 f8f4 	bl	800185c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001674:	230f      	movs	r3, #15
 8001676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001678:	2302      	movs	r3, #2
 800167a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001680:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800168a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2105      	movs	r1, #5
 8001692:	4618      	mov	r0, r3
 8001694:	f004 f864 	bl	8005760 <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800169e:	f000 f8dd 	bl	800185c <Error_Handler>
  }
}
 80016a2:	bf00      	nop
 80016a4:	3750      	adds	r7, #80	@ 0x50
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000
 80016b4:	00000000 	.word	0x00000000

080016b8 <generate_fake_signal>:

/* USER CODE BEGIN 4 */
void generate_fake_signal(uint16_t *buffer, int size) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < size; i++) {
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e061      	b.n	800178c <generate_fake_signal+0xd4>
        float sine_wave = sin(2 * M_PI * SIGNAL_FREQ * i / SAMPLE_FREQ);
 80016c8:	6978      	ldr	r0, [r7, #20]
 80016ca:	f7fe ff23 	bl	8000514 <__aeabi_i2d>
 80016ce:	a33b      	add	r3, pc, #236	@ (adr r3, 80017bc <generate_fake_signal+0x104>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe ff88 	bl	80005e8 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	a338      	add	r3, pc, #224	@ (adr r3, 80017c4 <generate_fake_signal+0x10c>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7ff f8a9 	bl	800083c <__aeabi_ddiv>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	ec43 2b17 	vmov	d7, r2, r3
 80016f2:	eeb0 0a47 	vmov.f32	s0, s14
 80016f6:	eef0 0a67 	vmov.f32	s1, s15
 80016fa:	f006 f975 	bl	80079e8 <sin>
 80016fe:	ec53 2b10 	vmov	r2, r3, d0
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f7ff fa31 	bl	8000b6c <__aeabi_d2f>
 800170a:	4603      	mov	r3, r0
 800170c:	613b      	str	r3, [r7, #16]
        float noise = ((float)rand() / RAND_MAX) * 0.1 - 0.05; // Šum [-0.05, 0.05]
 800170e:	f005 fa41 	bl	8006b94 <rand>
 8001712:	ee07 0a90 	vmov	s15, r0
 8001716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800171a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80017b0 <generate_fake_signal+0xf8>
 800171e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001722:	ee16 0a90 	vmov	r0, s13
 8001726:	f7fe ff07 	bl	8000538 <__aeabi_f2d>
 800172a:	a31d      	add	r3, pc, #116	@ (adr r3, 80017a0 <generate_fake_signal+0xe8>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe ff5a 	bl	80005e8 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	a31a      	add	r3, pc, #104	@ (adr r3, 80017a8 <generate_fake_signal+0xf0>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe fd99 	bl	8000278 <__aeabi_dsub>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff fa0d 	bl	8000b6c <__aeabi_d2f>
 8001752:	4603      	mov	r3, r0
 8001754:	60fb      	str	r3, [r7, #12]
        buffer[i] = (uint16_t)((sine_wave + noise) * 32767 + 32768); // Prebaci u unsigned 16-bitni format
 8001756:	ed97 7a04 	vldr	s14, [r7, #16]
 800175a:	edd7 7a03 	vldr	s15, [r7, #12]
 800175e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001762:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80017b4 <generate_fake_signal+0xfc>
 8001766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80017b8 <generate_fake_signal+0x100>
 800176e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800177e:	ee17 2a90 	vmov	r2, s15
 8001782:	b292      	uxth	r2, r2
 8001784:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	db99      	blt.n	80016c8 <generate_fake_signal+0x10>
    }

}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	9999999a 	.word	0x9999999a
 80017a4:	3fb99999 	.word	0x3fb99999
 80017a8:	9999999a 	.word	0x9999999a
 80017ac:	3fa99999 	.word	0x3fa99999
 80017b0:	4f000000 	.word	0x4f000000
 80017b4:	46fffe00 	.word	0x46fffe00
 80017b8:	47000000 	.word	0x47000000
 80017bc:	fc6a96c1 	.word	0xfc6a96c1
 80017c0:	40a59933 	.word	0x40a59933
 80017c4:	00000000 	.word	0x00000000
 80017c8:	40e57c00 	.word	0x40e57c00

080017cc <echo_effect>:
void echo_effect(uint16_t *buffer, int size, float echo_strength, int delay) {
 80017cc:	b480      	push	{r7}
 80017ce:	b087      	sub	sp, #28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80017da:	603a      	str	r2, [r7, #0]
    static uint16_t echo_buffer[BUFFER_SIZE * 2] = {0}; // Povećan buffer za "delay"
    for (int i = 0; i < size; i++) {
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e02f      	b.n	8001842 <echo_effect+0x76>
        int delayed_index = i - delay;
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	613b      	str	r3, [r7, #16]
        if (delayed_index >= 0) {
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db1c      	blt.n	800182a <echo_effect+0x5e>
            buffer[i] += (uint16_t)(echo_strength * echo_buffer[delayed_index]);
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	8819      	ldrh	r1, [r3, #0]
 80017fa:	4a17      	ldr	r2, [pc, #92]	@ (8001858 <echo_effect+0x8c>)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800180a:	edd7 7a01 	vldr	s15, [r7, #4]
 800180e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001816:	ee17 3a90 	vmov	r3, s15
 800181a:	b29a      	uxth	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	4403      	add	r3, r0
 8001824:	440a      	add	r2, r1
 8001826:	b292      	uxth	r2, r2
 8001828:	801a      	strh	r2, [r3, #0]
        }
        echo_buffer[i] = buffer[i];
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4413      	add	r3, r2
 8001832:	8819      	ldrh	r1, [r3, #0]
 8001834:	4a08      	ldr	r2, [pc, #32]	@ (8001858 <echo_effect+0x8c>)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < size; i++) {
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	3301      	adds	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	429a      	cmp	r2, r3
 8001848:	dbcb      	blt.n	80017e2 <echo_effect+0x16>
    }
}
 800184a:	bf00      	nop
 800184c:	bf00      	nop
 800184e:	371c      	adds	r7, #28
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	2000017c 	.word	0x2000017c

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <Error_Handler+0x8>

08001868 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800186c:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <MX_SPI1_Init+0x64>)
 800186e:	4a18      	ldr	r2, [pc, #96]	@ (80018d0 <MX_SPI1_Init+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001872:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <MX_SPI1_Init+0x64>)
 8001874:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001878:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <MX_SPI1_Init+0x64>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <MX_SPI1_Init+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <MX_SPI1_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <MX_SPI1_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <MX_SPI1_Init+0x64>)
 8001894:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001898:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800189a:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <MX_SPI1_Init+0x64>)
 800189c:	2200      	movs	r2, #0
 800189e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <MX_SPI1_Init+0x64>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <MX_SPI1_Init+0x64>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ac:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <MX_SPI1_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_SPI1_Init+0x64>)
 80018b4:	220a      	movs	r2, #10
 80018b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	@ (80018cc <MX_SPI1_Init+0x64>)
 80018ba:	f004 fa9f 	bl	8005dfc <HAL_SPI_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018c4:	f7ff ffca 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000022c 	.word	0x2000022c
 80018d0:	40013000 	.word	0x40013000

080018d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	@ 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a19      	ldr	r2, [pc, #100]	@ (8001958 <HAL_SPI_MspInit+0x84>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12b      	bne.n	800194e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b18      	ldr	r3, [pc, #96]	@ (800195c <HAL_SPI_MspInit+0x88>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	4a17      	ldr	r2, [pc, #92]	@ (800195c <HAL_SPI_MspInit+0x88>)
 8001900:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001904:	6453      	str	r3, [r2, #68]	@ 0x44
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <HAL_SPI_MspInit+0x88>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b11      	ldr	r3, [pc, #68]	@ (800195c <HAL_SPI_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a10      	ldr	r2, [pc, #64]	@ (800195c <HAL_SPI_MspInit+0x88>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <HAL_SPI_MspInit+0x88>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800192e:	23e0      	movs	r3, #224	@ 0xe0
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800193e:	2305      	movs	r3, #5
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	@ (8001960 <HAL_SPI_MspInit+0x8c>)
 800194a:	f000 fad1 	bl	8001ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	@ 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40013000 	.word	0x40013000
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <HAL_MspInit+0x4c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	4a0f      	ldr	r2, [pc, #60]	@ (80019b0 <HAL_MspInit+0x4c>)
 8001974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001978:	6453      	str	r3, [r2, #68]	@ 0x44
 800197a:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <HAL_MspInit+0x4c>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	603b      	str	r3, [r7, #0]
 800198a:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <HAL_MspInit+0x4c>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	4a08      	ldr	r2, [pc, #32]	@ (80019b0 <HAL_MspInit+0x4c>)
 8001990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001994:	6413      	str	r3, [r2, #64]	@ 0x40
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_MspInit+0x4c>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019a2:	2007      	movs	r0, #7
 80019a4:	f000 fa70 	bl	8001e88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800

080019b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <NMI_Handler+0x4>

080019bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <MemManage_Handler+0x4>

080019cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <BusFault_Handler+0x4>

080019d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <UsageFault_Handler+0x4>

080019dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0a:	f000 f96b 	bl	8001ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <TIM2_IRQHandler+0x10>)
 8001a1a:	f004 fa78 	bl	8005f0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000288 	.word	0x20000288

08001a28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a2c:	4802      	ldr	r0, [pc, #8]	@ (8001a38 <OTG_FS_IRQHandler+0x10>)
 8001a2e:	f000 fc14 	bl	800225a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200002d4 	.word	0x200002d4

08001a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return 1;
 8001a40:	2301      	movs	r3, #1
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_kill>:

int _kill(int pid, int sig)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a56:	f005 fa3f 	bl	8006ed8 <__errno>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2216      	movs	r2, #22
 8001a5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_exit>:

void _exit (int status)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ffe7 	bl	8001a4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a7e:	bf00      	nop
 8001a80:	e7fd      	b.n	8001a7e <_exit+0x12>

08001a82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e00a      	b.n	8001aaa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a94:	f3af 8000 	nop.w
 8001a98:	4601      	mov	r1, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	60ba      	str	r2, [r7, #8]
 8001aa0:	b2ca      	uxtb	r2, r1
 8001aa2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dbf0      	blt.n	8001a94 <_read+0x12>
  }

  return len;
 8001ab2:	687b      	ldr	r3, [r7, #4]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e009      	b.n	8001ae2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	60ba      	str	r2, [r7, #8]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	dbf1      	blt.n	8001ace <_write+0x12>
  }
  return len;
 8001aea:	687b      	ldr	r3, [r7, #4]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_close>:

int _close(int file)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_isatty>:

int _isatty(int file)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b34:	2301      	movs	r3, #1
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b64:	4a14      	ldr	r2, [pc, #80]	@ (8001bb8 <_sbrk+0x5c>)
 8001b66:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <_sbrk+0x60>)
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d102      	bne.n	8001b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <_sbrk+0x64>)
 8001b7a:	4a12      	ldr	r2, [pc, #72]	@ (8001bc4 <_sbrk+0x68>)
 8001b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <_sbrk+0x64>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4413      	add	r3, r2
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d207      	bcs.n	8001b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b8c:	f005 f9a4 	bl	8006ed8 <__errno>
 8001b90:	4603      	mov	r3, r0
 8001b92:	220c      	movs	r2, #12
 8001b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b9a:	e009      	b.n	8001bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	4a05      	ldr	r2, [pc, #20]	@ (8001bc0 <_sbrk+0x64>)
 8001bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bae:	68fb      	ldr	r3, [r7, #12]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20020000 	.word	0x20020000
 8001bbc:	00000400 	.word	0x00000400
 8001bc0:	20000284 	.word	0x20000284
 8001bc4:	20000800 	.word	0x20000800

08001bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <SystemInit+0x20>)
 8001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bd2:	4a05      	ldr	r2, [pc, #20]	@ (8001be8 <SystemInit+0x20>)
 8001bd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c24 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bf0:	f7ff ffea 	bl	8001bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bf4:	480c      	ldr	r0, [pc, #48]	@ (8001c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bf6:	490d      	ldr	r1, [pc, #52]	@ (8001c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bfc:	e002      	b.n	8001c04 <LoopCopyDataInit>

08001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c02:	3304      	adds	r3, #4

08001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c08:	d3f9      	bcc.n	8001bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c10:	e001      	b.n	8001c16 <LoopFillZerobss>

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c14:	3204      	adds	r2, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c1a:	f005 f963 	bl	8006ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1e:	f7ff fc8b 	bl	8001538 <main>
  bx  lr    
 8001c22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c2c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c30:	08008d40 	.word	0x08008d40
  ldr r2, =_sbss
 8001c34:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c38:	20000800 	.word	0x20000800

08001c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC_IRQHandler>
	...

08001c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c44:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <HAL_Init+0x40>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0d      	ldr	r2, [pc, #52]	@ (8001c80 <HAL_Init+0x40>)
 8001c4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <HAL_Init+0x40>)
 8001c56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c5c:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <HAL_Init+0x40>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a07      	ldr	r2, [pc, #28]	@ (8001c80 <HAL_Init+0x40>)
 8001c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f000 f90d 	bl	8001e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f000 f808 	bl	8001c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c74:	f7ff fe76 	bl	8001964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023c00 	.word	0x40023c00

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c8c:	4b12      	ldr	r3, [pc, #72]	@ (8001cd8 <HAL_InitTick+0x54>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <HAL_InitTick+0x58>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f917 	bl	8001ed6 <HAL_SYSTICK_Config>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00e      	b.n	8001cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b0f      	cmp	r3, #15
 8001cb6:	d80a      	bhi.n	8001cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cc0:	f000 f8ed 	bl	8001e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc4:	4a06      	ldr	r2, [pc, #24]	@ (8001ce0 <HAL_InitTick+0x5c>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e000      	b.n	8001cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_IncTick+0x20>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_IncTick+0x24>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <HAL_IncTick+0x24>)
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000008 	.word	0x20000008
 8001d08:	200002d0 	.word	0x200002d0

08001d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d10:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <HAL_GetTick+0x14>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	200002d0 	.word	0x200002d0

08001d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	@ (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	@ (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	@ (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
         );
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	@ 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e54:	d301      	bcc.n	8001e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00f      	b.n	8001e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e84 <SysTick_Config+0x40>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e62:	210f      	movs	r1, #15
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e68:	f7ff ff8e 	bl	8001d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <SysTick_Config+0x40>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e72:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <SysTick_Config+0x40>)
 8001e74:	2207      	movs	r2, #7
 8001e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	e000e010 	.word	0xe000e010

08001e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff47 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb0:	f7ff ff5c 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	6978      	ldr	r0, [r7, #20]
 8001ebc:	f7ff ff8e 	bl	8001ddc <NVIC_EncodePriority>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff5d 	bl	8001d88 <__NVIC_SetPriority>
}
 8001ece:	bf00      	nop
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ffb0 	bl	8001e44 <SysTick_Config>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	@ 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	e16b      	b.n	80021e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	f040 815a 	bne.w	80021de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d005      	beq.n	8001f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d130      	bne.n	8001fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f78:	2201      	movs	r2, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 0201 	and.w	r2, r3, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d017      	beq.n	8001fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d123      	bne.n	8002034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	08da      	lsrs	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3208      	adds	r2, #8
 8001ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220f      	movs	r2, #15
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	08da      	lsrs	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3208      	adds	r2, #8
 800202e:	69b9      	ldr	r1, [r7, #24]
 8002030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0203 	and.w	r2, r3, #3
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80b4 	beq.w	80021de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b60      	ldr	r3, [pc, #384]	@ (80021fc <HAL_GPIO_Init+0x30c>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	4a5f      	ldr	r2, [pc, #380]	@ (80021fc <HAL_GPIO_Init+0x30c>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002084:	6453      	str	r3, [r2, #68]	@ 0x44
 8002086:	4b5d      	ldr	r3, [pc, #372]	@ (80021fc <HAL_GPIO_Init+0x30c>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002092:	4a5b      	ldr	r2, [pc, #364]	@ (8002200 <HAL_GPIO_Init+0x310>)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a52      	ldr	r2, [pc, #328]	@ (8002204 <HAL_GPIO_Init+0x314>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d02b      	beq.n	8002116 <HAL_GPIO_Init+0x226>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a51      	ldr	r2, [pc, #324]	@ (8002208 <HAL_GPIO_Init+0x318>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d025      	beq.n	8002112 <HAL_GPIO_Init+0x222>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a50      	ldr	r2, [pc, #320]	@ (800220c <HAL_GPIO_Init+0x31c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d01f      	beq.n	800210e <HAL_GPIO_Init+0x21e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002210 <HAL_GPIO_Init+0x320>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d019      	beq.n	800210a <HAL_GPIO_Init+0x21a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002214 <HAL_GPIO_Init+0x324>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d013      	beq.n	8002106 <HAL_GPIO_Init+0x216>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002218 <HAL_GPIO_Init+0x328>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00d      	beq.n	8002102 <HAL_GPIO_Init+0x212>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a4c      	ldr	r2, [pc, #304]	@ (800221c <HAL_GPIO_Init+0x32c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d007      	beq.n	80020fe <HAL_GPIO_Init+0x20e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002220 <HAL_GPIO_Init+0x330>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d101      	bne.n	80020fa <HAL_GPIO_Init+0x20a>
 80020f6:	2307      	movs	r3, #7
 80020f8:	e00e      	b.n	8002118 <HAL_GPIO_Init+0x228>
 80020fa:	2308      	movs	r3, #8
 80020fc:	e00c      	b.n	8002118 <HAL_GPIO_Init+0x228>
 80020fe:	2306      	movs	r3, #6
 8002100:	e00a      	b.n	8002118 <HAL_GPIO_Init+0x228>
 8002102:	2305      	movs	r3, #5
 8002104:	e008      	b.n	8002118 <HAL_GPIO_Init+0x228>
 8002106:	2304      	movs	r3, #4
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x228>
 800210a:	2303      	movs	r3, #3
 800210c:	e004      	b.n	8002118 <HAL_GPIO_Init+0x228>
 800210e:	2302      	movs	r3, #2
 8002110:	e002      	b.n	8002118 <HAL_GPIO_Init+0x228>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_GPIO_Init+0x228>
 8002116:	2300      	movs	r3, #0
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	f002 0203 	and.w	r2, r2, #3
 800211e:	0092      	lsls	r2, r2, #2
 8002120:	4093      	lsls	r3, r2
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002128:	4935      	ldr	r1, [pc, #212]	@ (8002200 <HAL_GPIO_Init+0x310>)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	3302      	adds	r3, #2
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002136:	4b3b      	ldr	r3, [pc, #236]	@ (8002224 <HAL_GPIO_Init+0x334>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800215a:	4a32      	ldr	r2, [pc, #200]	@ (8002224 <HAL_GPIO_Init+0x334>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002160:	4b30      	ldr	r3, [pc, #192]	@ (8002224 <HAL_GPIO_Init+0x334>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002184:	4a27      	ldr	r2, [pc, #156]	@ (8002224 <HAL_GPIO_Init+0x334>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800218a:	4b26      	ldr	r3, [pc, #152]	@ (8002224 <HAL_GPIO_Init+0x334>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002224 <HAL_GPIO_Init+0x334>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002224 <HAL_GPIO_Init+0x334>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d8:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <HAL_GPIO_Init+0x334>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3301      	adds	r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	2b0f      	cmp	r3, #15
 80021e8:	f67f ae90 	bls.w	8001f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3724      	adds	r7, #36	@ 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40013800 	.word	0x40013800
 8002204:	40020000 	.word	0x40020000
 8002208:	40020400 	.word	0x40020400
 800220c:	40020800 	.word	0x40020800
 8002210:	40020c00 	.word	0x40020c00
 8002214:	40021000 	.word	0x40021000
 8002218:	40021400 	.word	0x40021400
 800221c:	40021800 	.word	0x40021800
 8002220:	40021c00 	.word	0x40021c00
 8002224:	40013c00 	.word	0x40013c00

08002228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
 8002234:	4613      	mov	r3, r2
 8002236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002244:	e003      	b.n	800224e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	041a      	lsls	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	619a      	str	r2, [r3, #24]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f004 f890 	bl	8006396 <USB_GetMode>
 8002276:	4603      	mov	r3, r0
 8002278:	2b01      	cmp	r3, #1
 800227a:	f040 80fb 	bne.w	8002474 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f004 f853 	bl	800632e <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 80f1 	beq.w	8002472 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f004 f84a 	bl	800632e <USB_ReadInterrupts>
 800229a:	4603      	mov	r3, r0
 800229c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022a4:	d104      	bne.n	80022b0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80022ae:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f004 f83a 	bl	800632e <USB_ReadInterrupts>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022c4:	d104      	bne.n	80022d0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80022ce:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f004 f82a 	bl	800632e <USB_ReadInterrupts>
 80022da:	4603      	mov	r3, r0
 80022dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022e4:	d104      	bne.n	80022f0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022ee:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f004 f81a 	bl	800632e <USB_ReadInterrupts>
 80022fa:	4603      	mov	r3, r0
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b02      	cmp	r3, #2
 8002302:	d103      	bne.n	800230c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2202      	movs	r2, #2
 800230a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f004 f80c 	bl	800632e <USB_ReadInterrupts>
 8002316:	4603      	mov	r3, r0
 8002318:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800231c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002320:	d120      	bne.n	8002364 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800232a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d113      	bne.n	8002364 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800233c:	2110      	movs	r1, #16
 800233e:	6938      	ldr	r0, [r7, #16]
 8002340:	f003 ff3d 	bl	80061be <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002344:	6938      	ldr	r0, [r7, #16]
 8002346:	f003 ff6c 	bl	8006222 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7a5b      	ldrb	r3, [r3, #9]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d105      	bne.n	800235e <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2101      	movs	r1, #1
 8002358:	4618      	mov	r0, r3
 800235a:	f004 f82a 	bl	80063b2 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f004 fae2 	bl	8006928 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f003 ffe0 	bl	800632e <USB_ReadInterrupts>
 800236e:	4603      	mov	r3, r0
 8002370:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002378:	d102      	bne.n	8002380 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f001 fca1 	bl	8003cc2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f003 ffd2 	bl	800632e <USB_ReadInterrupts>
 800238a:	4603      	mov	r3, r0
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b08      	cmp	r3, #8
 8002392:	d106      	bne.n	80023a2 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f004 faab 	bl	80068f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2208      	movs	r2, #8
 80023a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 ffc1 	bl	800632e <USB_ReadInterrupts>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023b6:	d139      	bne.n	800242c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f004 f835 	bl	800642c <USB_HC_ReadInterrupt>
 80023c2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e025      	b.n	8002416 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	fa22 f303 	lsr.w	r3, r2, r3
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d018      	beq.n	8002410 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023f4:	d106      	bne.n	8002404 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	4619      	mov	r1, r3
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f859 	bl	80024b4 <HCD_HC_IN_IRQHandler>
 8002402:	e005      	b.n	8002410 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	4619      	mov	r1, r3
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 febb 	bl	8003186 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	795b      	ldrb	r3, [r3, #5]
 800241a:	461a      	mov	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	4293      	cmp	r3, r2
 8002420:	d3d3      	bcc.n	80023ca <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800242a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f003 ff7c 	bl	800632e <USB_ReadInterrupts>
 8002436:	4603      	mov	r3, r0
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b10      	cmp	r3, #16
 800243e:	d101      	bne.n	8002444 <HAL_HCD_IRQHandler+0x1ea>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <HAL_HCD_IRQHandler+0x1ec>
 8002444:	2300      	movs	r3, #0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d014      	beq.n	8002474 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699a      	ldr	r2, [r3, #24]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0210 	bic.w	r2, r2, #16
 8002458:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f001 fb52 	bl	8003b04 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0210 	orr.w	r2, r2, #16
 800246e:	619a      	str	r2, [r3, #24]
 8002470:	e000      	b.n	8002474 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002472:	bf00      	nop
    }
  }
}
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_HCD_Stop+0x16>
 800248c:	2302      	movs	r3, #2
 800248e:	e00d      	b.n	80024ac <HAL_HCD_Stop+0x32>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f004 f8f6 	bl	800668e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 ff3e 	bl	8006354 <USB_ReadChInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d11a      	bne.n	8002518 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ee:	461a      	mov	r2, r3
 80024f0:	2304      	movs	r3, #4
 80024f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	334d      	adds	r3, #77	@ 0x4d
 8002504:	2207      	movs	r2, #7
 8002506:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f003 ff9c 	bl	800644e <USB_HC_Halt>
 8002516:	e09e      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f003 ff17 	bl	8006354 <USB_ReadChInterrupts>
 8002526:	4603      	mov	r3, r0
 8002528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002530:	d11b      	bne.n	800256a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002532:	78fb      	ldrb	r3, [r7, #3]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800253e:	461a      	mov	r2, r3
 8002540:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002544:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002546:	78fa      	ldrb	r2, [r7, #3]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	334d      	adds	r3, #77	@ 0x4d
 8002556:	2208      	movs	r2, #8
 8002558:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f003 ff73 	bl	800644e <USB_HC_Halt>
 8002568:	e075      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f003 feee 	bl	8006354 <USB_ReadChInterrupts>
 8002578:	4603      	mov	r3, r0
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b08      	cmp	r3, #8
 8002580:	d11a      	bne.n	80025b8 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800258e:	461a      	mov	r2, r3
 8002590:	2308      	movs	r3, #8
 8002592:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	334d      	adds	r3, #77	@ 0x4d
 80025a4:	2206      	movs	r2, #6
 80025a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f003 ff4c 	bl	800644e <USB_HC_Halt>
 80025b6:	e04e      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f003 fec7 	bl	8006354 <USB_ReadChInterrupts>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025d0:	d11b      	bne.n	800260a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025de:	461a      	mov	r2, r3
 80025e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	334d      	adds	r3, #77	@ 0x4d
 80025f6:	2209      	movs	r2, #9
 80025f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f003 ff23 	bl	800644e <USB_HC_Halt>
 8002608:	e025      	b.n	8002656 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f003 fe9e 	bl	8006354 <USB_ReadChInterrupts>
 8002618:	4603      	mov	r3, r0
 800261a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800261e:	2b80      	cmp	r3, #128	@ 0x80
 8002620:	d119      	bne.n	8002656 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800262e:	461a      	mov	r2, r3
 8002630:	2380      	movs	r3, #128	@ 0x80
 8002632:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	334d      	adds	r3, #77	@ 0x4d
 8002644:	2207      	movs	r2, #7
 8002646:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f003 fefc 	bl	800644e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fe78 	bl	8006354 <USB_ReadChInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800266a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800266e:	d112      	bne.n	8002696 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fee8 	bl	800644e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800267e:	78fb      	ldrb	r3, [r7, #3]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800268a:	461a      	mov	r2, r3
 800268c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002690:	6093      	str	r3, [r2, #8]
 8002692:	f000 bd75 	b.w	8003180 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fe58 	bl	8006354 <USB_ReadChInterrupts>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	f040 8128 	bne.w	8002900 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026bc:	461a      	mov	r2, r3
 80026be:	2320      	movs	r3, #32
 80026c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	331b      	adds	r3, #27
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d119      	bne.n	800270c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	331b      	adds	r3, #27
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	0151      	lsls	r1, r2, #5
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	440a      	add	r2, r1
 8002702:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800270a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	799b      	ldrb	r3, [r3, #6]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01b      	beq.n	800274c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3330      	adds	r3, #48	@ 0x30
 8002724:	6819      	ldr	r1, [r3, #0]
 8002726:	78fb      	ldrb	r3, [r7, #3]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4413      	add	r3, r2
 800272e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	1ac9      	subs	r1, r1, r3
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4403      	add	r3, r0
 8002748:	3338      	adds	r3, #56	@ 0x38
 800274a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	334d      	adds	r3, #77	@ 0x4d
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	3344      	adds	r3, #68	@ 0x44
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	2301      	movs	r3, #1
 8002784:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	3326      	adds	r3, #38	@ 0x26
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	3326      	adds	r3, #38	@ 0x26
 80027ac:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d110      	bne.n	80027d4 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 fe47 	bl	800644e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027cc:	461a      	mov	r2, r3
 80027ce:	2310      	movs	r3, #16
 80027d0:	6093      	str	r3, [r2, #8]
 80027d2:	e03d      	b.n	8002850 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	3326      	adds	r3, #38	@ 0x26
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d00a      	beq.n	8002800 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3326      	adds	r3, #38	@ 0x26
 80027fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d127      	bne.n	8002850 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	0151      	lsls	r1, r2, #5
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	440a      	add	r2, r1
 8002816:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800281a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800281e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	334c      	adds	r3, #76	@ 0x4c
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002834:	78fa      	ldrb	r2, [r7, #3]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	334c      	adds	r3, #76	@ 0x4c
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	4619      	mov	r1, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f004 f87a 	bl	8006944 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	799b      	ldrb	r3, [r3, #6]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d13b      	bne.n	80028d0 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3338      	adds	r3, #56	@ 0x38
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4403      	add	r3, r0
 8002878:	3328      	adds	r3, #40	@ 0x28
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	440b      	add	r3, r1
 800287e:	1e59      	subs	r1, r3, #1
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4403      	add	r3, r0
 800288e:	3328      	adds	r3, #40	@ 0x28
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	fbb1 f3f3 	udiv	r3, r1, r3
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8470 	beq.w	8003180 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	333c      	adds	r3, #60	@ 0x3c
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	f083 0301 	eor.w	r3, r3, #1
 80028b8:	b2d8      	uxtb	r0, r3
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	333c      	adds	r3, #60	@ 0x3c
 80028c8:	4602      	mov	r2, r0
 80028ca:	701a      	strb	r2, [r3, #0]
 80028cc:	f000 bc58 	b.w	8003180 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	333c      	adds	r3, #60	@ 0x3c
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	f083 0301 	eor.w	r3, r3, #1
 80028e8:	b2d8      	uxtb	r0, r3
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	333c      	adds	r3, #60	@ 0x3c
 80028f8:	4602      	mov	r2, r0
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	f000 bc40 	b.w	8003180 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f003 fd23 	bl	8006354 <USB_ReadChInterrupts>
 800290e:	4603      	mov	r3, r0
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b20      	cmp	r3, #32
 8002916:	d131      	bne.n	800297c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002924:	461a      	mov	r2, r3
 8002926:	2320      	movs	r3, #32
 8002928:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800292a:	78fa      	ldrb	r2, [r7, #3]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	1a9b      	subs	r3, r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	331a      	adds	r3, #26
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	f040 841f 	bne.w	8003180 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	331b      	adds	r3, #27
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	334d      	adds	r3, #77	@ 0x4d
 8002966:	2203      	movs	r2, #3
 8002968:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f003 fd6b 	bl	800644e <USB_HC_Halt>
 8002978:	f000 bc02 	b.w	8003180 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f003 fce5 	bl	8006354 <USB_ReadChInterrupts>
 800298a:	4603      	mov	r3, r0
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b02      	cmp	r3, #2
 8002992:	f040 8305 	bne.w	8002fa0 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029a2:	461a      	mov	r2, r3
 80029a4:	2302      	movs	r3, #2
 80029a6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	334d      	adds	r3, #77	@ 0x4d
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d114      	bne.n	80029e8 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	334d      	adds	r3, #77	@ 0x4d
 80029ce:	2202      	movs	r2, #2
 80029d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	334c      	adds	r3, #76	@ 0x4c
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	e2cc      	b.n	8002f82 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	334d      	adds	r3, #77	@ 0x4d
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d114      	bne.n	8002a28 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	334d      	adds	r3, #77	@ 0x4d
 8002a0e:	2202      	movs	r2, #2
 8002a10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	334c      	adds	r3, #76	@ 0x4c
 8002a22:	2205      	movs	r2, #5
 8002a24:	701a      	strb	r2, [r3, #0]
 8002a26:	e2ac      	b.n	8002f82 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	334d      	adds	r3, #77	@ 0x4d
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b07      	cmp	r3, #7
 8002a3c:	d00b      	beq.n	8002a56 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	334d      	adds	r3, #77	@ 0x4d
 8002a4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002a50:	2b09      	cmp	r3, #9
 8002a52:	f040 80a6 	bne.w	8002ba2 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	334d      	adds	r3, #77	@ 0x4d
 8002a66:	2202      	movs	r2, #2
 8002a68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3344      	adds	r3, #68	@ 0x44
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	1c59      	adds	r1, r3, #1
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4403      	add	r3, r0
 8002a8a:	3344      	adds	r3, #68	@ 0x44
 8002a8c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3344      	adds	r3, #68	@ 0x44
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d943      	bls.n	8002b2c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3344      	adds	r3, #68	@ 0x44
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	331a      	adds	r3, #26
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d123      	bne.n	8002b16 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	331b      	adds	r3, #27
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	331c      	adds	r3, #28
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	0151      	lsls	r1, r2, #5
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	440a      	add	r2, r1
 8002b0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b14:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	334c      	adds	r3, #76	@ 0x4c
 8002b26:	2204      	movs	r2, #4
 8002b28:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b2a:	e229      	b.n	8002f80 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	334c      	adds	r3, #76	@ 0x4c
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3326      	adds	r3, #38	@ 0x26
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	3326      	adds	r3, #38	@ 0x26
 8002b66:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	f040 8209 	bne.w	8002f80 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b84:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b8c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ba0:	e1ee      	b.n	8002f80 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	334d      	adds	r3, #77	@ 0x4d
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b05      	cmp	r3, #5
 8002bb6:	f040 80c8 	bne.w	8002d4a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	334d      	adds	r3, #77	@ 0x4d
 8002bca:	2202      	movs	r2, #2
 8002bcc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	331b      	adds	r3, #27
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	f040 81ce 	bne.w	8002f82 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3326      	adds	r3, #38	@ 0x26
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d16b      	bne.n	8002cd4 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3348      	adds	r3, #72	@ 0x48
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	1c59      	adds	r1, r3, #1
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4403      	add	r3, r0
 8002c1c:	3348      	adds	r3, #72	@ 0x48
 8002c1e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	3348      	adds	r3, #72	@ 0x48
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d943      	bls.n	8002cbe <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3348      	adds	r3, #72	@ 0x48
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	331b      	adds	r3, #27
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002c5e:	78fa      	ldrb	r2, [r7, #3]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	3344      	adds	r3, #68	@ 0x44
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d809      	bhi.n	8002c88 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	331c      	adds	r3, #28
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	0151      	lsls	r1, r2, #5
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	440a      	add	r2, r1
 8002c9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca6:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	334c      	adds	r3, #76	@ 0x4c
 8002cb8:	2204      	movs	r2, #4
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	e014      	b.n	8002ce8 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	334c      	adds	r3, #76	@ 0x4c
 8002cce:	2202      	movs	r2, #2
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e009      	b.n	8002ce8 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	334c      	adds	r3, #76	@ 0x4c
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3326      	adds	r3, #38	@ 0x26
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00b      	beq.n	8002d16 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3326      	adds	r3, #38	@ 0x26
 8002d0e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	f040 8136 	bne.w	8002f82 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d2c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d34:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d42:	461a      	mov	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	e11b      	b.n	8002f82 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	334d      	adds	r3, #77	@ 0x4d
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	f040 8081 	bne.w	8002e64 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	334d      	adds	r3, #77	@ 0x4d
 8002d72:	2202      	movs	r2, #2
 8002d74:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	331b      	adds	r3, #27
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	f040 80fa 	bne.w	8002f82 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	334c      	adds	r3, #76	@ 0x4c
 8002d9e:	2202      	movs	r2, #2
 8002da0:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	0151      	lsls	r1, r2, #5
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	440a      	add	r2, r1
 8002db8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc0:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	0151      	lsls	r1, r2, #5
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	440a      	add	r2, r1
 8002dd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002de0:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	0151      	lsls	r1, r2, #5
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	440a      	add	r2, r1
 8002df8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dfc:	f023 0320 	bic.w	r3, r3, #32
 8002e00:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	3326      	adds	r3, #38	@ 0x26
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3326      	adds	r3, #38	@ 0x26
 8002e28:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	f040 80a9 	bne.w	8002f82 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e46:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e4e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e08e      	b.n	8002f82 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	334d      	adds	r3, #77	@ 0x4d
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d143      	bne.n	8002f02 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	334d      	adds	r3, #77	@ 0x4d
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	334c      	adds	r3, #76	@ 0x4c
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3326      	adds	r3, #38	@ 0x26
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3326      	adds	r3, #38	@ 0x26
 8002ec8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d159      	bne.n	8002f82 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ee4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002eec:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002efa:	461a      	mov	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	e03f      	b.n	8002f82 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	334d      	adds	r3, #77	@ 0x4d
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d126      	bne.n	8002f66 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	334d      	adds	r3, #77	@ 0x4d
 8002f28:	2202      	movs	r2, #2
 8002f2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3344      	adds	r3, #68	@ 0x44
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	1c59      	adds	r1, r3, #1
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4403      	add	r3, r0
 8002f4c:	3344      	adds	r3, #68	@ 0x44
 8002f4e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334c      	adds	r3, #76	@ 0x4c
 8002f60:	2204      	movs	r2, #4
 8002f62:	701a      	strb	r2, [r3, #0]
 8002f64:	e00d      	b.n	8002f82 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	334d      	adds	r3, #77	@ 0x4d
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	f000 8100 	beq.w	800317e <HCD_HC_IN_IRQHandler+0xcca>
 8002f7e:	e000      	b.n	8002f82 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f80:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	334c      	adds	r3, #76	@ 0x4c
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f003 fcd3 	bl	8006944 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f9e:	e0ef      	b.n	8003180 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f003 f9d3 	bl	8006354 <USB_ReadChInterrupts>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb4:	2b40      	cmp	r3, #64	@ 0x40
 8002fb6:	d12f      	bne.n	8003018 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2340      	movs	r3, #64	@ 0x40
 8002fc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	334d      	adds	r3, #77	@ 0x4d
 8002fda:	2205      	movs	r2, #5
 8002fdc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	331a      	adds	r3, #26
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	3344      	adds	r3, #68	@ 0x44
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f003 fa1c 	bl	800644e <USB_HC_Halt>
 8003016:	e0b3      	b.n	8003180 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	4611      	mov	r1, r2
 8003020:	4618      	mov	r0, r3
 8003022:	f003 f997 	bl	8006354 <USB_ReadChInterrupts>
 8003026:	4603      	mov	r3, r0
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b10      	cmp	r3, #16
 800302e:	f040 80a7 	bne.w	8003180 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3326      	adds	r3, #38	@ 0x26
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d11b      	bne.n	8003080 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3344      	adds	r3, #68	@ 0x44
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	334d      	adds	r3, #77	@ 0x4d
 800306c:	2204      	movs	r2, #4
 800306e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	4611      	mov	r1, r2
 8003078:	4618      	mov	r0, r3
 800307a:	f003 f9e8 	bl	800644e <USB_HC_Halt>
 800307e:	e03f      	b.n	8003100 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	3326      	adds	r3, #38	@ 0x26
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3326      	adds	r3, #38	@ 0x26
 80030a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d129      	bne.n	8003100 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3344      	adds	r3, #68	@ 0x44
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	799b      	ldrb	r3, [r3, #6]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HCD_HC_IN_IRQHandler+0xc2a>
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	331b      	adds	r3, #27
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d110      	bne.n	8003100 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	334d      	adds	r3, #77	@ 0x4d
 80030ee:	2204      	movs	r2, #4
 80030f0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 f9a7 	bl	800644e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	331b      	adds	r3, #27
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d129      	bne.n	800316a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	331b      	adds	r3, #27
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4413      	add	r3, r2
 8003132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	0151      	lsls	r1, r2, #5
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	440a      	add	r2, r1
 8003140:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003148:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	0151      	lsls	r1, r2, #5
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	440a      	add	r2, r1
 8003160:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003164:	f043 0320 	orr.w	r3, r3, #32
 8003168:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003176:	461a      	mov	r2, r3
 8003178:	2310      	movs	r3, #16
 800317a:	6093      	str	r3, [r2, #8]
 800317c:	e000      	b.n	8003180 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800317e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f003 f8d5 	bl	8006354 <USB_ReadChInterrupts>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d11b      	bne.n	80031ec <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031c0:	461a      	mov	r2, r3
 80031c2:	2304      	movs	r3, #4
 80031c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80031c6:	78fa      	ldrb	r2, [r7, #3]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	1a9b      	subs	r3, r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	334d      	adds	r3, #77	@ 0x4d
 80031d6:	2207      	movs	r2, #7
 80031d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f003 f933 	bl	800644e <USB_HC_Halt>
 80031e8:	f000 bc89 	b.w	8003afe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f003 f8ad 	bl	8006354 <USB_ReadChInterrupts>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f003 0320 	and.w	r3, r3, #32
 8003200:	2b20      	cmp	r3, #32
 8003202:	f040 8082 	bne.w	800330a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003212:	461a      	mov	r2, r3
 8003214:	2320      	movs	r3, #32
 8003216:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	3319      	adds	r3, #25
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d124      	bne.n	8003278 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	3319      	adds	r3, #25
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334c      	adds	r3, #76	@ 0x4c
 8003252:	2202      	movs	r2, #2
 8003254:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	334d      	adds	r3, #77	@ 0x4d
 8003266:	2203      	movs	r2, #3
 8003268:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	4611      	mov	r1, r2
 8003272:	4618      	mov	r0, r3
 8003274:	f003 f8eb 	bl	800644e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	331a      	adds	r3, #26
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b01      	cmp	r3, #1
 800328c:	f040 8437 	bne.w	8003afe <HCD_HC_OUT_IRQHandler+0x978>
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	331b      	adds	r3, #27
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 842b 	bne.w	8003afe <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	3326      	adds	r3, #38	@ 0x26
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d009      	beq.n	80032d2 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	331b      	adds	r3, #27
 80032ce:	2201      	movs	r2, #1
 80032d0:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	334d      	adds	r3, #77	@ 0x4d
 80032e2:	2203      	movs	r2, #3
 80032e4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f003 f8ad 	bl	800644e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	3344      	adds	r3, #68	@ 0x44
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	e3f9      	b.n	8003afe <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	78fa      	ldrb	r2, [r7, #3]
 8003310:	4611      	mov	r1, r2
 8003312:	4618      	mov	r0, r3
 8003314:	f003 f81e 	bl	8006354 <USB_ReadChInterrupts>
 8003318:	4603      	mov	r3, r0
 800331a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800331e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003322:	d111      	bne.n	8003348 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4413      	add	r3, r2
 800332c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003330:	461a      	mov	r2, r3
 8003332:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003336:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f003 f884 	bl	800644e <USB_HC_Halt>
 8003346:	e3da      	b.n	8003afe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	4611      	mov	r1, r2
 8003350:	4618      	mov	r0, r3
 8003352:	f002 ffff 	bl	8006354 <USB_ReadChInterrupts>
 8003356:	4603      	mov	r3, r0
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d168      	bne.n	8003432 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	3344      	adds	r3, #68	@ 0x44
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f002 ffe9 	bl	8006354 <USB_ReadChInterrupts>
 8003382:	4603      	mov	r3, r0
 8003384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003388:	2b40      	cmp	r3, #64	@ 0x40
 800338a:	d112      	bne.n	80033b2 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	3319      	adds	r3, #25
 800339c:	2201      	movs	r2, #1
 800339e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ac:	461a      	mov	r2, r3
 80033ae:	2340      	movs	r3, #64	@ 0x40
 80033b0:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	331b      	adds	r3, #27
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d019      	beq.n	80033fc <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	1a9b      	subs	r3, r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	331b      	adds	r3, #27
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	0151      	lsls	r1, r2, #5
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	440a      	add	r2, r1
 80033f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033fa:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4413      	add	r3, r2
 8003404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003408:	461a      	mov	r2, r3
 800340a:	2301      	movs	r3, #1
 800340c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	334d      	adds	r3, #77	@ 0x4d
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f003 f80f 	bl	800644e <USB_HC_Halt>
 8003430:	e365      	b.n	8003afe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f002 ff8a 	bl	8006354 <USB_ReadChInterrupts>
 8003440:	4603      	mov	r3, r0
 8003442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003446:	2b40      	cmp	r3, #64	@ 0x40
 8003448:	d139      	bne.n	80034be <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	334d      	adds	r3, #77	@ 0x4d
 800345a:	2205      	movs	r2, #5
 800345c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	331a      	adds	r3, #26
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3319      	adds	r3, #25
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	3344      	adds	r3, #68	@ 0x44
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f002 ffd2 	bl	800644e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b6:	461a      	mov	r2, r3
 80034b8:	2340      	movs	r3, #64	@ 0x40
 80034ba:	6093      	str	r3, [r2, #8]
 80034bc:	e31f      	b.n	8003afe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f002 ff44 	bl	8006354 <USB_ReadChInterrupts>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d11a      	bne.n	800350c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80034d6:	78fb      	ldrb	r3, [r7, #3]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e2:	461a      	mov	r2, r3
 80034e4:	2308      	movs	r3, #8
 80034e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	334d      	adds	r3, #77	@ 0x4d
 80034f8:	2206      	movs	r2, #6
 80034fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f002 ffa2 	bl	800644e <USB_HC_Halt>
 800350a:	e2f8      	b.n	8003afe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f002 ff1d 	bl	8006354 <USB_ReadChInterrupts>
 800351a:	4603      	mov	r3, r0
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b10      	cmp	r3, #16
 8003522:	d144      	bne.n	80035ae <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	3344      	adds	r3, #68	@ 0x44
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	334d      	adds	r3, #77	@ 0x4d
 8003548:	2204      	movs	r2, #4
 800354a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3319      	adds	r3, #25
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d114      	bne.n	800358c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3318      	adds	r3, #24
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	3319      	adds	r3, #25
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f002 ff5a 	bl	800644e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a6:	461a      	mov	r2, r3
 80035a8:	2310      	movs	r3, #16
 80035aa:	6093      	str	r3, [r2, #8]
 80035ac:	e2a7      	b.n	8003afe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f002 fecc 	bl	8006354 <USB_ReadChInterrupts>
 80035bc:	4603      	mov	r3, r0
 80035be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c2:	2b80      	cmp	r3, #128	@ 0x80
 80035c4:	f040 8083 	bne.w	80036ce <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	799b      	ldrb	r3, [r3, #6]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d111      	bne.n	80035f4 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	334d      	adds	r3, #77	@ 0x4d
 80035e0:	2207      	movs	r2, #7
 80035e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	4611      	mov	r1, r2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f002 ff2e 	bl	800644e <USB_HC_Halt>
 80035f2:	e062      	b.n	80036ba <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3344      	adds	r3, #68	@ 0x44
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1c59      	adds	r1, r3, #1
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	4613      	mov	r3, r2
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4403      	add	r3, r0
 8003614:	3344      	adds	r3, #68	@ 0x44
 8003616:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	3344      	adds	r3, #68	@ 0x44
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d922      	bls.n	8003674 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3344      	adds	r3, #68	@ 0x44
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	334c      	adds	r3, #76	@ 0x4c
 8003652:	2204      	movs	r2, #4
 8003654:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	1a9b      	subs	r3, r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	334c      	adds	r3, #76	@ 0x4c
 8003666:	781a      	ldrb	r2, [r3, #0]
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	4619      	mov	r1, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f003 f969 	bl	8006944 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003672:	e022      	b.n	80036ba <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	334c      	adds	r3, #76	@ 0x4c
 8003684:	2202      	movs	r2, #2
 8003686:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800369e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036a6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b4:	461a      	mov	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c6:	461a      	mov	r2, r3
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	6093      	str	r3, [r2, #8]
 80036cc:	e217      	b.n	8003afe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	4611      	mov	r1, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f002 fe3c 	bl	8006354 <USB_ReadChInterrupts>
 80036dc:	4603      	mov	r3, r0
 80036de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e6:	d11b      	bne.n	8003720 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	334d      	adds	r3, #77	@ 0x4d
 80036f8:	2209      	movs	r2, #9
 80036fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f002 fea2 	bl	800644e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4413      	add	r3, r2
 8003712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003716:	461a      	mov	r2, r3
 8003718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800371c:	6093      	str	r3, [r2, #8]
 800371e:	e1ee      	b.n	8003afe <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	4611      	mov	r1, r2
 8003728:	4618      	mov	r0, r3
 800372a:	f002 fe13 	bl	8006354 <USB_ReadChInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b02      	cmp	r3, #2
 8003736:	f040 81df 	bne.w	8003af8 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	015a      	lsls	r2, r3, #5
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4413      	add	r3, r2
 8003742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003746:	461a      	mov	r2, r3
 8003748:	2302      	movs	r3, #2
 800374a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	334d      	adds	r3, #77	@ 0x4d
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b01      	cmp	r3, #1
 8003760:	f040 8093 	bne.w	800388a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	334d      	adds	r3, #77	@ 0x4d
 8003774:	2202      	movs	r2, #2
 8003776:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	334c      	adds	r3, #76	@ 0x4c
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	3326      	adds	r3, #38	@ 0x26
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d00b      	beq.n	80037ba <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3326      	adds	r3, #38	@ 0x26
 80037b2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	f040 8190 	bne.w	8003ada <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	799b      	ldrb	r3, [r3, #6]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d115      	bne.n	80037ee <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	333d      	adds	r3, #61	@ 0x3d
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	78fa      	ldrb	r2, [r7, #3]
 80037d6:	f083 0301 	eor.w	r3, r3, #1
 80037da:	b2d8      	uxtb	r0, r3
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	333d      	adds	r3, #61	@ 0x3d
 80037ea:	4602      	mov	r2, r0
 80037ec:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	799b      	ldrb	r3, [r3, #6]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	f040 8171 	bne.w	8003ada <HCD_HC_OUT_IRQHandler+0x954>
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	3334      	adds	r3, #52	@ 0x34
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 8165 	beq.w	8003ada <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	3334      	adds	r3, #52	@ 0x34
 8003820:	6819      	ldr	r1, [r3, #0]
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4403      	add	r3, r0
 8003830:	3328      	adds	r3, #40	@ 0x28
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	440b      	add	r3, r1
 8003836:	1e59      	subs	r1, r3, #1
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4403      	add	r3, r0
 8003846:	3328      	adds	r3, #40	@ 0x28
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	fbb1 f3f3 	udiv	r3, r1, r3
 800384e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 813f 	beq.w	8003ada <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800385c:	78fa      	ldrb	r2, [r7, #3]
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	1a9b      	subs	r3, r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	333d      	adds	r3, #61	@ 0x3d
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	f083 0301 	eor.w	r3, r3, #1
 8003874:	b2d8      	uxtb	r0, r3
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	333d      	adds	r3, #61	@ 0x3d
 8003884:	4602      	mov	r2, r0
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e127      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	334d      	adds	r3, #77	@ 0x4d
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b03      	cmp	r3, #3
 800389e:	d120      	bne.n	80038e2 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	334d      	adds	r3, #77	@ 0x4d
 80038b0:	2202      	movs	r2, #2
 80038b2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	331b      	adds	r3, #27
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	f040 8107 	bne.w	8003ada <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	334c      	adds	r3, #76	@ 0x4c
 80038dc:	2202      	movs	r2, #2
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	e0fb      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	334d      	adds	r3, #77	@ 0x4d
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d13a      	bne.n	800396e <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	334d      	adds	r3, #77	@ 0x4d
 8003908:	2202      	movs	r2, #2
 800390a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	334c      	adds	r3, #76	@ 0x4c
 800391c:	2202      	movs	r2, #2
 800391e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	331b      	adds	r3, #27
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	f040 80d1 	bne.w	8003ada <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	331b      	adds	r3, #27
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	0151      	lsls	r1, r2, #5
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	440a      	add	r2, r1
 8003962:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800396a:	6053      	str	r3, [r2, #4]
 800396c:	e0b5      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	334d      	adds	r3, #77	@ 0x4d
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b05      	cmp	r3, #5
 8003982:	d114      	bne.n	80039ae <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	334d      	adds	r3, #77	@ 0x4d
 8003994:	2202      	movs	r2, #2
 8003996:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	334c      	adds	r3, #76	@ 0x4c
 80039a8:	2202      	movs	r2, #2
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	e095      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	334d      	adds	r3, #77	@ 0x4d
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b06      	cmp	r3, #6
 80039c2:	d114      	bne.n	80039ee <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	334d      	adds	r3, #77	@ 0x4d
 80039d4:	2202      	movs	r2, #2
 80039d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	334c      	adds	r3, #76	@ 0x4c
 80039e8:	2205      	movs	r2, #5
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	e075      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	334d      	adds	r3, #77	@ 0x4d
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b07      	cmp	r3, #7
 8003a02:	d00a      	beq.n	8003a1a <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003a04:	78fa      	ldrb	r2, [r7, #3]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	334d      	adds	r3, #77	@ 0x4d
 8003a14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a16:	2b09      	cmp	r3, #9
 8003a18:	d170      	bne.n	8003afc <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	334d      	adds	r3, #77	@ 0x4d
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3344      	adds	r3, #68	@ 0x44
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	1c59      	adds	r1, r3, #1
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4403      	add	r3, r0
 8003a4e:	3344      	adds	r3, #68	@ 0x44
 8003a50:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	3344      	adds	r3, #68	@ 0x44
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d914      	bls.n	8003a92 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	3344      	adds	r3, #68	@ 0x44
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	334c      	adds	r3, #76	@ 0x4c
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a90:	e022      	b.n	8003ad8 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	334c      	adds	r3, #76	@ 0x4c
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003abc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ac4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ad8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ada:	78fa      	ldrb	r2, [r7, #3]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	1a9b      	subs	r3, r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	334c      	adds	r3, #76	@ 0x4c
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	4619      	mov	r1, r3
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f002 ff27 	bl	8006944 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003af6:	e002      	b.n	8003afe <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003af8:	bf00      	nop
 8003afa:	e000      	b.n	8003afe <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003afc:	bf00      	nop
  }
}
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	@ 0x28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	0c5b      	lsrs	r3, r3, #17
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b38:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d004      	beq.n	8003b4a <HCD_RXQLVL_IRQHandler+0x46>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	f000 80b6 	beq.w	8003cb4 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b48:	e0b7      	b.n	8003cba <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80b3 	beq.w	8003cb8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4613      	mov	r3, r2
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	332c      	adds	r3, #44	@ 0x2c
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80a7 	beq.w	8003cb8 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	3338      	adds	r3, #56	@ 0x38
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	18d1      	adds	r1, r2, r3
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4613      	mov	r3, r2
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4403      	add	r3, r0
 8003b8e:	3334      	adds	r3, #52	@ 0x34
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4299      	cmp	r1, r3
 8003b94:	f200 8083 	bhi.w	8003c9e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	332c      	adds	r3, #44	@ 0x2c
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	b292      	uxth	r2, r2
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f002 fb63 	bl	800627e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	332c      	adds	r3, #44	@ 0x2c
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	18d1      	adds	r1, r2, r3
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4403      	add	r3, r0
 8003bdc:	332c      	adds	r3, #44	@ 0x2c
 8003bde:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4613      	mov	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	3338      	adds	r3, #56	@ 0x38
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	18d1      	adds	r1, r2, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4403      	add	r3, r0
 8003c04:	3338      	adds	r3, #56	@ 0x38
 8003c06:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	0cdb      	lsrs	r3, r3, #19
 8003c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c1c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4613      	mov	r3, r2
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	3328      	adds	r3, #40	@ 0x28
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d13f      	bne.n	8003cb8 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d03c      	beq.n	8003cb8 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c54:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c5c:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4613      	mov	r3, r2
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	333c      	adds	r3, #60	@ 0x3c
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	f083 0301 	eor.w	r3, r3, #1
 8003c86:	b2d8      	uxtb	r0, r3
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	333c      	adds	r3, #60	@ 0x3c
 8003c98:	4602      	mov	r2, r0
 8003c9a:	701a      	strb	r2, [r3, #0]
      break;
 8003c9c:	e00c      	b.n	8003cb8 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	334c      	adds	r3, #76	@ 0x4c
 8003cae:	2204      	movs	r2, #4
 8003cb0:	701a      	strb	r2, [r3, #0]
      break;
 8003cb2:	e001      	b.n	8003cb8 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003cb4:	bf00      	nop
 8003cb6:	e000      	b.n	8003cba <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003cb8:	bf00      	nop
  }
}
 8003cba:	bf00      	nop
 8003cbc:	3728      	adds	r7, #40	@ 0x28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b086      	sub	sp, #24
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003cee:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d10b      	bne.n	8003d12 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d102      	bne.n	8003d0a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f002 fe01 	bl	800690c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f043 0302 	orr.w	r3, r3, #2
 8003d10:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d132      	bne.n	8003d82 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f043 0308 	orr.w	r3, r3, #8
 8003d22:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d126      	bne.n	8003d7c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	7a5b      	ldrb	r3, [r3, #9]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d113      	bne.n	8003d5e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003d3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d40:	d106      	bne.n	8003d50 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2102      	movs	r1, #2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f002 fb32 	bl	80063b2 <USB_InitFSLSPClkSel>
 8003d4e:	e011      	b.n	8003d74 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2101      	movs	r1, #1
 8003d56:	4618      	mov	r0, r3
 8003d58:	f002 fb2b 	bl	80063b2 <USB_InitFSLSPClkSel>
 8003d5c:	e00a      	b.n	8003d74 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	79db      	ldrb	r3, [r3, #7]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d106      	bne.n	8003d74 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003d72:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f002 fdf3 	bl	8006960 <HAL_HCD_PortEnabled_Callback>
 8003d7a:	e002      	b.n	8003d82 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f002 fdfd 	bl	800697c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d103      	bne.n	8003d94 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f043 0320 	orr.w	r3, r3, #32
 8003d92:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e12b      	b.n	8004012 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fd fabc 	bl	800134c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2224      	movs	r2, #36	@ 0x24
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f001 fea0 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8003e10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	4a81      	ldr	r2, [pc, #516]	@ (800401c <HAL_I2C_Init+0x274>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d807      	bhi.n	8003e2c <HAL_I2C_Init+0x84>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4a80      	ldr	r2, [pc, #512]	@ (8004020 <HAL_I2C_Init+0x278>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	bf94      	ite	ls
 8003e24:	2301      	movls	r3, #1
 8003e26:	2300      	movhi	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e006      	b.n	8003e3a <HAL_I2C_Init+0x92>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4a7d      	ldr	r2, [pc, #500]	@ (8004024 <HAL_I2C_Init+0x27c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	bf94      	ite	ls
 8003e34:	2301      	movls	r3, #1
 8003e36:	2300      	movhi	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0e7      	b.n	8004012 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a78      	ldr	r2, [pc, #480]	@ (8004028 <HAL_I2C_Init+0x280>)
 8003e46:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4a:	0c9b      	lsrs	r3, r3, #18
 8003e4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	4a6a      	ldr	r2, [pc, #424]	@ (800401c <HAL_I2C_Init+0x274>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d802      	bhi.n	8003e7c <HAL_I2C_Init+0xd4>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	e009      	b.n	8003e90 <HAL_I2C_Init+0xe8>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	4a69      	ldr	r2, [pc, #420]	@ (800402c <HAL_I2C_Init+0x284>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	3301      	adds	r3, #1
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ea2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	495c      	ldr	r1, [pc, #368]	@ (800401c <HAL_I2C_Init+0x274>)
 8003eac:	428b      	cmp	r3, r1
 8003eae:	d819      	bhi.n	8003ee4 <HAL_I2C_Init+0x13c>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1e59      	subs	r1, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ebe:	1c59      	adds	r1, r3, #1
 8003ec0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ec4:	400b      	ands	r3, r1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_I2C_Init+0x138>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1e59      	subs	r1, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ede:	e051      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	e04f      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d111      	bne.n	8003f10 <HAL_I2C_Init+0x168>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	1e58      	subs	r0, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	440b      	add	r3, r1
 8003efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efe:	3301      	adds	r3, #1
 8003f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	e012      	b.n	8003f36 <HAL_I2C_Init+0x18e>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1e58      	subs	r0, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	0099      	lsls	r1, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f26:	3301      	adds	r3, #1
 8003f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_I2C_Init+0x196>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e022      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10e      	bne.n	8003f64 <HAL_I2C_Init+0x1bc>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1e58      	subs	r0, r3, #1
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	440b      	add	r3, r1
 8003f54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f62:	e00f      	b.n	8003f84 <HAL_I2C_Init+0x1dc>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1e58      	subs	r0, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	0099      	lsls	r1, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	6809      	ldr	r1, [r1, #0]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003fb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6911      	ldr	r1, [r2, #16]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68d2      	ldr	r2, [r2, #12]
 8003fbe:	4311      	orrs	r1, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	000186a0 	.word	0x000186a0
 8004020:	001e847f 	.word	0x001e847f
 8004024:	003d08ff 	.word	0x003d08ff
 8004028:	431bde83 	.word	0x431bde83
 800402c:	10624dd3 	.word	0x10624dd3

08004030 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af02      	add	r7, sp, #8
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	461a      	mov	r2, r3
 800403c:	460b      	mov	r3, r1
 800403e:	817b      	strh	r3, [r7, #10]
 8004040:	4613      	mov	r3, r2
 8004042:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004044:	f7fd fe62 	bl	8001d0c <HAL_GetTick>
 8004048:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b20      	cmp	r3, #32
 8004054:	f040 80e0 	bne.w	8004218 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	2319      	movs	r3, #25
 800405e:	2201      	movs	r2, #1
 8004060:	4970      	ldr	r1, [pc, #448]	@ (8004224 <HAL_I2C_Master_Transmit+0x1f4>)
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f964 	bl	8004330 <I2C_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800406e:	2302      	movs	r3, #2
 8004070:	e0d3      	b.n	800421a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_I2C_Master_Transmit+0x50>
 800407c:	2302      	movs	r3, #2
 800407e:	e0cc      	b.n	800421a <HAL_I2C_Master_Transmit+0x1ea>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d007      	beq.n	80040a6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2221      	movs	r2, #33	@ 0x21
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2210      	movs	r2, #16
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	893a      	ldrh	r2, [r7, #8]
 80040d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4a50      	ldr	r2, [pc, #320]	@ (8004228 <HAL_I2C_Master_Transmit+0x1f8>)
 80040e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040e8:	8979      	ldrh	r1, [r7, #10]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	6a3a      	ldr	r2, [r7, #32]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 f89c 	bl	800422c <I2C_MasterRequestWrite>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e08d      	b.n	800421a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004114:	e066      	b.n	80041e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	6a39      	ldr	r1, [r7, #32]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fa22 	bl	8004564 <I2C_WaitOnTXEFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00d      	beq.n	8004142 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	2b04      	cmp	r3, #4
 800412c:	d107      	bne.n	800413e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e06b      	b.n	800421a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	781a      	ldrb	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b04      	cmp	r3, #4
 800417e:	d11b      	bne.n	80041b8 <HAL_I2C_Master_Transmit+0x188>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	d017      	beq.n	80041b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	6a39      	ldr	r1, [r7, #32]
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fa19 	bl	80045f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00d      	beq.n	80041e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d107      	bne.n	80041e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e01a      	b.n	800421a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d194      	bne.n	8004116 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	e000      	b.n	800421a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004218:	2302      	movs	r3, #2
  }
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	00100002 	.word	0x00100002
 8004228:	ffff0000 	.word	0xffff0000

0800422c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af02      	add	r7, sp, #8
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	607a      	str	r2, [r7, #4]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	460b      	mov	r3, r1
 800423a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2b08      	cmp	r3, #8
 8004246:	d006      	beq.n	8004256 <I2C_MasterRequestWrite+0x2a>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d003      	beq.n	8004256 <I2C_MasterRequestWrite+0x2a>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004254:	d108      	bne.n	8004268 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e00b      	b.n	8004280 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426c:	2b12      	cmp	r3, #18
 800426e:	d107      	bne.n	8004280 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800427e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f84f 	bl	8004330 <I2C_WaitOnFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00d      	beq.n	80042b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042a6:	d103      	bne.n	80042b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e035      	b.n	8004320 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042bc:	d108      	bne.n	80042d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042be:	897b      	ldrh	r3, [r7, #10]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042cc:	611a      	str	r2, [r3, #16]
 80042ce:	e01b      	b.n	8004308 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042d0:	897b      	ldrh	r3, [r7, #10]
 80042d2:	11db      	asrs	r3, r3, #7
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f003 0306 	and.w	r3, r3, #6
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f063 030f 	orn	r3, r3, #15
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	490e      	ldr	r1, [pc, #56]	@ (8004328 <I2C_MasterRequestWrite+0xfc>)
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f898 	bl	8004424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e010      	b.n	8004320 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042fe:	897b      	ldrh	r3, [r7, #10]
 8004300:	b2da      	uxtb	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	4907      	ldr	r1, [pc, #28]	@ (800432c <I2C_MasterRequestWrite+0x100>)
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f888 	bl	8004424 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	00010008 	.word	0x00010008
 800432c:	00010002 	.word	0x00010002

08004330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004340:	e048      	b.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004348:	d044      	beq.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434a:	f7fd fcdf 	bl	8001d0c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d302      	bcc.n	8004360 <I2C_WaitOnFlagUntilTimeout+0x30>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d139      	bne.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	0c1b      	lsrs	r3, r3, #16
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10d      	bne.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x56>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	43da      	mvns	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	4013      	ands	r3, r2
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf0c      	ite	eq
 800437c:	2301      	moveq	r3, #1
 800437e:	2300      	movne	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	e00c      	b.n	80043a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	43da      	mvns	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4013      	ands	r3, r2
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf0c      	ite	eq
 8004398:	2301      	moveq	r3, #1
 800439a:	2300      	movne	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	461a      	mov	r2, r3
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d116      	bne.n	80043d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c0:	f043 0220 	orr.w	r2, r3, #32
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e023      	b.n	800441c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	0c1b      	lsrs	r3, r3, #16
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d10d      	bne.n	80043fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	43da      	mvns	r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4013      	ands	r3, r2
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	461a      	mov	r2, r3
 80043f8:	e00c      	b.n	8004414 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	43da      	mvns	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	4013      	ands	r3, r2
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf0c      	ite	eq
 800440c:	2301      	moveq	r3, #1
 800440e:	2300      	movne	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	461a      	mov	r2, r3
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	429a      	cmp	r2, r3
 8004418:	d093      	beq.n	8004342 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004432:	e071      	b.n	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800443e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004442:	d123      	bne.n	800448c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004452:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800445c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004478:	f043 0204 	orr.w	r2, r3, #4
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e067      	b.n	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004492:	d041      	beq.n	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004494:	f7fd fc3a 	bl	8001d0c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d302      	bcc.n	80044aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d136      	bne.n	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d10c      	bne.n	80044ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	43da      	mvns	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4013      	ands	r3, r2
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bf14      	ite	ne
 80044c6:	2301      	movne	r3, #1
 80044c8:	2300      	moveq	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	e00b      	b.n	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	43da      	mvns	r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	4013      	ands	r3, r2
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	bf14      	ite	ne
 80044e0:	2301      	movne	r3, #1
 80044e2:	2300      	moveq	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d016      	beq.n	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e021      	b.n	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	0c1b      	lsrs	r3, r3, #16
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	d10c      	bne.n	800453c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	43da      	mvns	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	4013      	ands	r3, r2
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	bf14      	ite	ne
 8004534:	2301      	movne	r3, #1
 8004536:	2300      	moveq	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	e00b      	b.n	8004554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	43da      	mvns	r2, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4013      	ands	r3, r2
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	bf14      	ite	ne
 800454e:	2301      	movne	r3, #1
 8004550:	2300      	moveq	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	f47f af6d 	bne.w	8004434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004570:	e034      	b.n	80045dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f886 	bl	8004684 <I2C_IsAcknowledgeFailed>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e034      	b.n	80045ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004588:	d028      	beq.n	80045dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f7fd fbbf 	bl	8001d0c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d11d      	bne.n	80045dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045aa:	2b80      	cmp	r3, #128	@ 0x80
 80045ac:	d016      	beq.n	80045dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c8:	f043 0220 	orr.w	r2, r3, #32
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e007      	b.n	80045ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e6:	2b80      	cmp	r3, #128	@ 0x80
 80045e8:	d1c3      	bne.n	8004572 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004600:	e034      	b.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f83e 	bl	8004684 <I2C_IsAcknowledgeFailed>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e034      	b.n	800467c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004618:	d028      	beq.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461a:	f7fd fb77 	bl	8001d0c <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	d302      	bcc.n	8004630 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d11d      	bne.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b04      	cmp	r3, #4
 800463c:	d016      	beq.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e007      	b.n	800467c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b04      	cmp	r3, #4
 8004678:	d1c3      	bne.n	8004602 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800469a:	d11b      	bne.n	80046d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	f043 0204 	orr.w	r2, r3, #4
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e128      	b.n	8004948 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a90      	ldr	r2, [pc, #576]	@ (8004950 <HAL_I2S_Init+0x26c>)
 800470e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7fc fe91 	bl	8001438 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800472c:	f023 030f 	bic.w	r3, r3, #15
 8004730:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2202      	movs	r2, #2
 8004738:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d060      	beq.n	8004804 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800474a:	2310      	movs	r3, #16
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e001      	b.n	8004754 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004750:	2320      	movs	r3, #32
 8004752:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b20      	cmp	r3, #32
 800475a:	d802      	bhi.n	8004762 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004762:	2001      	movs	r0, #1
 8004764:	f001 faea 	bl	8005d3c <HAL_RCCEx_GetPeriphCLKFreq>
 8004768:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004772:	d125      	bne.n	80047c0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d010      	beq.n	800479e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	fbb2 f2f3 	udiv	r2, r2, r3
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	461a      	mov	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	fbb2 f3f3 	udiv	r3, r2, r3
 8004798:	3305      	adds	r3, #5
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	e01f      	b.n	80047de <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	461a      	mov	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	3305      	adds	r3, #5
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	e00e      	b.n	80047de <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	461a      	mov	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047da:	3305      	adds	r3, #5
 80047dc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4a5c      	ldr	r2, [pc, #368]	@ (8004954 <HAL_I2S_Init+0x270>)
 80047e2:	fba2 2303 	umull	r2, r3, r2, r3
 80047e6:	08db      	lsrs	r3, r3, #3
 80047e8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	021b      	lsls	r3, r3, #8
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	e003      	b.n	800480c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004804:	2302      	movs	r3, #2
 8004806:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d902      	bls.n	8004818 <HAL_I2S_Init+0x134>
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	2bff      	cmp	r3, #255	@ 0xff
 8004816:	d907      	bls.n	8004828 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481c:	f043 0210 	orr.w	r2, r3, #16
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e08f      	b.n	8004948 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	ea42 0103 	orr.w	r1, r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	430a      	orrs	r2, r1
 800483a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004846:	f023 030f 	bic.w	r3, r3, #15
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6851      	ldr	r1, [r2, #4]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6892      	ldr	r2, [r2, #8]
 8004852:	4311      	orrs	r1, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	68d2      	ldr	r2, [r2, #12]
 8004858:	4311      	orrs	r1, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6992      	ldr	r2, [r2, #24]
 800485e:	430a      	orrs	r2, r1
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800486a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d161      	bne.n	8004938 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a38      	ldr	r2, [pc, #224]	@ (8004958 <HAL_I2S_Init+0x274>)
 8004878:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a37      	ldr	r2, [pc, #220]	@ (800495c <HAL_I2S_Init+0x278>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d101      	bne.n	8004888 <HAL_I2S_Init+0x1a4>
 8004884:	4b36      	ldr	r3, [pc, #216]	@ (8004960 <HAL_I2S_Init+0x27c>)
 8004886:	e001      	b.n	800488c <HAL_I2S_Init+0x1a8>
 8004888:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	4932      	ldr	r1, [pc, #200]	@ (800495c <HAL_I2S_Init+0x278>)
 8004894:	428a      	cmp	r2, r1
 8004896:	d101      	bne.n	800489c <HAL_I2S_Init+0x1b8>
 8004898:	4a31      	ldr	r2, [pc, #196]	@ (8004960 <HAL_I2S_Init+0x27c>)
 800489a:	e001      	b.n	80048a0 <HAL_I2S_Init+0x1bc>
 800489c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80048a0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80048a4:	f023 030f 	bic.w	r3, r3, #15
 80048a8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2b      	ldr	r2, [pc, #172]	@ (800495c <HAL_I2S_Init+0x278>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d101      	bne.n	80048b8 <HAL_I2S_Init+0x1d4>
 80048b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004960 <HAL_I2S_Init+0x27c>)
 80048b6:	e001      	b.n	80048bc <HAL_I2S_Init+0x1d8>
 80048b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048bc:	2202      	movs	r2, #2
 80048be:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a25      	ldr	r2, [pc, #148]	@ (800495c <HAL_I2S_Init+0x278>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d101      	bne.n	80048ce <HAL_I2S_Init+0x1ea>
 80048ca:	4b25      	ldr	r3, [pc, #148]	@ (8004960 <HAL_I2S_Init+0x27c>)
 80048cc:	e001      	b.n	80048d2 <HAL_I2S_Init+0x1ee>
 80048ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048de:	d003      	beq.n	80048e8 <HAL_I2S_Init+0x204>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d103      	bne.n	80048f0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80048e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	e001      	b.n	80048f4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80048f0:	2300      	movs	r3, #0
 80048f2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80048fe:	4313      	orrs	r3, r2
 8004900:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004908:	4313      	orrs	r3, r2
 800490a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004912:	4313      	orrs	r3, r2
 8004914:	b29a      	uxth	r2, r3
 8004916:	897b      	ldrh	r3, [r7, #10]
 8004918:	4313      	orrs	r3, r2
 800491a:	b29b      	uxth	r3, r3
 800491c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004920:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a0d      	ldr	r2, [pc, #52]	@ (800495c <HAL_I2S_Init+0x278>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d101      	bne.n	8004930 <HAL_I2S_Init+0x24c>
 800492c:	4b0c      	ldr	r3, [pc, #48]	@ (8004960 <HAL_I2S_Init+0x27c>)
 800492e:	e001      	b.n	8004934 <HAL_I2S_Init+0x250>
 8004930:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004934:	897a      	ldrh	r2, [r7, #10]
 8004936:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	08004c35 	.word	0x08004c35
 8004954:	cccccccd 	.word	0xcccccccd
 8004958:	08004dbd 	.word	0x08004dbd
 800495c:	40003800 	.word	0x40003800
 8004960:	40003400 	.word	0x40003400

08004964 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	4613      	mov	r3, r2
 8004972:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_I2S_Transmit+0x1c>
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e0d8      	b.n	8004b36 <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	d001      	beq.n	8004994 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8004990:	2302      	movs	r3, #2
 8004992:	e0d0      	b.n	8004b36 <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_I2S_Transmit+0x40>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e0c8      	b.n	8004b36 <HAL_I2S_Transmit+0x1d2>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2203      	movs	r2, #3
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d002      	beq.n	80049d8 <HAL_I2S_Transmit+0x74>
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b05      	cmp	r3, #5
 80049d6:	d10a      	bne.n	80049ee <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 80049d8:	88fb      	ldrh	r3, [r7, #6]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049ec:	e005      	b.n	80049fa <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	88fa      	ldrh	r2, [r7, #6]
 80049f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	88fa      	ldrh	r2, [r7, #6]
 80049f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a10:	d007      	beq.n	8004a22 <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69da      	ldr	r2, [r3, #28]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a20:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2201      	movs	r2, #1
 8004a26:	2102      	movs	r1, #2
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f98d 	bl	8004d48 <I2S_WaitFlagStateUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d04e      	beq.n	8004ad2 <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a38:	f043 0201 	orr.w	r2, r3, #1
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e070      	b.n	8004b36 <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	881a      	ldrh	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	1c9a      	adds	r2, r3, #2
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	2102      	movs	r1, #2
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f962 	bl	8004d48 <I2S_WaitFlagStateUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00f      	beq.n	8004aaa <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8e:	f043 0201 	orr.w	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e045      	b.n	8004b36 <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 0308 	and.w	r3, r3, #8
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d10c      	bne.n	8004ad2 <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aca:	f043 0204 	orr.w	r2, r3, #4
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->TxXferCount > 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1bb      	bne.n	8004a54 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004af0:	d118      	bne.n	8004b24 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2200      	movs	r2, #0
 8004af6:	2180      	movs	r1, #128	@ 0x80
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f925 	bl	8004d48 <I2S_WaitFlagStateUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00f      	beq.n	8004b24 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b08:	f043 0201 	orr.w	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e008      	b.n	8004b36 <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	881a      	ldrh	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	1c9a      	adds	r2, r3, #2
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10e      	bne.n	8004bce <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bbe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff ffb8 	bl	8004b3e <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be8:	b292      	uxth	r2, r2
 8004bea:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	1c9a      	adds	r2, r3, #2
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10e      	bne.n	8004c2c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c1c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff ff93 	bl	8004b52 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b04      	cmp	r3, #4
 8004c4e:	d13a      	bne.n	8004cc6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d109      	bne.n	8004c6e <I2S_IRQHandler+0x3a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c64:	2b40      	cmp	r3, #64	@ 0x40
 8004c66:	d102      	bne.n	8004c6e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff ffb4 	bl	8004bd6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c74:	2b40      	cmp	r3, #64	@ 0x40
 8004c76:	d126      	bne.n	8004cc6 <I2S_IRQHandler+0x92>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 0320 	and.w	r3, r3, #32
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d11f      	bne.n	8004cc6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c94:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c96:	2300      	movs	r3, #0
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb8:	f043 0202 	orr.w	r2, r3, #2
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff50 	bl	8004b66 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d136      	bne.n	8004d40 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d109      	bne.n	8004cf0 <I2S_IRQHandler+0xbc>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce6:	2b80      	cmp	r3, #128	@ 0x80
 8004ce8:	d102      	bne.n	8004cf0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff ff45 	bl	8004b7a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d122      	bne.n	8004d40 <I2S_IRQHandler+0x10c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f003 0320 	and.w	r3, r3, #32
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d11b      	bne.n	8004d40 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d16:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d32:	f043 0204 	orr.w	r2, r3, #4
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff ff13 	bl	8004b66 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d40:	bf00      	nop
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d58:	f7fc ffd8 	bl	8001d0c <HAL_GetTick>
 8004d5c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004d5e:	e018      	b.n	8004d92 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d66:	d014      	beq.n	8004d92 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8004d68:	f7fc ffd0 	bl	8001d0c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d902      	bls.n	8004d7e <I2S_WaitFlagStateUntilTimeout+0x36>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e00f      	b.n	8004db2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2300      	movne	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d1d7      	bne.n	8004d60 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a92      	ldr	r2, [pc, #584]	@ (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d101      	bne.n	8004dda <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004dd6:	4b92      	ldr	r3, [pc, #584]	@ (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004dd8:	e001      	b.n	8004dde <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004dda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a8b      	ldr	r2, [pc, #556]	@ (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d101      	bne.n	8004df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004df4:	4b8a      	ldr	r3, [pc, #552]	@ (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004df6:	e001      	b.n	8004dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004df8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e08:	d004      	beq.n	8004e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 8099 	bne.w	8004f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d107      	bne.n	8004e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f925 	bl	8005078 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d107      	bne.n	8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f9c8 	bl	80051d8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4e:	2b40      	cmp	r3, #64	@ 0x40
 8004e50:	d13a      	bne.n	8004ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d035      	beq.n	8004ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a6e      	ldr	r2, [pc, #440]	@ (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d101      	bne.n	8004e6a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004e66:	4b6e      	ldr	r3, [pc, #440]	@ (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e68:	e001      	b.n	8004e6e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004e6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4969      	ldr	r1, [pc, #420]	@ (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e76:	428b      	cmp	r3, r1
 8004e78:	d101      	bne.n	8004e7e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004e7a:	4b69      	ldr	r3, [pc, #420]	@ (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e7c:	e001      	b.n	8004e82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004e7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e86:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e96:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	f043 0202 	orr.w	r2, r3, #2
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff fe4f 	bl	8004b66 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	f040 80c3 	bne.w	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 80bd 	beq.w	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004eee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a49      	ldr	r2, [pc, #292]	@ (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d101      	bne.n	8004efe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004efa:	4b49      	ldr	r3, [pc, #292]	@ (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004efc:	e001      	b.n	8004f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004efe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4944      	ldr	r1, [pc, #272]	@ (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f0a:	428b      	cmp	r3, r1
 8004f0c:	d101      	bne.n	8004f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004f0e:	4b44      	ldr	r3, [pc, #272]	@ (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f10:	e001      	b.n	8004f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004f12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f16:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f1a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60bb      	str	r3, [r7, #8]
 8004f28:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f36:	f043 0204 	orr.w	r2, r3, #4
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff fe11 	bl	8004b66 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f44:	e089      	b.n	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d107      	bne.n	8004f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f8be 	bl	80050dc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d107      	bne.n	8004f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f8fd 	bl	8005174 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f80:	2b40      	cmp	r3, #64	@ 0x40
 8004f82:	d12f      	bne.n	8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d02a      	beq.n	8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f9c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d101      	bne.n	8004fac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004faa:	e001      	b.n	8004fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004fac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4919      	ldr	r1, [pc, #100]	@ (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fb8:	428b      	cmp	r3, r1
 8004fba:	d101      	bne.n	8004fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004fbc:	4b18      	ldr	r3, [pc, #96]	@ (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fbe:	e001      	b.n	8004fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004fc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fc4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004fc8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd6:	f043 0202 	orr.w	r2, r3, #2
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff fdc1 	bl	8004b66 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d136      	bne.n	800505c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f003 0320 	and.w	r3, r3, #32
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d031      	beq.n	800505c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a07      	ldr	r2, [pc, #28]	@ (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d101      	bne.n	8005006 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005002:	4b07      	ldr	r3, [pc, #28]	@ (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005004:	e001      	b.n	800500a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005006:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4902      	ldr	r1, [pc, #8]	@ (800501c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005012:	428b      	cmp	r3, r1
 8005014:	d106      	bne.n	8005024 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005016:	4b02      	ldr	r3, [pc, #8]	@ (8005020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005018:	e006      	b.n	8005028 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800501a:	bf00      	nop
 800501c:	40003800 	.word	0x40003800
 8005020:	40003400 	.word	0x40003400
 8005024:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005028:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800502c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800503c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504a:	f043 0204 	orr.w	r2, r3, #4
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7ff fd87 	bl	8004b66 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005058:	e000      	b.n	800505c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800505a:	bf00      	nop
}
 800505c:	bf00      	nop
 800505e:	3720      	adds	r7, #32
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	1c99      	adds	r1, r3, #2
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	6251      	str	r1, [r2, #36]	@ 0x24
 800508a:	881a      	ldrh	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005096:	b29b      	uxth	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d113      	bne.n	80050d2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80050b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ffc9 	bl	8005064 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e8:	1c99      	adds	r1, r3, #2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6251      	str	r1, [r2, #36]	@ 0x24
 80050ee:	8819      	ldrh	r1, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1d      	ldr	r2, [pc, #116]	@ (800516c <I2SEx_TxISR_I2SExt+0x90>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d101      	bne.n	80050fe <I2SEx_TxISR_I2SExt+0x22>
 80050fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005170 <I2SEx_TxISR_I2SExt+0x94>)
 80050fc:	e001      	b.n	8005102 <I2SEx_TxISR_I2SExt+0x26>
 80050fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005102:	460a      	mov	r2, r1
 8005104:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d121      	bne.n	8005162 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a12      	ldr	r2, [pc, #72]	@ (800516c <I2SEx_TxISR_I2SExt+0x90>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d101      	bne.n	800512c <I2SEx_TxISR_I2SExt+0x50>
 8005128:	4b11      	ldr	r3, [pc, #68]	@ (8005170 <I2SEx_TxISR_I2SExt+0x94>)
 800512a:	e001      	b.n	8005130 <I2SEx_TxISR_I2SExt+0x54>
 800512c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	490d      	ldr	r1, [pc, #52]	@ (800516c <I2SEx_TxISR_I2SExt+0x90>)
 8005138:	428b      	cmp	r3, r1
 800513a:	d101      	bne.n	8005140 <I2SEx_TxISR_I2SExt+0x64>
 800513c:	4b0c      	ldr	r3, [pc, #48]	@ (8005170 <I2SEx_TxISR_I2SExt+0x94>)
 800513e:	e001      	b.n	8005144 <I2SEx_TxISR_I2SExt+0x68>
 8005140:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005144:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005148:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d106      	bne.n	8005162 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff ff81 	bl	8005064 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40003800 	.word	0x40003800
 8005170:	40003400 	.word	0x40003400

08005174 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68d8      	ldr	r0, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005186:	1c99      	adds	r1, r3, #2
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800518c:	b282      	uxth	r2, r0
 800518e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d113      	bne.n	80051d0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80051b6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff ff4a 	bl	8005064 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a20      	ldr	r2, [pc, #128]	@ (8005268 <I2SEx_RxISR_I2SExt+0x90>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d101      	bne.n	80051ee <I2SEx_RxISR_I2SExt+0x16>
 80051ea:	4b20      	ldr	r3, [pc, #128]	@ (800526c <I2SEx_RxISR_I2SExt+0x94>)
 80051ec:	e001      	b.n	80051f2 <I2SEx_RxISR_I2SExt+0x1a>
 80051ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051f2:	68d8      	ldr	r0, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f8:	1c99      	adds	r1, r3, #2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80051fe:	b282      	uxth	r2, r0
 8005200:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d121      	bne.n	800525e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a12      	ldr	r2, [pc, #72]	@ (8005268 <I2SEx_RxISR_I2SExt+0x90>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d101      	bne.n	8005228 <I2SEx_RxISR_I2SExt+0x50>
 8005224:	4b11      	ldr	r3, [pc, #68]	@ (800526c <I2SEx_RxISR_I2SExt+0x94>)
 8005226:	e001      	b.n	800522c <I2SEx_RxISR_I2SExt+0x54>
 8005228:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	490d      	ldr	r1, [pc, #52]	@ (8005268 <I2SEx_RxISR_I2SExt+0x90>)
 8005234:	428b      	cmp	r3, r1
 8005236:	d101      	bne.n	800523c <I2SEx_RxISR_I2SExt+0x64>
 8005238:	4b0c      	ldr	r3, [pc, #48]	@ (800526c <I2SEx_RxISR_I2SExt+0x94>)
 800523a:	e001      	b.n	8005240 <I2SEx_RxISR_I2SExt+0x68>
 800523c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005240:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005244:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d106      	bne.n	800525e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff ff03 	bl	8005064 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40003800 	.word	0x40003800
 800526c:	40003400 	.word	0x40003400

08005270 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e267      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d075      	beq.n	800537a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800528e:	4b88      	ldr	r3, [pc, #544]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 030c 	and.w	r3, r3, #12
 8005296:	2b04      	cmp	r3, #4
 8005298:	d00c      	beq.n	80052b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800529a:	4b85      	ldr	r3, [pc, #532]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d112      	bne.n	80052cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052a6:	4b82      	ldr	r3, [pc, #520]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052b2:	d10b      	bne.n	80052cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b4:	4b7e      	ldr	r3, [pc, #504]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d05b      	beq.n	8005378 <HAL_RCC_OscConfig+0x108>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d157      	bne.n	8005378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e242      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d4:	d106      	bne.n	80052e4 <HAL_RCC_OscConfig+0x74>
 80052d6:	4b76      	ldr	r3, [pc, #472]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a75      	ldr	r2, [pc, #468]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	e01d      	b.n	8005320 <HAL_RCC_OscConfig+0xb0>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052ec:	d10c      	bne.n	8005308 <HAL_RCC_OscConfig+0x98>
 80052ee:	4b70      	ldr	r3, [pc, #448]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a6f      	ldr	r2, [pc, #444]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	4b6d      	ldr	r3, [pc, #436]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a6c      	ldr	r2, [pc, #432]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e00b      	b.n	8005320 <HAL_RCC_OscConfig+0xb0>
 8005308:	4b69      	ldr	r3, [pc, #420]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a68      	ldr	r2, [pc, #416]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 800530e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	4b66      	ldr	r3, [pc, #408]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a65      	ldr	r2, [pc, #404]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 800531a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800531e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d013      	beq.n	8005350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005328:	f7fc fcf0 	bl	8001d0c <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005330:	f7fc fcec 	bl	8001d0c <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b64      	cmp	r3, #100	@ 0x64
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e207      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b5b      	ldr	r3, [pc, #364]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0xc0>
 800534e:	e014      	b.n	800537a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7fc fcdc 	bl	8001d0c <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005356:	e008      	b.n	800536a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005358:	f7fc fcd8 	bl	8001d0c <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	2b64      	cmp	r3, #100	@ 0x64
 8005364:	d901      	bls.n	800536a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e1f3      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800536a:	4b51      	ldr	r3, [pc, #324]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1f0      	bne.n	8005358 <HAL_RCC_OscConfig+0xe8>
 8005376:	e000      	b.n	800537a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d063      	beq.n	800544e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005386:	4b4a      	ldr	r3, [pc, #296]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005392:	4b47      	ldr	r3, [pc, #284]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800539a:	2b08      	cmp	r3, #8
 800539c:	d11c      	bne.n	80053d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800539e:	4b44      	ldr	r3, [pc, #272]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d116      	bne.n	80053d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053aa:	4b41      	ldr	r3, [pc, #260]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <HAL_RCC_OscConfig+0x152>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d001      	beq.n	80053c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e1c7      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c2:	4b3b      	ldr	r3, [pc, #236]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4937      	ldr	r1, [pc, #220]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d6:	e03a      	b.n	800544e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d020      	beq.n	8005422 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053e0:	4b34      	ldr	r3, [pc, #208]	@ (80054b4 <HAL_RCC_OscConfig+0x244>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e6:	f7fc fc91 	bl	8001d0c <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ee:	f7fc fc8d 	bl	8001d0c <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e1a8      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005400:	4b2b      	ldr	r3, [pc, #172]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540c:	4b28      	ldr	r3, [pc, #160]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4925      	ldr	r1, [pc, #148]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
 8005420:	e015      	b.n	800544e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005422:	4b24      	ldr	r3, [pc, #144]	@ (80054b4 <HAL_RCC_OscConfig+0x244>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005428:	f7fc fc70 	bl	8001d0c <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005430:	f7fc fc6c 	bl	8001d0c <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e187      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005442:	4b1b      	ldr	r3, [pc, #108]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0308 	and.w	r3, r3, #8
 8005456:	2b00      	cmp	r3, #0
 8005458:	d036      	beq.n	80054c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005462:	4b15      	ldr	r3, [pc, #84]	@ (80054b8 <HAL_RCC_OscConfig+0x248>)
 8005464:	2201      	movs	r2, #1
 8005466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005468:	f7fc fc50 	bl	8001d0c <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005470:	f7fc fc4c 	bl	8001d0c <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e167      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005482:	4b0b      	ldr	r3, [pc, #44]	@ (80054b0 <HAL_RCC_OscConfig+0x240>)
 8005484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f0      	beq.n	8005470 <HAL_RCC_OscConfig+0x200>
 800548e:	e01b      	b.n	80054c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005490:	4b09      	ldr	r3, [pc, #36]	@ (80054b8 <HAL_RCC_OscConfig+0x248>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005496:	f7fc fc39 	bl	8001d0c <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800549c:	e00e      	b.n	80054bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800549e:	f7fc fc35 	bl	8001d0c <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d907      	bls.n	80054bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e150      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
 80054b0:	40023800 	.word	0x40023800
 80054b4:	42470000 	.word	0x42470000
 80054b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054bc:	4b88      	ldr	r3, [pc, #544]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1ea      	bne.n	800549e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8097 	beq.w	8005604 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d6:	2300      	movs	r3, #0
 80054d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054da:	4b81      	ldr	r3, [pc, #516]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10f      	bne.n	8005506 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	4b7d      	ldr	r3, [pc, #500]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ee:	4a7c      	ldr	r2, [pc, #496]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80054f6:	4b7a      	ldr	r3, [pc, #488]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005502:	2301      	movs	r3, #1
 8005504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005506:	4b77      	ldr	r3, [pc, #476]	@ (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d118      	bne.n	8005544 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005512:	4b74      	ldr	r3, [pc, #464]	@ (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a73      	ldr	r2, [pc, #460]	@ (80056e4 <HAL_RCC_OscConfig+0x474>)
 8005518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800551c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800551e:	f7fc fbf5 	bl	8001d0c <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005526:	f7fc fbf1 	bl	8001d0c <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e10c      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005538:	4b6a      	ldr	r3, [pc, #424]	@ (80056e4 <HAL_RCC_OscConfig+0x474>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d106      	bne.n	800555a <HAL_RCC_OscConfig+0x2ea>
 800554c:	4b64      	ldr	r3, [pc, #400]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 800554e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005550:	4a63      	ldr	r2, [pc, #396]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	6713      	str	r3, [r2, #112]	@ 0x70
 8005558:	e01c      	b.n	8005594 <HAL_RCC_OscConfig+0x324>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b05      	cmp	r3, #5
 8005560:	d10c      	bne.n	800557c <HAL_RCC_OscConfig+0x30c>
 8005562:	4b5f      	ldr	r3, [pc, #380]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005566:	4a5e      	ldr	r2, [pc, #376]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005568:	f043 0304 	orr.w	r3, r3, #4
 800556c:	6713      	str	r3, [r2, #112]	@ 0x70
 800556e:	4b5c      	ldr	r3, [pc, #368]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005572:	4a5b      	ldr	r2, [pc, #364]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	6713      	str	r3, [r2, #112]	@ 0x70
 800557a:	e00b      	b.n	8005594 <HAL_RCC_OscConfig+0x324>
 800557c:	4b58      	ldr	r3, [pc, #352]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 800557e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005580:	4a57      	ldr	r2, [pc, #348]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005582:	f023 0301 	bic.w	r3, r3, #1
 8005586:	6713      	str	r3, [r2, #112]	@ 0x70
 8005588:	4b55      	ldr	r3, [pc, #340]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558c:	4a54      	ldr	r2, [pc, #336]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 800558e:	f023 0304 	bic.w	r3, r3, #4
 8005592:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559c:	f7fc fbb6 	bl	8001d0c <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a2:	e00a      	b.n	80055ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055a4:	f7fc fbb2 	bl	8001d0c <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e0cb      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ba:	4b49      	ldr	r3, [pc, #292]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0ee      	beq.n	80055a4 <HAL_RCC_OscConfig+0x334>
 80055c6:	e014      	b.n	80055f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c8:	f7fc fba0 	bl	8001d0c <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ce:	e00a      	b.n	80055e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d0:	f7fc fb9c 	bl	8001d0c <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e0b5      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e6:	4b3e      	ldr	r3, [pc, #248]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1ee      	bne.n	80055d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055f2:	7dfb      	ldrb	r3, [r7, #23]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d105      	bne.n	8005604 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f8:	4b39      	ldr	r3, [pc, #228]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fc:	4a38      	ldr	r2, [pc, #224]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80055fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005602:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 80a1 	beq.w	8005750 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800560e:	4b34      	ldr	r3, [pc, #208]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
 8005616:	2b08      	cmp	r3, #8
 8005618:	d05c      	beq.n	80056d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d141      	bne.n	80056a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005622:	4b31      	ldr	r3, [pc, #196]	@ (80056e8 <HAL_RCC_OscConfig+0x478>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005628:	f7fc fb70 	bl	8001d0c <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005630:	f7fc fb6c 	bl	8001d0c <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e087      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005642:	4b27      	ldr	r3, [pc, #156]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69da      	ldr	r2, [r3, #28]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	019b      	lsls	r3, r3, #6
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005664:	085b      	lsrs	r3, r3, #1
 8005666:	3b01      	subs	r3, #1
 8005668:	041b      	lsls	r3, r3, #16
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005670:	061b      	lsls	r3, r3, #24
 8005672:	491b      	ldr	r1, [pc, #108]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 8005674:	4313      	orrs	r3, r2
 8005676:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005678:	4b1b      	ldr	r3, [pc, #108]	@ (80056e8 <HAL_RCC_OscConfig+0x478>)
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567e:	f7fc fb45 	bl	8001d0c <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005686:	f7fc fb41 	bl	8001d0c <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e05c      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005698:	4b11      	ldr	r3, [pc, #68]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x416>
 80056a4:	e054      	b.n	8005750 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a6:	4b10      	ldr	r3, [pc, #64]	@ (80056e8 <HAL_RCC_OscConfig+0x478>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ac:	f7fc fb2e 	bl	8001d0c <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b2:	e008      	b.n	80056c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b4:	f7fc fb2a 	bl	8001d0c <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e045      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c6:	4b06      	ldr	r3, [pc, #24]	@ (80056e0 <HAL_RCC_OscConfig+0x470>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f0      	bne.n	80056b4 <HAL_RCC_OscConfig+0x444>
 80056d2:	e03d      	b.n	8005750 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d107      	bne.n	80056ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e038      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
 80056e0:	40023800 	.word	0x40023800
 80056e4:	40007000 	.word	0x40007000
 80056e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056ec:	4b1b      	ldr	r3, [pc, #108]	@ (800575c <HAL_RCC_OscConfig+0x4ec>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d028      	beq.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005704:	429a      	cmp	r2, r3
 8005706:	d121      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005712:	429a      	cmp	r2, r3
 8005714:	d11a      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800571c:	4013      	ands	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005722:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005724:	4293      	cmp	r3, r2
 8005726:	d111      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005732:	085b      	lsrs	r3, r3, #1
 8005734:	3b01      	subs	r3, #1
 8005736:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005738:	429a      	cmp	r2, r3
 800573a:	d107      	bne.n	800574c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005746:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005748:	429a      	cmp	r2, r3
 800574a:	d001      	beq.n	8005750 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40023800 	.word	0x40023800

08005760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0cc      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005774:	4b68      	ldr	r3, [pc, #416]	@ (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d90c      	bls.n	800579c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005782:	4b65      	ldr	r3, [pc, #404]	@ (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800578a:	4b63      	ldr	r3, [pc, #396]	@ (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d001      	beq.n	800579c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0b8      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d020      	beq.n	80057ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057b4:	4b59      	ldr	r3, [pc, #356]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	4a58      	ldr	r2, [pc, #352]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80057be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057cc:	4b53      	ldr	r3, [pc, #332]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4a52      	ldr	r2, [pc, #328]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d8:	4b50      	ldr	r3, [pc, #320]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	494d      	ldr	r1, [pc, #308]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d044      	beq.n	8005880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d107      	bne.n	800580e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fe:	4b47      	ldr	r3, [pc, #284]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d119      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e07f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d003      	beq.n	800581e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800581a:	2b03      	cmp	r3, #3
 800581c:	d107      	bne.n	800582e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581e:	4b3f      	ldr	r3, [pc, #252]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e06f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800582e:	4b3b      	ldr	r3, [pc, #236]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e067      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800583e:	4b37      	ldr	r3, [pc, #220]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f023 0203 	bic.w	r2, r3, #3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4934      	ldr	r1, [pc, #208]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 800584c:	4313      	orrs	r3, r2
 800584e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005850:	f7fc fa5c 	bl	8001d0c <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005856:	e00a      	b.n	800586e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005858:	f7fc fa58 	bl	8001d0c <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e04f      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586e:	4b2b      	ldr	r3, [pc, #172]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 020c 	and.w	r2, r3, #12
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	429a      	cmp	r2, r3
 800587e:	d1eb      	bne.n	8005858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005880:	4b25      	ldr	r3, [pc, #148]	@ (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d20c      	bcs.n	80058a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588e:	4b22      	ldr	r3, [pc, #136]	@ (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b20      	ldr	r3, [pc, #128]	@ (8005918 <HAL_RCC_ClockConfig+0x1b8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e032      	b.n	800590e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058b4:	4b19      	ldr	r3, [pc, #100]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4916      	ldr	r1, [pc, #88]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058d2:	4b12      	ldr	r3, [pc, #72]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	490e      	ldr	r1, [pc, #56]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058e6:	f000 f821 	bl	800592c <HAL_RCC_GetSysClockFreq>
 80058ea:	4602      	mov	r2, r0
 80058ec:	4b0b      	ldr	r3, [pc, #44]	@ (800591c <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	091b      	lsrs	r3, r3, #4
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	490a      	ldr	r1, [pc, #40]	@ (8005920 <HAL_RCC_ClockConfig+0x1c0>)
 80058f8:	5ccb      	ldrb	r3, [r1, r3]
 80058fa:	fa22 f303 	lsr.w	r3, r2, r3
 80058fe:	4a09      	ldr	r2, [pc, #36]	@ (8005924 <HAL_RCC_ClockConfig+0x1c4>)
 8005900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005902:	4b09      	ldr	r3, [pc, #36]	@ (8005928 <HAL_RCC_ClockConfig+0x1c8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fc f9bc 	bl	8001c84 <HAL_InitTick>

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40023c00 	.word	0x40023c00
 800591c:	40023800 	.word	0x40023800
 8005920:	08008a60 	.word	0x08008a60
 8005924:	20000000 	.word	0x20000000
 8005928:	20000004 	.word	0x20000004

0800592c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800592c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005930:	b094      	sub	sp, #80	@ 0x50
 8005932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005944:	4b79      	ldr	r3, [pc, #484]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 030c 	and.w	r3, r3, #12
 800594c:	2b08      	cmp	r3, #8
 800594e:	d00d      	beq.n	800596c <HAL_RCC_GetSysClockFreq+0x40>
 8005950:	2b08      	cmp	r3, #8
 8005952:	f200 80e1 	bhi.w	8005b18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x34>
 800595a:	2b04      	cmp	r3, #4
 800595c:	d003      	beq.n	8005966 <HAL_RCC_GetSysClockFreq+0x3a>
 800595e:	e0db      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005960:	4b73      	ldr	r3, [pc, #460]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005962:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005964:	e0db      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005966:	4b73      	ldr	r3, [pc, #460]	@ (8005b34 <HAL_RCC_GetSysClockFreq+0x208>)
 8005968:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800596a:	e0d8      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800596c:	4b6f      	ldr	r3, [pc, #444]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005974:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005976:	4b6d      	ldr	r3, [pc, #436]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d063      	beq.n	8005a4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005982:	4b6a      	ldr	r3, [pc, #424]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	099b      	lsrs	r3, r3, #6
 8005988:	2200      	movs	r2, #0
 800598a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800598c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800598e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005994:	633b      	str	r3, [r7, #48]	@ 0x30
 8005996:	2300      	movs	r3, #0
 8005998:	637b      	str	r3, [r7, #52]	@ 0x34
 800599a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800599e:	4622      	mov	r2, r4
 80059a0:	462b      	mov	r3, r5
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f04f 0100 	mov.w	r1, #0
 80059aa:	0159      	lsls	r1, r3, #5
 80059ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059b0:	0150      	lsls	r0, r2, #5
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4621      	mov	r1, r4
 80059b8:	1a51      	subs	r1, r2, r1
 80059ba:	6139      	str	r1, [r7, #16]
 80059bc:	4629      	mov	r1, r5
 80059be:	eb63 0301 	sbc.w	r3, r3, r1
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059d0:	4659      	mov	r1, fp
 80059d2:	018b      	lsls	r3, r1, #6
 80059d4:	4651      	mov	r1, sl
 80059d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059da:	4651      	mov	r1, sl
 80059dc:	018a      	lsls	r2, r1, #6
 80059de:	4651      	mov	r1, sl
 80059e0:	ebb2 0801 	subs.w	r8, r2, r1
 80059e4:	4659      	mov	r1, fp
 80059e6:	eb63 0901 	sbc.w	r9, r3, r1
 80059ea:	f04f 0200 	mov.w	r2, #0
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059fe:	4690      	mov	r8, r2
 8005a00:	4699      	mov	r9, r3
 8005a02:	4623      	mov	r3, r4
 8005a04:	eb18 0303 	adds.w	r3, r8, r3
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	462b      	mov	r3, r5
 8005a0c:	eb49 0303 	adc.w	r3, r9, r3
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a1e:	4629      	mov	r1, r5
 8005a20:	024b      	lsls	r3, r1, #9
 8005a22:	4621      	mov	r1, r4
 8005a24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a28:	4621      	mov	r1, r4
 8005a2a:	024a      	lsls	r2, r1, #9
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	4619      	mov	r1, r3
 8005a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a32:	2200      	movs	r2, #0
 8005a34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a3c:	f7fb f8e6 	bl	8000c0c <__aeabi_uldivmod>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4613      	mov	r3, r2
 8005a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a48:	e058      	b.n	8005afc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a4a:	4b38      	ldr	r3, [pc, #224]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	099b      	lsrs	r3, r3, #6
 8005a50:	2200      	movs	r2, #0
 8005a52:	4618      	mov	r0, r3
 8005a54:	4611      	mov	r1, r2
 8005a56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a5a:	623b      	str	r3, [r7, #32]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a64:	4642      	mov	r2, r8
 8005a66:	464b      	mov	r3, r9
 8005a68:	f04f 0000 	mov.w	r0, #0
 8005a6c:	f04f 0100 	mov.w	r1, #0
 8005a70:	0159      	lsls	r1, r3, #5
 8005a72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a76:	0150      	lsls	r0, r2, #5
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a82:	4649      	mov	r1, r9
 8005a84:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a9c:	ebb2 040a 	subs.w	r4, r2, sl
 8005aa0:	eb63 050b 	sbc.w	r5, r3, fp
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	f04f 0300 	mov.w	r3, #0
 8005aac:	00eb      	lsls	r3, r5, #3
 8005aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ab2:	00e2      	lsls	r2, r4, #3
 8005ab4:	4614      	mov	r4, r2
 8005ab6:	461d      	mov	r5, r3
 8005ab8:	4643      	mov	r3, r8
 8005aba:	18e3      	adds	r3, r4, r3
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	464b      	mov	r3, r9
 8005ac0:	eb45 0303 	adc.w	r3, r5, r3
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	028b      	lsls	r3, r1, #10
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005adc:	4621      	mov	r1, r4
 8005ade:	028a      	lsls	r2, r1, #10
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	61fa      	str	r2, [r7, #28]
 8005aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005af0:	f7fb f88c 	bl	8000c0c <__aeabi_uldivmod>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4613      	mov	r3, r2
 8005afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005afc:	4b0b      	ldr	r3, [pc, #44]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0x200>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	0c1b      	lsrs	r3, r3, #16
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	3301      	adds	r3, #1
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005b0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b16:	e002      	b.n	8005b1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b18:	4b05      	ldr	r3, [pc, #20]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3750      	adds	r7, #80	@ 0x50
 8005b24:	46bd      	mov	sp, r7
 8005b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	00f42400 	.word	0x00f42400
 8005b34:	007a1200 	.word	0x007a1200

08005b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b3c:	4b03      	ldr	r3, [pc, #12]	@ (8005b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	20000000 	.word	0x20000000

08005b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b54:	f7ff fff0 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4b05      	ldr	r3, [pc, #20]	@ (8005b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	0a9b      	lsrs	r3, r3, #10
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	4903      	ldr	r1, [pc, #12]	@ (8005b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b66:	5ccb      	ldrb	r3, [r1, r3]
 8005b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	40023800 	.word	0x40023800
 8005b74:	08008a70 	.word	0x08008a70

08005b78 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d105      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d035      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ba0:	4b62      	ldr	r3, [pc, #392]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ba6:	f7fc f8b1 	bl	8001d0c <HAL_GetTick>
 8005baa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bac:	e008      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bae:	f7fc f8ad 	bl	8001d0c <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e0b0      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1f0      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	019a      	lsls	r2, r3, #6
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	071b      	lsls	r3, r3, #28
 8005bd8:	4955      	ldr	r1, [pc, #340]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005be0:	4b52      	ldr	r3, [pc, #328]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005be6:	f7fc f891 	bl	8001d0c <HAL_GetTick>
 8005bea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bec:	e008      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005bee:	f7fc f88d 	bl	8001d0c <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e090      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c00:	4b4b      	ldr	r3, [pc, #300]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d0f0      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 8083 	beq.w	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	4b44      	ldr	r3, [pc, #272]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c22:	4a43      	ldr	r2, [pc, #268]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c2a:	4b41      	ldr	r3, [pc, #260]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c36:	4b3f      	ldr	r3, [pc, #252]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c40:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c42:	f7fc f863 	bl	8001d0c <HAL_GetTick>
 8005c46:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005c48:	e008      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c4a:	f7fc f85f 	bl	8001d0c <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e062      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005c5c:	4b35      	ldr	r3, [pc, #212]	@ (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0f0      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c68:	4b31      	ldr	r3, [pc, #196]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c70:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d02f      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d028      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c86:	4b2a      	ldr	r3, [pc, #168]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c8e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c90:	4b29      	ldr	r3, [pc, #164]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c96:	4b28      	ldr	r3, [pc, #160]	@ (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c9c:	4a24      	ldr	r2, [pc, #144]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ca2:	4b23      	ldr	r3, [pc, #140]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d114      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005cae:	f7fc f82d 	bl	8001d0c <HAL_GetTick>
 8005cb2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb4:	e00a      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb6:	f7fc f829 	bl	8001d0c <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d901      	bls.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e02a      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ccc:	4b18      	ldr	r3, [pc, #96]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0ee      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ce0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ce4:	d10d      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005ce6:	4b12      	ldr	r3, [pc, #72]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cfa:	490d      	ldr	r1, [pc, #52]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	608b      	str	r3, [r1, #8]
 8005d00:	e005      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d02:	4b0b      	ldr	r3, [pc, #44]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	4a0a      	ldr	r2, [pc, #40]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d08:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005d0c:	6093      	str	r3, [r2, #8]
 8005d0e:	4b08      	ldr	r3, [pc, #32]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d10:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d1a:	4905      	ldr	r1, [pc, #20]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	42470068 	.word	0x42470068
 8005d30:	40023800 	.word	0x40023800
 8005d34:	40007000 	.word	0x40007000
 8005d38:	42470e40 	.word	0x42470e40

08005d3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d13f      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005d5a:	4b24      	ldr	r3, [pc, #144]	@ (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d006      	beq.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d70:	d12f      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d72:	4b1f      	ldr	r3, [pc, #124]	@ (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005d74:	617b      	str	r3, [r7, #20]
          break;
 8005d76:	e02f      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d78:	4b1c      	ldr	r3, [pc, #112]	@ (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d84:	d108      	bne.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d86:	4b19      	ldr	r3, [pc, #100]	@ (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d8e:	4a19      	ldr	r2, [pc, #100]	@ (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d94:	613b      	str	r3, [r7, #16]
 8005d96:	e007      	b.n	8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d98:	4b14      	ldr	r3, [pc, #80]	@ (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005da0:	4a15      	ldr	r2, [pc, #84]	@ (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005da8:	4b10      	ldr	r3, [pc, #64]	@ (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dae:	099b      	lsrs	r3, r3, #6
 8005db0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	fb02 f303 	mul.w	r3, r2, r3
 8005dba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dc2:	0f1b      	lsrs	r3, r3, #28
 8005dc4:	f003 0307 	and.w	r3, r3, #7
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dce:	617b      	str	r3, [r7, #20]
          break;
 8005dd0:	e002      	b.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
          break;
 8005dd6:	bf00      	nop
        }
      }
      break;
 8005dd8:	e000      	b.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005dda:	bf00      	nop
    }
  }
  return frequency;
 8005ddc:	697b      	ldr	r3, [r7, #20]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40023800 	.word	0x40023800
 8005df0:	00bb8000 	.word	0x00bb8000
 8005df4:	007a1200 	.word	0x007a1200
 8005df8:	00f42400 	.word	0x00f42400

08005dfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e07b      	b.n	8005f06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d108      	bne.n	8005e28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e1e:	d009      	beq.n	8005e34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	61da      	str	r2, [r3, #28]
 8005e26:	e005      	b.n	8005e34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fb fd40 	bl	80018d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb8:	ea42 0103 	orr.w	r1, r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	f003 0104 	and.w	r1, r3, #4
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eda:	f003 0210 	and.w	r2, r3, #16
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ef4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d020      	beq.n	8005f72 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01b      	beq.n	8005f72 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f06f 0202 	mvn.w	r2, #2
 8005f42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f8dc 	bl	8006116 <HAL_TIM_IC_CaptureCallback>
 8005f5e:	e005      	b.n	8005f6c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f8ce 	bl	8006102 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f8df 	bl	800612a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d020      	beq.n	8005fbe <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d01b      	beq.n	8005fbe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f06f 0204 	mvn.w	r2, #4
 8005f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f8b6 	bl	8006116 <HAL_TIM_IC_CaptureCallback>
 8005faa:	e005      	b.n	8005fb8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f8a8 	bl	8006102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f8b9 	bl	800612a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f003 0308 	and.w	r3, r3, #8
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d020      	beq.n	800600a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d01b      	beq.n	800600a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f06f 0208 	mvn.w	r2, #8
 8005fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2204      	movs	r2, #4
 8005fe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	f003 0303 	and.w	r3, r3, #3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f890 	bl	8006116 <HAL_TIM_IC_CaptureCallback>
 8005ff6:	e005      	b.n	8006004 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f882 	bl	8006102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f893 	bl	800612a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	d020      	beq.n	8006056 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0310 	and.w	r3, r3, #16
 800601a:	2b00      	cmp	r3, #0
 800601c:	d01b      	beq.n	8006056 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f06f 0210 	mvn.w	r2, #16
 8006026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2208      	movs	r2, #8
 800602c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f86a 	bl	8006116 <HAL_TIM_IC_CaptureCallback>
 8006042:	e005      	b.n	8006050 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f85c 	bl	8006102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f86d 	bl	800612a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00c      	beq.n	800607a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d007      	beq.n	800607a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f06f 0201 	mvn.w	r2, #1
 8006072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 f83a 	bl	80060ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00c      	beq.n	800609e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608a:	2b00      	cmp	r3, #0
 800608c:	d007      	beq.n	800609e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f864 	bl	8006166 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00c      	beq.n	80060c2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f83e 	bl	800613e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f003 0320 	and.w	r3, r3, #32
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00c      	beq.n	80060e6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d007      	beq.n	80060e6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f06f 0220 	mvn.w	r2, #32
 80060de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f836 	bl	8006152 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060e6:	bf00      	nop
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800613e:	b480      	push	{r7}
 8006140:	b083      	sub	sp, #12
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800616e:	bf00      	nop
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f043 0201 	orr.w	r2, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f023 0201 	bic.w	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061be:	b480      	push	{r7}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3301      	adds	r3, #1
 80061d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061d8:	d901      	bls.n	80061de <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e01b      	b.n	8006216 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	daf2      	bge.n	80061cc <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	019b      	lsls	r3, r3, #6
 80061ee:	f043 0220 	orr.w	r2, r3, #32
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3301      	adds	r3, #1
 80061fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006202:	d901      	bls.n	8006208 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e006      	b.n	8006216 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b20      	cmp	r3, #32
 8006212:	d0f0      	beq.n	80061f6 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3301      	adds	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800623a:	d901      	bls.n	8006240 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e018      	b.n	8006272 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	daf2      	bge.n	800622e <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2210      	movs	r2, #16
 8006250:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3301      	adds	r3, #1
 8006256:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800625e:	d901      	bls.n	8006264 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e006      	b.n	8006272 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b10      	cmp	r3, #16
 800626e:	d0f0      	beq.n	8006252 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800627e:	b480      	push	{r7}
 8006280:	b08b      	sub	sp, #44	@ 0x2c
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	4613      	mov	r3, r2
 800628a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006294:	88fb      	ldrh	r3, [r7, #6]
 8006296:	089b      	lsrs	r3, r3, #2
 8006298:	b29b      	uxth	r3, r3
 800629a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800629c:	88fb      	ldrh	r3, [r7, #6]
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062a4:	2300      	movs	r3, #0
 80062a6:	623b      	str	r3, [r7, #32]
 80062a8:	e014      	b.n	80062d4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	601a      	str	r2, [r3, #0]
    pDest++;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	3301      	adds	r3, #1
 80062ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	3301      	adds	r3, #1
 80062c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	3301      	adds	r3, #1
 80062c6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ca:	3301      	adds	r3, #1
 80062cc:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	3301      	adds	r3, #1
 80062d2:	623b      	str	r3, [r7, #32]
 80062d4:	6a3a      	ldr	r2, [r7, #32]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d3e6      	bcc.n	80062aa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062dc:	8bfb      	ldrh	r3, [r7, #30]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d01e      	beq.n	8006320 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ec:	461a      	mov	r2, r3
 80062ee:	f107 0310 	add.w	r3, r7, #16
 80062f2:	6812      	ldr	r2, [r2, #0]
 80062f4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006302:	b2da      	uxtb	r2, r3
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	701a      	strb	r2, [r3, #0]
      i++;
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	3301      	adds	r3, #1
 800630c:	623b      	str	r3, [r7, #32]
      pDest++;
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	3301      	adds	r3, #1
 8006312:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006314:	8bfb      	ldrh	r3, [r7, #30]
 8006316:	3b01      	subs	r3, #1
 8006318:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800631a:	8bfb      	ldrh	r3, [r7, #30]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1ea      	bne.n	80062f6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006322:	4618      	mov	r0, r3
 8006324:	372c      	adds	r7, #44	@ 0x2c
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4013      	ands	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006346:	68fb      	ldr	r3, [r7, #12]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	4013      	ands	r3, r2
 8006386:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006388:	68bb      	ldr	r3, [r7, #8]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f003 0301 	and.w	r3, r3, #1
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b085      	sub	sp, #20
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	460b      	mov	r3, r1
 80063bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80063d0:	f023 0303 	bic.w	r3, r3, #3
 80063d4:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	f003 0303 	and.w	r3, r3, #3
 80063e4:	68f9      	ldr	r1, [r7, #12]
 80063e6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80063ea:	4313      	orrs	r3, r2
 80063ec:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d107      	bne.n	8006404 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80063fa:	461a      	mov	r2, r3
 80063fc:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006400:	6053      	str	r3, [r2, #4]
 8006402:	e00c      	b.n	800641e <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	2b02      	cmp	r3, #2
 8006408:	d107      	bne.n	800641a <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006410:	461a      	mov	r2, r3
 8006412:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006416:	6053      	str	r3, [r2, #4]
 8006418:	e001      	b.n	800641e <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	b29b      	uxth	r3, r3
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800644e:	b480      	push	{r7}
 8006450:	b089      	sub	sp, #36	@ 0x24
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	0c9b      	lsrs	r3, r3, #18
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	4413      	add	r3, r2
 8006484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	0fdb      	lsrs	r3, r3, #31
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	4413      	add	r3, r2
 800649a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	0fdb      	lsrs	r3, r3, #31
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 0320 	and.w	r3, r3, #32
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d10d      	bne.n	80064d0 <USB_HC_Halt+0x82>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <USB_HC_Halt+0x82>
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d002      	beq.n	80064cc <USB_HC_Halt+0x7e>
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d101      	bne.n	80064d0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	e0d8      	b.n	8006682 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <USB_HC_Halt+0x8e>
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d173      	bne.n	80065c4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064fa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b00      	cmp	r3, #0
 8006506:	d14a      	bne.n	800659e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d133      	bne.n	800657c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	4413      	add	r3, r2
 800651c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	440a      	add	r2, r1
 800652a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800652e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006532:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	4413      	add	r3, r2
 800653c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	69fa      	ldr	r2, [r7, #28]
 8006548:	440a      	add	r2, r1
 800654a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800654e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006552:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	3301      	adds	r3, #1
 8006558:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006560:	d82e      	bhi.n	80065c0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	4413      	add	r3, r2
 800656a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006574:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006578:	d0ec      	beq.n	8006554 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800657a:	e081      	b.n	8006680 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	69fa      	ldr	r2, [r7, #28]
 8006590:	440a      	add	r2, r1
 8006592:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006596:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800659a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800659c:	e070      	b.n	8006680 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065bc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065be:	e05f      	b.n	8006680 <USB_HC_Halt+0x232>
            break;
 80065c0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065c2:	e05d      	b.n	8006680 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	0151      	lsls	r1, r2, #5
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	440a      	add	r2, r1
 80065da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065e2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d133      	bne.n	800665c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	440a      	add	r2, r1
 800660a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800660e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006612:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	4413      	add	r3, r2
 800661c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	440a      	add	r2, r1
 800662a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800662e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006632:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	3301      	adds	r3, #1
 8006638:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006640:	d81d      	bhi.n	800667e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006654:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006658:	d0ec      	beq.n	8006634 <USB_HC_Halt+0x1e6>
 800665a:	e011      	b.n	8006680 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	4413      	add	r3, r2
 8006664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	440a      	add	r2, r1
 8006672:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006676:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	e000      	b.n	8006680 <USB_HC_Halt+0x232>
          break;
 800667e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3724      	adds	r7, #36	@ 0x24
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b088      	sub	sp, #32
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f7ff fd7a 	bl	800619c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066a8:	2110      	movs	r1, #16
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff fd87 	bl	80061be <USB_FlushTxFifo>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff fdb1 	bl	8006222 <USB_FlushRxFifo>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80066ca:	2300      	movs	r3, #0
 80066cc:	61bb      	str	r3, [r7, #24]
 80066ce:	e01f      	b.n	8006710 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066e6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066ee:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066f6:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006704:	461a      	mov	r2, r3
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	3301      	adds	r3, #1
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2b0f      	cmp	r3, #15
 8006714:	d9dc      	bls.n	80066d0 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006716:	2300      	movs	r3, #0
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	e034      	b.n	8006786 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	4413      	add	r3, r2
 8006724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006732:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800673a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006742:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	4413      	add	r3, r2
 800674c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006750:	461a      	mov	r2, r3
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3301      	adds	r3, #1
 800675a:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006762:	d80c      	bhi.n	800677e <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	4413      	add	r3, r2
 800676c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006776:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800677a:	d0ec      	beq.n	8006756 <USB_StopHost+0xc8>
 800677c:	e000      	b.n	8006780 <USB_StopHost+0xf2>
        break;
 800677e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	3301      	adds	r3, #1
 8006784:	61bb      	str	r3, [r7, #24]
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2b0f      	cmp	r3, #15
 800678a:	d9c7      	bls.n	800671c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006792:	461a      	mov	r2, r3
 8006794:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006798:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067a0:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff fce9 	bl	800617a <USB_EnableGlobalInt>

  return ret;
 80067a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3720      	adds	r7, #32
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f804 	bl	80067d6 <USBH_HandleSof>
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b082      	sub	sp, #8
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b0b      	cmp	r3, #11
 80067e6:	d10a      	bne.n	80067fe <USBH_HandleSof+0x28>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d005      	beq.n	80067fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	4798      	blx	r3
  }
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006816:	bf00      	nop
}
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8006832:	bf00      	nop
}
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f883 	bl	8006998 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	791b      	ldrb	r3, [r3, #4]
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f80b 	bl	80068b4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	795b      	ldrb	r3, [r3, #5]
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f805 	bl	80068b4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	2b0f      	cmp	r3, #15
 80068c4:	d80d      	bhi.n	80068e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80068c6:	78fb      	ldrb	r3, [r7, #3]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	33e0      	adds	r3, #224	@ 0xe0
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	78fb      	ldrb	r3, [r7, #3]
 80068d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	33e0      	adds	r3, #224	@ 0xe0
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	440b      	add	r3, r1
 80068e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80068fe:	4618      	mov	r0, r3
 8006900:	f7ff ff57 	bl	80067b2 <USBH_LL_IncTimer>
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff ff8f 	bl	800683e <USBH_LL_Connect>
}
 8006920:	bf00      	nop
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006936:	4618      	mov	r0, r3
 8006938:	f7ff ff98 	bl	800686c <USBH_LL_Disconnect>
}
 800693c:	bf00      	nop
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
 8006950:	4613      	mov	r3, r2
 8006952:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff ff49 	bl	8006806 <USBH_LL_PortEnabled>
}
 8006974:	bf00      	nop
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff ff49 	bl	8006822 <USBH_LL_PortDisabled>
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fb fd63 	bl	800247a <HAL_HCD_Stop>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 f808 	bl	80069d0 <USBH_Get_USB_Status>
 80069c0:	4603      	mov	r3, r0
 80069c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80069de:	79fb      	ldrb	r3, [r7, #7]
 80069e0:	2b03      	cmp	r3, #3
 80069e2:	d817      	bhi.n	8006a14 <USBH_Get_USB_Status+0x44>
 80069e4:	a201      	add	r2, pc, #4	@ (adr r2, 80069ec <USBH_Get_USB_Status+0x1c>)
 80069e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ea:	bf00      	nop
 80069ec:	080069fd 	.word	0x080069fd
 80069f0:	08006a03 	.word	0x08006a03
 80069f4:	08006a09 	.word	0x08006a09
 80069f8:	08006a0f 	.word	0x08006a0f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	73fb      	strb	r3, [r7, #15]
    break;
 8006a00:	e00b      	b.n	8006a1a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006a02:	2302      	movs	r3, #2
 8006a04:	73fb      	strb	r3, [r7, #15]
    break;
 8006a06:	e008      	b.n	8006a1a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a0c:	e005      	b.n	8006a1a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006a0e:	2302      	movs	r3, #2
 8006a10:	73fb      	strb	r3, [r7, #15]
    break;
 8006a12:	e002      	b.n	8006a1a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006a14:	2302      	movs	r3, #2
 8006a16:	73fb      	strb	r3, [r7, #15]
    break;
 8006a18:	bf00      	nop
  }
  return usb_status;
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <malloc>:
 8006a28:	4b02      	ldr	r3, [pc, #8]	@ (8006a34 <malloc+0xc>)
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	f000 b825 	b.w	8006a7c <_malloc_r>
 8006a32:	bf00      	nop
 8006a34:	20000018 	.word	0x20000018

08006a38 <sbrk_aligned>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	4e0f      	ldr	r6, [pc, #60]	@ (8006a78 <sbrk_aligned+0x40>)
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	6831      	ldr	r1, [r6, #0]
 8006a40:	4605      	mov	r5, r0
 8006a42:	b911      	cbnz	r1, 8006a4a <sbrk_aligned+0x12>
 8006a44:	f000 fa26 	bl	8006e94 <_sbrk_r>
 8006a48:	6030      	str	r0, [r6, #0]
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f000 fa21 	bl	8006e94 <_sbrk_r>
 8006a52:	1c43      	adds	r3, r0, #1
 8006a54:	d103      	bne.n	8006a5e <sbrk_aligned+0x26>
 8006a56:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
 8006a5e:	1cc4      	adds	r4, r0, #3
 8006a60:	f024 0403 	bic.w	r4, r4, #3
 8006a64:	42a0      	cmp	r0, r4
 8006a66:	d0f8      	beq.n	8006a5a <sbrk_aligned+0x22>
 8006a68:	1a21      	subs	r1, r4, r0
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f000 fa12 	bl	8006e94 <_sbrk_r>
 8006a70:	3001      	adds	r0, #1
 8006a72:	d1f2      	bne.n	8006a5a <sbrk_aligned+0x22>
 8006a74:	e7ef      	b.n	8006a56 <sbrk_aligned+0x1e>
 8006a76:	bf00      	nop
 8006a78:	200006b4 	.word	0x200006b4

08006a7c <_malloc_r>:
 8006a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a80:	1ccd      	adds	r5, r1, #3
 8006a82:	f025 0503 	bic.w	r5, r5, #3
 8006a86:	3508      	adds	r5, #8
 8006a88:	2d0c      	cmp	r5, #12
 8006a8a:	bf38      	it	cc
 8006a8c:	250c      	movcc	r5, #12
 8006a8e:	2d00      	cmp	r5, #0
 8006a90:	4606      	mov	r6, r0
 8006a92:	db01      	blt.n	8006a98 <_malloc_r+0x1c>
 8006a94:	42a9      	cmp	r1, r5
 8006a96:	d904      	bls.n	8006aa2 <_malloc_r+0x26>
 8006a98:	230c      	movs	r3, #12
 8006a9a:	6033      	str	r3, [r6, #0]
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b78 <_malloc_r+0xfc>
 8006aa6:	f000 f869 	bl	8006b7c <__malloc_lock>
 8006aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8006aae:	461c      	mov	r4, r3
 8006ab0:	bb44      	cbnz	r4, 8006b04 <_malloc_r+0x88>
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f7ff ffbf 	bl	8006a38 <sbrk_aligned>
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	4604      	mov	r4, r0
 8006abe:	d158      	bne.n	8006b72 <_malloc_r+0xf6>
 8006ac0:	f8d8 4000 	ldr.w	r4, [r8]
 8006ac4:	4627      	mov	r7, r4
 8006ac6:	2f00      	cmp	r7, #0
 8006ac8:	d143      	bne.n	8006b52 <_malloc_r+0xd6>
 8006aca:	2c00      	cmp	r4, #0
 8006acc:	d04b      	beq.n	8006b66 <_malloc_r+0xea>
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	eb04 0903 	add.w	r9, r4, r3
 8006ad8:	f000 f9dc 	bl	8006e94 <_sbrk_r>
 8006adc:	4581      	cmp	r9, r0
 8006ade:	d142      	bne.n	8006b66 <_malloc_r+0xea>
 8006ae0:	6821      	ldr	r1, [r4, #0]
 8006ae2:	1a6d      	subs	r5, r5, r1
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f7ff ffa6 	bl	8006a38 <sbrk_aligned>
 8006aec:	3001      	adds	r0, #1
 8006aee:	d03a      	beq.n	8006b66 <_malloc_r+0xea>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	442b      	add	r3, r5
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	f8d8 3000 	ldr.w	r3, [r8]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	bb62      	cbnz	r2, 8006b58 <_malloc_r+0xdc>
 8006afe:	f8c8 7000 	str.w	r7, [r8]
 8006b02:	e00f      	b.n	8006b24 <_malloc_r+0xa8>
 8006b04:	6822      	ldr	r2, [r4, #0]
 8006b06:	1b52      	subs	r2, r2, r5
 8006b08:	d420      	bmi.n	8006b4c <_malloc_r+0xd0>
 8006b0a:	2a0b      	cmp	r2, #11
 8006b0c:	d917      	bls.n	8006b3e <_malloc_r+0xc2>
 8006b0e:	1961      	adds	r1, r4, r5
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	6025      	str	r5, [r4, #0]
 8006b14:	bf18      	it	ne
 8006b16:	6059      	strne	r1, [r3, #4]
 8006b18:	6863      	ldr	r3, [r4, #4]
 8006b1a:	bf08      	it	eq
 8006b1c:	f8c8 1000 	streq.w	r1, [r8]
 8006b20:	5162      	str	r2, [r4, r5]
 8006b22:	604b      	str	r3, [r1, #4]
 8006b24:	4630      	mov	r0, r6
 8006b26:	f000 f82f 	bl	8006b88 <__malloc_unlock>
 8006b2a:	f104 000b 	add.w	r0, r4, #11
 8006b2e:	1d23      	adds	r3, r4, #4
 8006b30:	f020 0007 	bic.w	r0, r0, #7
 8006b34:	1ac2      	subs	r2, r0, r3
 8006b36:	bf1c      	itt	ne
 8006b38:	1a1b      	subne	r3, r3, r0
 8006b3a:	50a3      	strne	r3, [r4, r2]
 8006b3c:	e7af      	b.n	8006a9e <_malloc_r+0x22>
 8006b3e:	6862      	ldr	r2, [r4, #4]
 8006b40:	42a3      	cmp	r3, r4
 8006b42:	bf0c      	ite	eq
 8006b44:	f8c8 2000 	streq.w	r2, [r8]
 8006b48:	605a      	strne	r2, [r3, #4]
 8006b4a:	e7eb      	b.n	8006b24 <_malloc_r+0xa8>
 8006b4c:	4623      	mov	r3, r4
 8006b4e:	6864      	ldr	r4, [r4, #4]
 8006b50:	e7ae      	b.n	8006ab0 <_malloc_r+0x34>
 8006b52:	463c      	mov	r4, r7
 8006b54:	687f      	ldr	r7, [r7, #4]
 8006b56:	e7b6      	b.n	8006ac6 <_malloc_r+0x4a>
 8006b58:	461a      	mov	r2, r3
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	42a3      	cmp	r3, r4
 8006b5e:	d1fb      	bne.n	8006b58 <_malloc_r+0xdc>
 8006b60:	2300      	movs	r3, #0
 8006b62:	6053      	str	r3, [r2, #4]
 8006b64:	e7de      	b.n	8006b24 <_malloc_r+0xa8>
 8006b66:	230c      	movs	r3, #12
 8006b68:	6033      	str	r3, [r6, #0]
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f000 f80c 	bl	8006b88 <__malloc_unlock>
 8006b70:	e794      	b.n	8006a9c <_malloc_r+0x20>
 8006b72:	6005      	str	r5, [r0, #0]
 8006b74:	e7d6      	b.n	8006b24 <_malloc_r+0xa8>
 8006b76:	bf00      	nop
 8006b78:	200006b8 	.word	0x200006b8

08006b7c <__malloc_lock>:
 8006b7c:	4801      	ldr	r0, [pc, #4]	@ (8006b84 <__malloc_lock+0x8>)
 8006b7e:	f000 b9d6 	b.w	8006f2e <__retarget_lock_acquire_recursive>
 8006b82:	bf00      	nop
 8006b84:	200007fc 	.word	0x200007fc

08006b88 <__malloc_unlock>:
 8006b88:	4801      	ldr	r0, [pc, #4]	@ (8006b90 <__malloc_unlock+0x8>)
 8006b8a:	f000 b9d1 	b.w	8006f30 <__retarget_lock_release_recursive>
 8006b8e:	bf00      	nop
 8006b90:	200007fc 	.word	0x200007fc

08006b94 <rand>:
 8006b94:	4b16      	ldr	r3, [pc, #88]	@ (8006bf0 <rand+0x5c>)
 8006b96:	b510      	push	{r4, lr}
 8006b98:	681c      	ldr	r4, [r3, #0]
 8006b9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006b9c:	b9b3      	cbnz	r3, 8006bcc <rand+0x38>
 8006b9e:	2018      	movs	r0, #24
 8006ba0:	f7ff ff42 	bl	8006a28 <malloc>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	6320      	str	r0, [r4, #48]	@ 0x30
 8006ba8:	b920      	cbnz	r0, 8006bb4 <rand+0x20>
 8006baa:	4b12      	ldr	r3, [pc, #72]	@ (8006bf4 <rand+0x60>)
 8006bac:	4812      	ldr	r0, [pc, #72]	@ (8006bf8 <rand+0x64>)
 8006bae:	2152      	movs	r1, #82	@ 0x52
 8006bb0:	f000 f9c0 	bl	8006f34 <__assert_func>
 8006bb4:	4911      	ldr	r1, [pc, #68]	@ (8006bfc <rand+0x68>)
 8006bb6:	4b12      	ldr	r3, [pc, #72]	@ (8006c00 <rand+0x6c>)
 8006bb8:	e9c0 1300 	strd	r1, r3, [r0]
 8006bbc:	4b11      	ldr	r3, [pc, #68]	@ (8006c04 <rand+0x70>)
 8006bbe:	6083      	str	r3, [r0, #8]
 8006bc0:	230b      	movs	r3, #11
 8006bc2:	8183      	strh	r3, [r0, #12]
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006bcc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006bce:	480e      	ldr	r0, [pc, #56]	@ (8006c08 <rand+0x74>)
 8006bd0:	690b      	ldr	r3, [r1, #16]
 8006bd2:	694c      	ldr	r4, [r1, #20]
 8006bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8006c0c <rand+0x78>)
 8006bd6:	4358      	muls	r0, r3
 8006bd8:	fb02 0004 	mla	r0, r2, r4, r0
 8006bdc:	fba3 3202 	umull	r3, r2, r3, r2
 8006be0:	3301      	adds	r3, #1
 8006be2:	eb40 0002 	adc.w	r0, r0, r2
 8006be6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006bea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006bee:	bd10      	pop	{r4, pc}
 8006bf0:	20000018 	.word	0x20000018
 8006bf4:	08008a78 	.word	0x08008a78
 8006bf8:	08008a8f 	.word	0x08008a8f
 8006bfc:	abcd330e 	.word	0xabcd330e
 8006c00:	e66d1234 	.word	0xe66d1234
 8006c04:	0005deec 	.word	0x0005deec
 8006c08:	5851f42d 	.word	0x5851f42d
 8006c0c:	4c957f2d 	.word	0x4c957f2d

08006c10 <std>:
 8006c10:	2300      	movs	r3, #0
 8006c12:	b510      	push	{r4, lr}
 8006c14:	4604      	mov	r4, r0
 8006c16:	e9c0 3300 	strd	r3, r3, [r0]
 8006c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c1e:	6083      	str	r3, [r0, #8]
 8006c20:	8181      	strh	r1, [r0, #12]
 8006c22:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c24:	81c2      	strh	r2, [r0, #14]
 8006c26:	6183      	str	r3, [r0, #24]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	2208      	movs	r2, #8
 8006c2c:	305c      	adds	r0, #92	@ 0x5c
 8006c2e:	f000 f8f4 	bl	8006e1a <memset>
 8006c32:	4b0d      	ldr	r3, [pc, #52]	@ (8006c68 <std+0x58>)
 8006c34:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c36:	4b0d      	ldr	r3, [pc, #52]	@ (8006c6c <std+0x5c>)
 8006c38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c70 <std+0x60>)
 8006c3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c74 <std+0x64>)
 8006c40:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c42:	4b0d      	ldr	r3, [pc, #52]	@ (8006c78 <std+0x68>)
 8006c44:	6224      	str	r4, [r4, #32]
 8006c46:	429c      	cmp	r4, r3
 8006c48:	d006      	beq.n	8006c58 <std+0x48>
 8006c4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c4e:	4294      	cmp	r4, r2
 8006c50:	d002      	beq.n	8006c58 <std+0x48>
 8006c52:	33d0      	adds	r3, #208	@ 0xd0
 8006c54:	429c      	cmp	r4, r3
 8006c56:	d105      	bne.n	8006c64 <std+0x54>
 8006c58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c60:	f000 b964 	b.w	8006f2c <__retarget_lock_init_recursive>
 8006c64:	bd10      	pop	{r4, pc}
 8006c66:	bf00      	nop
 8006c68:	08006d95 	.word	0x08006d95
 8006c6c:	08006db7 	.word	0x08006db7
 8006c70:	08006def 	.word	0x08006def
 8006c74:	08006e13 	.word	0x08006e13
 8006c78:	200006bc 	.word	0x200006bc

08006c7c <stdio_exit_handler>:
 8006c7c:	4a02      	ldr	r2, [pc, #8]	@ (8006c88 <stdio_exit_handler+0xc>)
 8006c7e:	4903      	ldr	r1, [pc, #12]	@ (8006c8c <stdio_exit_handler+0x10>)
 8006c80:	4803      	ldr	r0, [pc, #12]	@ (8006c90 <stdio_exit_handler+0x14>)
 8006c82:	f000 b869 	b.w	8006d58 <_fwalk_sglue>
 8006c86:	bf00      	nop
 8006c88:	2000000c 	.word	0x2000000c
 8006c8c:	0800710d 	.word	0x0800710d
 8006c90:	2000001c 	.word	0x2000001c

08006c94 <cleanup_stdio>:
 8006c94:	6841      	ldr	r1, [r0, #4]
 8006c96:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc8 <cleanup_stdio+0x34>)
 8006c98:	4299      	cmp	r1, r3
 8006c9a:	b510      	push	{r4, lr}
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	d001      	beq.n	8006ca4 <cleanup_stdio+0x10>
 8006ca0:	f000 fa34 	bl	800710c <_fflush_r>
 8006ca4:	68a1      	ldr	r1, [r4, #8]
 8006ca6:	4b09      	ldr	r3, [pc, #36]	@ (8006ccc <cleanup_stdio+0x38>)
 8006ca8:	4299      	cmp	r1, r3
 8006caa:	d002      	beq.n	8006cb2 <cleanup_stdio+0x1e>
 8006cac:	4620      	mov	r0, r4
 8006cae:	f000 fa2d 	bl	800710c <_fflush_r>
 8006cb2:	68e1      	ldr	r1, [r4, #12]
 8006cb4:	4b06      	ldr	r3, [pc, #24]	@ (8006cd0 <cleanup_stdio+0x3c>)
 8006cb6:	4299      	cmp	r1, r3
 8006cb8:	d004      	beq.n	8006cc4 <cleanup_stdio+0x30>
 8006cba:	4620      	mov	r0, r4
 8006cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc0:	f000 ba24 	b.w	800710c <_fflush_r>
 8006cc4:	bd10      	pop	{r4, pc}
 8006cc6:	bf00      	nop
 8006cc8:	200006bc 	.word	0x200006bc
 8006ccc:	20000724 	.word	0x20000724
 8006cd0:	2000078c 	.word	0x2000078c

08006cd4 <global_stdio_init.part.0>:
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d04 <global_stdio_init.part.0+0x30>)
 8006cd8:	4c0b      	ldr	r4, [pc, #44]	@ (8006d08 <global_stdio_init.part.0+0x34>)
 8006cda:	4a0c      	ldr	r2, [pc, #48]	@ (8006d0c <global_stdio_init.part.0+0x38>)
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	4620      	mov	r0, r4
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2104      	movs	r1, #4
 8006ce4:	f7ff ff94 	bl	8006c10 <std>
 8006ce8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006cec:	2201      	movs	r2, #1
 8006cee:	2109      	movs	r1, #9
 8006cf0:	f7ff ff8e 	bl	8006c10 <std>
 8006cf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cfe:	2112      	movs	r1, #18
 8006d00:	f7ff bf86 	b.w	8006c10 <std>
 8006d04:	200007f4 	.word	0x200007f4
 8006d08:	200006bc 	.word	0x200006bc
 8006d0c:	08006c7d 	.word	0x08006c7d

08006d10 <__sfp_lock_acquire>:
 8006d10:	4801      	ldr	r0, [pc, #4]	@ (8006d18 <__sfp_lock_acquire+0x8>)
 8006d12:	f000 b90c 	b.w	8006f2e <__retarget_lock_acquire_recursive>
 8006d16:	bf00      	nop
 8006d18:	200007fd 	.word	0x200007fd

08006d1c <__sfp_lock_release>:
 8006d1c:	4801      	ldr	r0, [pc, #4]	@ (8006d24 <__sfp_lock_release+0x8>)
 8006d1e:	f000 b907 	b.w	8006f30 <__retarget_lock_release_recursive>
 8006d22:	bf00      	nop
 8006d24:	200007fd 	.word	0x200007fd

08006d28 <__sinit>:
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	f7ff fff0 	bl	8006d10 <__sfp_lock_acquire>
 8006d30:	6a23      	ldr	r3, [r4, #32]
 8006d32:	b11b      	cbz	r3, 8006d3c <__sinit+0x14>
 8006d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d38:	f7ff bff0 	b.w	8006d1c <__sfp_lock_release>
 8006d3c:	4b04      	ldr	r3, [pc, #16]	@ (8006d50 <__sinit+0x28>)
 8006d3e:	6223      	str	r3, [r4, #32]
 8006d40:	4b04      	ldr	r3, [pc, #16]	@ (8006d54 <__sinit+0x2c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1f5      	bne.n	8006d34 <__sinit+0xc>
 8006d48:	f7ff ffc4 	bl	8006cd4 <global_stdio_init.part.0>
 8006d4c:	e7f2      	b.n	8006d34 <__sinit+0xc>
 8006d4e:	bf00      	nop
 8006d50:	08006c95 	.word	0x08006c95
 8006d54:	200007f4 	.word	0x200007f4

08006d58 <_fwalk_sglue>:
 8006d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	4688      	mov	r8, r1
 8006d60:	4614      	mov	r4, r2
 8006d62:	2600      	movs	r6, #0
 8006d64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d68:	f1b9 0901 	subs.w	r9, r9, #1
 8006d6c:	d505      	bpl.n	8006d7a <_fwalk_sglue+0x22>
 8006d6e:	6824      	ldr	r4, [r4, #0]
 8006d70:	2c00      	cmp	r4, #0
 8006d72:	d1f7      	bne.n	8006d64 <_fwalk_sglue+0xc>
 8006d74:	4630      	mov	r0, r6
 8006d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d7a:	89ab      	ldrh	r3, [r5, #12]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d907      	bls.n	8006d90 <_fwalk_sglue+0x38>
 8006d80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d84:	3301      	adds	r3, #1
 8006d86:	d003      	beq.n	8006d90 <_fwalk_sglue+0x38>
 8006d88:	4629      	mov	r1, r5
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	47c0      	blx	r8
 8006d8e:	4306      	orrs	r6, r0
 8006d90:	3568      	adds	r5, #104	@ 0x68
 8006d92:	e7e9      	b.n	8006d68 <_fwalk_sglue+0x10>

08006d94 <__sread>:
 8006d94:	b510      	push	{r4, lr}
 8006d96:	460c      	mov	r4, r1
 8006d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d9c:	f000 f868 	bl	8006e70 <_read_r>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	bfab      	itete	ge
 8006da4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006da6:	89a3      	ldrhlt	r3, [r4, #12]
 8006da8:	181b      	addge	r3, r3, r0
 8006daa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006dae:	bfac      	ite	ge
 8006db0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006db2:	81a3      	strhlt	r3, [r4, #12]
 8006db4:	bd10      	pop	{r4, pc}

08006db6 <__swrite>:
 8006db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dba:	461f      	mov	r7, r3
 8006dbc:	898b      	ldrh	r3, [r1, #12]
 8006dbe:	05db      	lsls	r3, r3, #23
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	4616      	mov	r6, r2
 8006dc6:	d505      	bpl.n	8006dd4 <__swrite+0x1e>
 8006dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dcc:	2302      	movs	r3, #2
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f000 f83c 	bl	8006e4c <_lseek_r>
 8006dd4:	89a3      	ldrh	r3, [r4, #12]
 8006dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dde:	81a3      	strh	r3, [r4, #12]
 8006de0:	4632      	mov	r2, r6
 8006de2:	463b      	mov	r3, r7
 8006de4:	4628      	mov	r0, r5
 8006de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dea:	f000 b863 	b.w	8006eb4 <_write_r>

08006dee <__sseek>:
 8006dee:	b510      	push	{r4, lr}
 8006df0:	460c      	mov	r4, r1
 8006df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df6:	f000 f829 	bl	8006e4c <_lseek_r>
 8006dfa:	1c43      	adds	r3, r0, #1
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	bf15      	itete	ne
 8006e00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e0a:	81a3      	strheq	r3, [r4, #12]
 8006e0c:	bf18      	it	ne
 8006e0e:	81a3      	strhne	r3, [r4, #12]
 8006e10:	bd10      	pop	{r4, pc}

08006e12 <__sclose>:
 8006e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e16:	f000 b809 	b.w	8006e2c <_close_r>

08006e1a <memset>:
 8006e1a:	4402      	add	r2, r0
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d100      	bne.n	8006e24 <memset+0xa>
 8006e22:	4770      	bx	lr
 8006e24:	f803 1b01 	strb.w	r1, [r3], #1
 8006e28:	e7f9      	b.n	8006e1e <memset+0x4>
	...

08006e2c <_close_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4d06      	ldr	r5, [pc, #24]	@ (8006e48 <_close_r+0x1c>)
 8006e30:	2300      	movs	r3, #0
 8006e32:	4604      	mov	r4, r0
 8006e34:	4608      	mov	r0, r1
 8006e36:	602b      	str	r3, [r5, #0]
 8006e38:	f7fa fe5c 	bl	8001af4 <_close>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_close_r+0x1a>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_close_r+0x1a>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	200007f8 	.word	0x200007f8

08006e4c <_lseek_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4d07      	ldr	r5, [pc, #28]	@ (8006e6c <_lseek_r+0x20>)
 8006e50:	4604      	mov	r4, r0
 8006e52:	4608      	mov	r0, r1
 8006e54:	4611      	mov	r1, r2
 8006e56:	2200      	movs	r2, #0
 8006e58:	602a      	str	r2, [r5, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f7fa fe71 	bl	8001b42 <_lseek>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_lseek_r+0x1e>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_lseek_r+0x1e>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	200007f8 	.word	0x200007f8

08006e70 <_read_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4d07      	ldr	r5, [pc, #28]	@ (8006e90 <_read_r+0x20>)
 8006e74:	4604      	mov	r4, r0
 8006e76:	4608      	mov	r0, r1
 8006e78:	4611      	mov	r1, r2
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	602a      	str	r2, [r5, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	f7fa fdff 	bl	8001a82 <_read>
 8006e84:	1c43      	adds	r3, r0, #1
 8006e86:	d102      	bne.n	8006e8e <_read_r+0x1e>
 8006e88:	682b      	ldr	r3, [r5, #0]
 8006e8a:	b103      	cbz	r3, 8006e8e <_read_r+0x1e>
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	bd38      	pop	{r3, r4, r5, pc}
 8006e90:	200007f8 	.word	0x200007f8

08006e94 <_sbrk_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4d06      	ldr	r5, [pc, #24]	@ (8006eb0 <_sbrk_r+0x1c>)
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	602b      	str	r3, [r5, #0]
 8006ea0:	f7fa fe5c 	bl	8001b5c <_sbrk>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_sbrk_r+0x1a>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_sbrk_r+0x1a>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	200007f8 	.word	0x200007f8

08006eb4 <_write_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d07      	ldr	r5, [pc, #28]	@ (8006ed4 <_write_r+0x20>)
 8006eb8:	4604      	mov	r4, r0
 8006eba:	4608      	mov	r0, r1
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	602a      	str	r2, [r5, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f7fa fdfa 	bl	8001abc <_write>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d102      	bne.n	8006ed2 <_write_r+0x1e>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	b103      	cbz	r3, 8006ed2 <_write_r+0x1e>
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	200007f8 	.word	0x200007f8

08006ed8 <__errno>:
 8006ed8:	4b01      	ldr	r3, [pc, #4]	@ (8006ee0 <__errno+0x8>)
 8006eda:	6818      	ldr	r0, [r3, #0]
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	20000018 	.word	0x20000018

08006ee4 <__libc_init_array>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	4d0d      	ldr	r5, [pc, #52]	@ (8006f1c <__libc_init_array+0x38>)
 8006ee8:	4c0d      	ldr	r4, [pc, #52]	@ (8006f20 <__libc_init_array+0x3c>)
 8006eea:	1b64      	subs	r4, r4, r5
 8006eec:	10a4      	asrs	r4, r4, #2
 8006eee:	2600      	movs	r6, #0
 8006ef0:	42a6      	cmp	r6, r4
 8006ef2:	d109      	bne.n	8006f08 <__libc_init_array+0x24>
 8006ef4:	4d0b      	ldr	r5, [pc, #44]	@ (8006f24 <__libc_init_array+0x40>)
 8006ef6:	4c0c      	ldr	r4, [pc, #48]	@ (8006f28 <__libc_init_array+0x44>)
 8006ef8:	f001 fda6 	bl	8008a48 <_init>
 8006efc:	1b64      	subs	r4, r4, r5
 8006efe:	10a4      	asrs	r4, r4, #2
 8006f00:	2600      	movs	r6, #0
 8006f02:	42a6      	cmp	r6, r4
 8006f04:	d105      	bne.n	8006f12 <__libc_init_array+0x2e>
 8006f06:	bd70      	pop	{r4, r5, r6, pc}
 8006f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0c:	4798      	blx	r3
 8006f0e:	3601      	adds	r6, #1
 8006f10:	e7ee      	b.n	8006ef0 <__libc_init_array+0xc>
 8006f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f16:	4798      	blx	r3
 8006f18:	3601      	adds	r6, #1
 8006f1a:	e7f2      	b.n	8006f02 <__libc_init_array+0x1e>
 8006f1c:	08008d38 	.word	0x08008d38
 8006f20:	08008d38 	.word	0x08008d38
 8006f24:	08008d38 	.word	0x08008d38
 8006f28:	08008d3c 	.word	0x08008d3c

08006f2c <__retarget_lock_init_recursive>:
 8006f2c:	4770      	bx	lr

08006f2e <__retarget_lock_acquire_recursive>:
 8006f2e:	4770      	bx	lr

08006f30 <__retarget_lock_release_recursive>:
 8006f30:	4770      	bx	lr
	...

08006f34 <__assert_func>:
 8006f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f36:	4614      	mov	r4, r2
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4b09      	ldr	r3, [pc, #36]	@ (8006f60 <__assert_func+0x2c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4605      	mov	r5, r0
 8006f40:	68d8      	ldr	r0, [r3, #12]
 8006f42:	b954      	cbnz	r4, 8006f5a <__assert_func+0x26>
 8006f44:	4b07      	ldr	r3, [pc, #28]	@ (8006f64 <__assert_func+0x30>)
 8006f46:	461c      	mov	r4, r3
 8006f48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f4c:	9100      	str	r1, [sp, #0]
 8006f4e:	462b      	mov	r3, r5
 8006f50:	4905      	ldr	r1, [pc, #20]	@ (8006f68 <__assert_func+0x34>)
 8006f52:	f000 f903 	bl	800715c <fiprintf>
 8006f56:	f000 f913 	bl	8007180 <abort>
 8006f5a:	4b04      	ldr	r3, [pc, #16]	@ (8006f6c <__assert_func+0x38>)
 8006f5c:	e7f4      	b.n	8006f48 <__assert_func+0x14>
 8006f5e:	bf00      	nop
 8006f60:	20000018 	.word	0x20000018
 8006f64:	08008b22 	.word	0x08008b22
 8006f68:	08008af4 	.word	0x08008af4
 8006f6c:	08008ae7 	.word	0x08008ae7

08006f70 <_free_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4605      	mov	r5, r0
 8006f74:	2900      	cmp	r1, #0
 8006f76:	d041      	beq.n	8006ffc <_free_r+0x8c>
 8006f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f7c:	1f0c      	subs	r4, r1, #4
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bfb8      	it	lt
 8006f82:	18e4      	addlt	r4, r4, r3
 8006f84:	f7ff fdfa 	bl	8006b7c <__malloc_lock>
 8006f88:	4a1d      	ldr	r2, [pc, #116]	@ (8007000 <_free_r+0x90>)
 8006f8a:	6813      	ldr	r3, [r2, #0]
 8006f8c:	b933      	cbnz	r3, 8006f9c <_free_r+0x2c>
 8006f8e:	6063      	str	r3, [r4, #4]
 8006f90:	6014      	str	r4, [r2, #0]
 8006f92:	4628      	mov	r0, r5
 8006f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f98:	f7ff bdf6 	b.w	8006b88 <__malloc_unlock>
 8006f9c:	42a3      	cmp	r3, r4
 8006f9e:	d908      	bls.n	8006fb2 <_free_r+0x42>
 8006fa0:	6820      	ldr	r0, [r4, #0]
 8006fa2:	1821      	adds	r1, r4, r0
 8006fa4:	428b      	cmp	r3, r1
 8006fa6:	bf01      	itttt	eq
 8006fa8:	6819      	ldreq	r1, [r3, #0]
 8006faa:	685b      	ldreq	r3, [r3, #4]
 8006fac:	1809      	addeq	r1, r1, r0
 8006fae:	6021      	streq	r1, [r4, #0]
 8006fb0:	e7ed      	b.n	8006f8e <_free_r+0x1e>
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	b10b      	cbz	r3, 8006fbc <_free_r+0x4c>
 8006fb8:	42a3      	cmp	r3, r4
 8006fba:	d9fa      	bls.n	8006fb2 <_free_r+0x42>
 8006fbc:	6811      	ldr	r1, [r2, #0]
 8006fbe:	1850      	adds	r0, r2, r1
 8006fc0:	42a0      	cmp	r0, r4
 8006fc2:	d10b      	bne.n	8006fdc <_free_r+0x6c>
 8006fc4:	6820      	ldr	r0, [r4, #0]
 8006fc6:	4401      	add	r1, r0
 8006fc8:	1850      	adds	r0, r2, r1
 8006fca:	4283      	cmp	r3, r0
 8006fcc:	6011      	str	r1, [r2, #0]
 8006fce:	d1e0      	bne.n	8006f92 <_free_r+0x22>
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	6053      	str	r3, [r2, #4]
 8006fd6:	4408      	add	r0, r1
 8006fd8:	6010      	str	r0, [r2, #0]
 8006fda:	e7da      	b.n	8006f92 <_free_r+0x22>
 8006fdc:	d902      	bls.n	8006fe4 <_free_r+0x74>
 8006fde:	230c      	movs	r3, #12
 8006fe0:	602b      	str	r3, [r5, #0]
 8006fe2:	e7d6      	b.n	8006f92 <_free_r+0x22>
 8006fe4:	6820      	ldr	r0, [r4, #0]
 8006fe6:	1821      	adds	r1, r4, r0
 8006fe8:	428b      	cmp	r3, r1
 8006fea:	bf04      	itt	eq
 8006fec:	6819      	ldreq	r1, [r3, #0]
 8006fee:	685b      	ldreq	r3, [r3, #4]
 8006ff0:	6063      	str	r3, [r4, #4]
 8006ff2:	bf04      	itt	eq
 8006ff4:	1809      	addeq	r1, r1, r0
 8006ff6:	6021      	streq	r1, [r4, #0]
 8006ff8:	6054      	str	r4, [r2, #4]
 8006ffa:	e7ca      	b.n	8006f92 <_free_r+0x22>
 8006ffc:	bd38      	pop	{r3, r4, r5, pc}
 8006ffe:	bf00      	nop
 8007000:	200006b8 	.word	0x200006b8

08007004 <__sflush_r>:
 8007004:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800700c:	0716      	lsls	r6, r2, #28
 800700e:	4605      	mov	r5, r0
 8007010:	460c      	mov	r4, r1
 8007012:	d454      	bmi.n	80070be <__sflush_r+0xba>
 8007014:	684b      	ldr	r3, [r1, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	dc02      	bgt.n	8007020 <__sflush_r+0x1c>
 800701a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800701c:	2b00      	cmp	r3, #0
 800701e:	dd48      	ble.n	80070b2 <__sflush_r+0xae>
 8007020:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007022:	2e00      	cmp	r6, #0
 8007024:	d045      	beq.n	80070b2 <__sflush_r+0xae>
 8007026:	2300      	movs	r3, #0
 8007028:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800702c:	682f      	ldr	r7, [r5, #0]
 800702e:	6a21      	ldr	r1, [r4, #32]
 8007030:	602b      	str	r3, [r5, #0]
 8007032:	d030      	beq.n	8007096 <__sflush_r+0x92>
 8007034:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	0759      	lsls	r1, r3, #29
 800703a:	d505      	bpl.n	8007048 <__sflush_r+0x44>
 800703c:	6863      	ldr	r3, [r4, #4]
 800703e:	1ad2      	subs	r2, r2, r3
 8007040:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007042:	b10b      	cbz	r3, 8007048 <__sflush_r+0x44>
 8007044:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007046:	1ad2      	subs	r2, r2, r3
 8007048:	2300      	movs	r3, #0
 800704a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800704c:	6a21      	ldr	r1, [r4, #32]
 800704e:	4628      	mov	r0, r5
 8007050:	47b0      	blx	r6
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	89a3      	ldrh	r3, [r4, #12]
 8007056:	d106      	bne.n	8007066 <__sflush_r+0x62>
 8007058:	6829      	ldr	r1, [r5, #0]
 800705a:	291d      	cmp	r1, #29
 800705c:	d82b      	bhi.n	80070b6 <__sflush_r+0xb2>
 800705e:	4a2a      	ldr	r2, [pc, #168]	@ (8007108 <__sflush_r+0x104>)
 8007060:	410a      	asrs	r2, r1
 8007062:	07d6      	lsls	r6, r2, #31
 8007064:	d427      	bmi.n	80070b6 <__sflush_r+0xb2>
 8007066:	2200      	movs	r2, #0
 8007068:	6062      	str	r2, [r4, #4]
 800706a:	04d9      	lsls	r1, r3, #19
 800706c:	6922      	ldr	r2, [r4, #16]
 800706e:	6022      	str	r2, [r4, #0]
 8007070:	d504      	bpl.n	800707c <__sflush_r+0x78>
 8007072:	1c42      	adds	r2, r0, #1
 8007074:	d101      	bne.n	800707a <__sflush_r+0x76>
 8007076:	682b      	ldr	r3, [r5, #0]
 8007078:	b903      	cbnz	r3, 800707c <__sflush_r+0x78>
 800707a:	6560      	str	r0, [r4, #84]	@ 0x54
 800707c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800707e:	602f      	str	r7, [r5, #0]
 8007080:	b1b9      	cbz	r1, 80070b2 <__sflush_r+0xae>
 8007082:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007086:	4299      	cmp	r1, r3
 8007088:	d002      	beq.n	8007090 <__sflush_r+0x8c>
 800708a:	4628      	mov	r0, r5
 800708c:	f7ff ff70 	bl	8006f70 <_free_r>
 8007090:	2300      	movs	r3, #0
 8007092:	6363      	str	r3, [r4, #52]	@ 0x34
 8007094:	e00d      	b.n	80070b2 <__sflush_r+0xae>
 8007096:	2301      	movs	r3, #1
 8007098:	4628      	mov	r0, r5
 800709a:	47b0      	blx	r6
 800709c:	4602      	mov	r2, r0
 800709e:	1c50      	adds	r0, r2, #1
 80070a0:	d1c9      	bne.n	8007036 <__sflush_r+0x32>
 80070a2:	682b      	ldr	r3, [r5, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0c6      	beq.n	8007036 <__sflush_r+0x32>
 80070a8:	2b1d      	cmp	r3, #29
 80070aa:	d001      	beq.n	80070b0 <__sflush_r+0xac>
 80070ac:	2b16      	cmp	r3, #22
 80070ae:	d11e      	bne.n	80070ee <__sflush_r+0xea>
 80070b0:	602f      	str	r7, [r5, #0]
 80070b2:	2000      	movs	r0, #0
 80070b4:	e022      	b.n	80070fc <__sflush_r+0xf8>
 80070b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ba:	b21b      	sxth	r3, r3
 80070bc:	e01b      	b.n	80070f6 <__sflush_r+0xf2>
 80070be:	690f      	ldr	r7, [r1, #16]
 80070c0:	2f00      	cmp	r7, #0
 80070c2:	d0f6      	beq.n	80070b2 <__sflush_r+0xae>
 80070c4:	0793      	lsls	r3, r2, #30
 80070c6:	680e      	ldr	r6, [r1, #0]
 80070c8:	bf08      	it	eq
 80070ca:	694b      	ldreq	r3, [r1, #20]
 80070cc:	600f      	str	r7, [r1, #0]
 80070ce:	bf18      	it	ne
 80070d0:	2300      	movne	r3, #0
 80070d2:	eba6 0807 	sub.w	r8, r6, r7
 80070d6:	608b      	str	r3, [r1, #8]
 80070d8:	f1b8 0f00 	cmp.w	r8, #0
 80070dc:	dde9      	ble.n	80070b2 <__sflush_r+0xae>
 80070de:	6a21      	ldr	r1, [r4, #32]
 80070e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070e2:	4643      	mov	r3, r8
 80070e4:	463a      	mov	r2, r7
 80070e6:	4628      	mov	r0, r5
 80070e8:	47b0      	blx	r6
 80070ea:	2800      	cmp	r0, #0
 80070ec:	dc08      	bgt.n	8007100 <__sflush_r+0xfc>
 80070ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070f6:	81a3      	strh	r3, [r4, #12]
 80070f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007100:	4407      	add	r7, r0
 8007102:	eba8 0800 	sub.w	r8, r8, r0
 8007106:	e7e7      	b.n	80070d8 <__sflush_r+0xd4>
 8007108:	dfbffffe 	.word	0xdfbffffe

0800710c <_fflush_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	690b      	ldr	r3, [r1, #16]
 8007110:	4605      	mov	r5, r0
 8007112:	460c      	mov	r4, r1
 8007114:	b913      	cbnz	r3, 800711c <_fflush_r+0x10>
 8007116:	2500      	movs	r5, #0
 8007118:	4628      	mov	r0, r5
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	b118      	cbz	r0, 8007126 <_fflush_r+0x1a>
 800711e:	6a03      	ldr	r3, [r0, #32]
 8007120:	b90b      	cbnz	r3, 8007126 <_fflush_r+0x1a>
 8007122:	f7ff fe01 	bl	8006d28 <__sinit>
 8007126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0f3      	beq.n	8007116 <_fflush_r+0xa>
 800712e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007130:	07d0      	lsls	r0, r2, #31
 8007132:	d404      	bmi.n	800713e <_fflush_r+0x32>
 8007134:	0599      	lsls	r1, r3, #22
 8007136:	d402      	bmi.n	800713e <_fflush_r+0x32>
 8007138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800713a:	f7ff fef8 	bl	8006f2e <__retarget_lock_acquire_recursive>
 800713e:	4628      	mov	r0, r5
 8007140:	4621      	mov	r1, r4
 8007142:	f7ff ff5f 	bl	8007004 <__sflush_r>
 8007146:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007148:	07da      	lsls	r2, r3, #31
 800714a:	4605      	mov	r5, r0
 800714c:	d4e4      	bmi.n	8007118 <_fflush_r+0xc>
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	059b      	lsls	r3, r3, #22
 8007152:	d4e1      	bmi.n	8007118 <_fflush_r+0xc>
 8007154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007156:	f7ff feeb 	bl	8006f30 <__retarget_lock_release_recursive>
 800715a:	e7dd      	b.n	8007118 <_fflush_r+0xc>

0800715c <fiprintf>:
 800715c:	b40e      	push	{r1, r2, r3}
 800715e:	b503      	push	{r0, r1, lr}
 8007160:	4601      	mov	r1, r0
 8007162:	ab03      	add	r3, sp, #12
 8007164:	4805      	ldr	r0, [pc, #20]	@ (800717c <fiprintf+0x20>)
 8007166:	f853 2b04 	ldr.w	r2, [r3], #4
 800716a:	6800      	ldr	r0, [r0, #0]
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	f000 f837 	bl	80071e0 <_vfiprintf_r>
 8007172:	b002      	add	sp, #8
 8007174:	f85d eb04 	ldr.w	lr, [sp], #4
 8007178:	b003      	add	sp, #12
 800717a:	4770      	bx	lr
 800717c:	20000018 	.word	0x20000018

08007180 <abort>:
 8007180:	b508      	push	{r3, lr}
 8007182:	2006      	movs	r0, #6
 8007184:	f000 fb8e 	bl	80078a4 <raise>
 8007188:	2001      	movs	r0, #1
 800718a:	f7fa fc6f 	bl	8001a6c <_exit>

0800718e <__sfputc_r>:
 800718e:	6893      	ldr	r3, [r2, #8]
 8007190:	3b01      	subs	r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	b410      	push	{r4}
 8007196:	6093      	str	r3, [r2, #8]
 8007198:	da08      	bge.n	80071ac <__sfputc_r+0x1e>
 800719a:	6994      	ldr	r4, [r2, #24]
 800719c:	42a3      	cmp	r3, r4
 800719e:	db01      	blt.n	80071a4 <__sfputc_r+0x16>
 80071a0:	290a      	cmp	r1, #10
 80071a2:	d103      	bne.n	80071ac <__sfputc_r+0x1e>
 80071a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071a8:	f000 bac0 	b.w	800772c <__swbuf_r>
 80071ac:	6813      	ldr	r3, [r2, #0]
 80071ae:	1c58      	adds	r0, r3, #1
 80071b0:	6010      	str	r0, [r2, #0]
 80071b2:	7019      	strb	r1, [r3, #0]
 80071b4:	4608      	mov	r0, r1
 80071b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <__sfputs_r>:
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071be:	4606      	mov	r6, r0
 80071c0:	460f      	mov	r7, r1
 80071c2:	4614      	mov	r4, r2
 80071c4:	18d5      	adds	r5, r2, r3
 80071c6:	42ac      	cmp	r4, r5
 80071c8:	d101      	bne.n	80071ce <__sfputs_r+0x12>
 80071ca:	2000      	movs	r0, #0
 80071cc:	e007      	b.n	80071de <__sfputs_r+0x22>
 80071ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d2:	463a      	mov	r2, r7
 80071d4:	4630      	mov	r0, r6
 80071d6:	f7ff ffda 	bl	800718e <__sfputc_r>
 80071da:	1c43      	adds	r3, r0, #1
 80071dc:	d1f3      	bne.n	80071c6 <__sfputs_r+0xa>
 80071de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071e0 <_vfiprintf_r>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	460d      	mov	r5, r1
 80071e6:	b09d      	sub	sp, #116	@ 0x74
 80071e8:	4614      	mov	r4, r2
 80071ea:	4698      	mov	r8, r3
 80071ec:	4606      	mov	r6, r0
 80071ee:	b118      	cbz	r0, 80071f8 <_vfiprintf_r+0x18>
 80071f0:	6a03      	ldr	r3, [r0, #32]
 80071f2:	b90b      	cbnz	r3, 80071f8 <_vfiprintf_r+0x18>
 80071f4:	f7ff fd98 	bl	8006d28 <__sinit>
 80071f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071fa:	07d9      	lsls	r1, r3, #31
 80071fc:	d405      	bmi.n	800720a <_vfiprintf_r+0x2a>
 80071fe:	89ab      	ldrh	r3, [r5, #12]
 8007200:	059a      	lsls	r2, r3, #22
 8007202:	d402      	bmi.n	800720a <_vfiprintf_r+0x2a>
 8007204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007206:	f7ff fe92 	bl	8006f2e <__retarget_lock_acquire_recursive>
 800720a:	89ab      	ldrh	r3, [r5, #12]
 800720c:	071b      	lsls	r3, r3, #28
 800720e:	d501      	bpl.n	8007214 <_vfiprintf_r+0x34>
 8007210:	692b      	ldr	r3, [r5, #16]
 8007212:	b99b      	cbnz	r3, 800723c <_vfiprintf_r+0x5c>
 8007214:	4629      	mov	r1, r5
 8007216:	4630      	mov	r0, r6
 8007218:	f000 fac6 	bl	80077a8 <__swsetup_r>
 800721c:	b170      	cbz	r0, 800723c <_vfiprintf_r+0x5c>
 800721e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007220:	07dc      	lsls	r4, r3, #31
 8007222:	d504      	bpl.n	800722e <_vfiprintf_r+0x4e>
 8007224:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007228:	b01d      	add	sp, #116	@ 0x74
 800722a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722e:	89ab      	ldrh	r3, [r5, #12]
 8007230:	0598      	lsls	r0, r3, #22
 8007232:	d4f7      	bmi.n	8007224 <_vfiprintf_r+0x44>
 8007234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007236:	f7ff fe7b 	bl	8006f30 <__retarget_lock_release_recursive>
 800723a:	e7f3      	b.n	8007224 <_vfiprintf_r+0x44>
 800723c:	2300      	movs	r3, #0
 800723e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007240:	2320      	movs	r3, #32
 8007242:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007246:	f8cd 800c 	str.w	r8, [sp, #12]
 800724a:	2330      	movs	r3, #48	@ 0x30
 800724c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80073fc <_vfiprintf_r+0x21c>
 8007250:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007254:	f04f 0901 	mov.w	r9, #1
 8007258:	4623      	mov	r3, r4
 800725a:	469a      	mov	sl, r3
 800725c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007260:	b10a      	cbz	r2, 8007266 <_vfiprintf_r+0x86>
 8007262:	2a25      	cmp	r2, #37	@ 0x25
 8007264:	d1f9      	bne.n	800725a <_vfiprintf_r+0x7a>
 8007266:	ebba 0b04 	subs.w	fp, sl, r4
 800726a:	d00b      	beq.n	8007284 <_vfiprintf_r+0xa4>
 800726c:	465b      	mov	r3, fp
 800726e:	4622      	mov	r2, r4
 8007270:	4629      	mov	r1, r5
 8007272:	4630      	mov	r0, r6
 8007274:	f7ff ffa2 	bl	80071bc <__sfputs_r>
 8007278:	3001      	adds	r0, #1
 800727a:	f000 80a7 	beq.w	80073cc <_vfiprintf_r+0x1ec>
 800727e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007280:	445a      	add	r2, fp
 8007282:	9209      	str	r2, [sp, #36]	@ 0x24
 8007284:	f89a 3000 	ldrb.w	r3, [sl]
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 809f 	beq.w	80073cc <_vfiprintf_r+0x1ec>
 800728e:	2300      	movs	r3, #0
 8007290:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007298:	f10a 0a01 	add.w	sl, sl, #1
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	9307      	str	r3, [sp, #28]
 80072a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80072a6:	4654      	mov	r4, sl
 80072a8:	2205      	movs	r2, #5
 80072aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ae:	4853      	ldr	r0, [pc, #332]	@ (80073fc <_vfiprintf_r+0x21c>)
 80072b0:	f7f8 ff8e 	bl	80001d0 <memchr>
 80072b4:	9a04      	ldr	r2, [sp, #16]
 80072b6:	b9d8      	cbnz	r0, 80072f0 <_vfiprintf_r+0x110>
 80072b8:	06d1      	lsls	r1, r2, #27
 80072ba:	bf44      	itt	mi
 80072bc:	2320      	movmi	r3, #32
 80072be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072c2:	0713      	lsls	r3, r2, #28
 80072c4:	bf44      	itt	mi
 80072c6:	232b      	movmi	r3, #43	@ 0x2b
 80072c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072cc:	f89a 3000 	ldrb.w	r3, [sl]
 80072d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80072d2:	d015      	beq.n	8007300 <_vfiprintf_r+0x120>
 80072d4:	9a07      	ldr	r2, [sp, #28]
 80072d6:	4654      	mov	r4, sl
 80072d8:	2000      	movs	r0, #0
 80072da:	f04f 0c0a 	mov.w	ip, #10
 80072de:	4621      	mov	r1, r4
 80072e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072e4:	3b30      	subs	r3, #48	@ 0x30
 80072e6:	2b09      	cmp	r3, #9
 80072e8:	d94b      	bls.n	8007382 <_vfiprintf_r+0x1a2>
 80072ea:	b1b0      	cbz	r0, 800731a <_vfiprintf_r+0x13a>
 80072ec:	9207      	str	r2, [sp, #28]
 80072ee:	e014      	b.n	800731a <_vfiprintf_r+0x13a>
 80072f0:	eba0 0308 	sub.w	r3, r0, r8
 80072f4:	fa09 f303 	lsl.w	r3, r9, r3
 80072f8:	4313      	orrs	r3, r2
 80072fa:	9304      	str	r3, [sp, #16]
 80072fc:	46a2      	mov	sl, r4
 80072fe:	e7d2      	b.n	80072a6 <_vfiprintf_r+0xc6>
 8007300:	9b03      	ldr	r3, [sp, #12]
 8007302:	1d19      	adds	r1, r3, #4
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	9103      	str	r1, [sp, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	bfbb      	ittet	lt
 800730c:	425b      	neglt	r3, r3
 800730e:	f042 0202 	orrlt.w	r2, r2, #2
 8007312:	9307      	strge	r3, [sp, #28]
 8007314:	9307      	strlt	r3, [sp, #28]
 8007316:	bfb8      	it	lt
 8007318:	9204      	strlt	r2, [sp, #16]
 800731a:	7823      	ldrb	r3, [r4, #0]
 800731c:	2b2e      	cmp	r3, #46	@ 0x2e
 800731e:	d10a      	bne.n	8007336 <_vfiprintf_r+0x156>
 8007320:	7863      	ldrb	r3, [r4, #1]
 8007322:	2b2a      	cmp	r3, #42	@ 0x2a
 8007324:	d132      	bne.n	800738c <_vfiprintf_r+0x1ac>
 8007326:	9b03      	ldr	r3, [sp, #12]
 8007328:	1d1a      	adds	r2, r3, #4
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	9203      	str	r2, [sp, #12]
 800732e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007332:	3402      	adds	r4, #2
 8007334:	9305      	str	r3, [sp, #20]
 8007336:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800740c <_vfiprintf_r+0x22c>
 800733a:	7821      	ldrb	r1, [r4, #0]
 800733c:	2203      	movs	r2, #3
 800733e:	4650      	mov	r0, sl
 8007340:	f7f8 ff46 	bl	80001d0 <memchr>
 8007344:	b138      	cbz	r0, 8007356 <_vfiprintf_r+0x176>
 8007346:	9b04      	ldr	r3, [sp, #16]
 8007348:	eba0 000a 	sub.w	r0, r0, sl
 800734c:	2240      	movs	r2, #64	@ 0x40
 800734e:	4082      	lsls	r2, r0
 8007350:	4313      	orrs	r3, r2
 8007352:	3401      	adds	r4, #1
 8007354:	9304      	str	r3, [sp, #16]
 8007356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800735a:	4829      	ldr	r0, [pc, #164]	@ (8007400 <_vfiprintf_r+0x220>)
 800735c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007360:	2206      	movs	r2, #6
 8007362:	f7f8 ff35 	bl	80001d0 <memchr>
 8007366:	2800      	cmp	r0, #0
 8007368:	d03f      	beq.n	80073ea <_vfiprintf_r+0x20a>
 800736a:	4b26      	ldr	r3, [pc, #152]	@ (8007404 <_vfiprintf_r+0x224>)
 800736c:	bb1b      	cbnz	r3, 80073b6 <_vfiprintf_r+0x1d6>
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	3307      	adds	r3, #7
 8007372:	f023 0307 	bic.w	r3, r3, #7
 8007376:	3308      	adds	r3, #8
 8007378:	9303      	str	r3, [sp, #12]
 800737a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800737c:	443b      	add	r3, r7
 800737e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007380:	e76a      	b.n	8007258 <_vfiprintf_r+0x78>
 8007382:	fb0c 3202 	mla	r2, ip, r2, r3
 8007386:	460c      	mov	r4, r1
 8007388:	2001      	movs	r0, #1
 800738a:	e7a8      	b.n	80072de <_vfiprintf_r+0xfe>
 800738c:	2300      	movs	r3, #0
 800738e:	3401      	adds	r4, #1
 8007390:	9305      	str	r3, [sp, #20]
 8007392:	4619      	mov	r1, r3
 8007394:	f04f 0c0a 	mov.w	ip, #10
 8007398:	4620      	mov	r0, r4
 800739a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800739e:	3a30      	subs	r2, #48	@ 0x30
 80073a0:	2a09      	cmp	r2, #9
 80073a2:	d903      	bls.n	80073ac <_vfiprintf_r+0x1cc>
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0c6      	beq.n	8007336 <_vfiprintf_r+0x156>
 80073a8:	9105      	str	r1, [sp, #20]
 80073aa:	e7c4      	b.n	8007336 <_vfiprintf_r+0x156>
 80073ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80073b0:	4604      	mov	r4, r0
 80073b2:	2301      	movs	r3, #1
 80073b4:	e7f0      	b.n	8007398 <_vfiprintf_r+0x1b8>
 80073b6:	ab03      	add	r3, sp, #12
 80073b8:	9300      	str	r3, [sp, #0]
 80073ba:	462a      	mov	r2, r5
 80073bc:	4b12      	ldr	r3, [pc, #72]	@ (8007408 <_vfiprintf_r+0x228>)
 80073be:	a904      	add	r1, sp, #16
 80073c0:	4630      	mov	r0, r6
 80073c2:	f3af 8000 	nop.w
 80073c6:	4607      	mov	r7, r0
 80073c8:	1c78      	adds	r0, r7, #1
 80073ca:	d1d6      	bne.n	800737a <_vfiprintf_r+0x19a>
 80073cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073ce:	07d9      	lsls	r1, r3, #31
 80073d0:	d405      	bmi.n	80073de <_vfiprintf_r+0x1fe>
 80073d2:	89ab      	ldrh	r3, [r5, #12]
 80073d4:	059a      	lsls	r2, r3, #22
 80073d6:	d402      	bmi.n	80073de <_vfiprintf_r+0x1fe>
 80073d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073da:	f7ff fda9 	bl	8006f30 <__retarget_lock_release_recursive>
 80073de:	89ab      	ldrh	r3, [r5, #12]
 80073e0:	065b      	lsls	r3, r3, #25
 80073e2:	f53f af1f 	bmi.w	8007224 <_vfiprintf_r+0x44>
 80073e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073e8:	e71e      	b.n	8007228 <_vfiprintf_r+0x48>
 80073ea:	ab03      	add	r3, sp, #12
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	462a      	mov	r2, r5
 80073f0:	4b05      	ldr	r3, [pc, #20]	@ (8007408 <_vfiprintf_r+0x228>)
 80073f2:	a904      	add	r1, sp, #16
 80073f4:	4630      	mov	r0, r6
 80073f6:	f000 f879 	bl	80074ec <_printf_i>
 80073fa:	e7e4      	b.n	80073c6 <_vfiprintf_r+0x1e6>
 80073fc:	08008b23 	.word	0x08008b23
 8007400:	08008b2d 	.word	0x08008b2d
 8007404:	00000000 	.word	0x00000000
 8007408:	080071bd 	.word	0x080071bd
 800740c:	08008b29 	.word	0x08008b29

08007410 <_printf_common>:
 8007410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007414:	4616      	mov	r6, r2
 8007416:	4698      	mov	r8, r3
 8007418:	688a      	ldr	r2, [r1, #8]
 800741a:	690b      	ldr	r3, [r1, #16]
 800741c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007420:	4293      	cmp	r3, r2
 8007422:	bfb8      	it	lt
 8007424:	4613      	movlt	r3, r2
 8007426:	6033      	str	r3, [r6, #0]
 8007428:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800742c:	4607      	mov	r7, r0
 800742e:	460c      	mov	r4, r1
 8007430:	b10a      	cbz	r2, 8007436 <_printf_common+0x26>
 8007432:	3301      	adds	r3, #1
 8007434:	6033      	str	r3, [r6, #0]
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	0699      	lsls	r1, r3, #26
 800743a:	bf42      	ittt	mi
 800743c:	6833      	ldrmi	r3, [r6, #0]
 800743e:	3302      	addmi	r3, #2
 8007440:	6033      	strmi	r3, [r6, #0]
 8007442:	6825      	ldr	r5, [r4, #0]
 8007444:	f015 0506 	ands.w	r5, r5, #6
 8007448:	d106      	bne.n	8007458 <_printf_common+0x48>
 800744a:	f104 0a19 	add.w	sl, r4, #25
 800744e:	68e3      	ldr	r3, [r4, #12]
 8007450:	6832      	ldr	r2, [r6, #0]
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	42ab      	cmp	r3, r5
 8007456:	dc26      	bgt.n	80074a6 <_printf_common+0x96>
 8007458:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	3b00      	subs	r3, #0
 8007460:	bf18      	it	ne
 8007462:	2301      	movne	r3, #1
 8007464:	0692      	lsls	r2, r2, #26
 8007466:	d42b      	bmi.n	80074c0 <_printf_common+0xb0>
 8007468:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800746c:	4641      	mov	r1, r8
 800746e:	4638      	mov	r0, r7
 8007470:	47c8      	blx	r9
 8007472:	3001      	adds	r0, #1
 8007474:	d01e      	beq.n	80074b4 <_printf_common+0xa4>
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	6922      	ldr	r2, [r4, #16]
 800747a:	f003 0306 	and.w	r3, r3, #6
 800747e:	2b04      	cmp	r3, #4
 8007480:	bf02      	ittt	eq
 8007482:	68e5      	ldreq	r5, [r4, #12]
 8007484:	6833      	ldreq	r3, [r6, #0]
 8007486:	1aed      	subeq	r5, r5, r3
 8007488:	68a3      	ldr	r3, [r4, #8]
 800748a:	bf0c      	ite	eq
 800748c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007490:	2500      	movne	r5, #0
 8007492:	4293      	cmp	r3, r2
 8007494:	bfc4      	itt	gt
 8007496:	1a9b      	subgt	r3, r3, r2
 8007498:	18ed      	addgt	r5, r5, r3
 800749a:	2600      	movs	r6, #0
 800749c:	341a      	adds	r4, #26
 800749e:	42b5      	cmp	r5, r6
 80074a0:	d11a      	bne.n	80074d8 <_printf_common+0xc8>
 80074a2:	2000      	movs	r0, #0
 80074a4:	e008      	b.n	80074b8 <_printf_common+0xa8>
 80074a6:	2301      	movs	r3, #1
 80074a8:	4652      	mov	r2, sl
 80074aa:	4641      	mov	r1, r8
 80074ac:	4638      	mov	r0, r7
 80074ae:	47c8      	blx	r9
 80074b0:	3001      	adds	r0, #1
 80074b2:	d103      	bne.n	80074bc <_printf_common+0xac>
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074bc:	3501      	adds	r5, #1
 80074be:	e7c6      	b.n	800744e <_printf_common+0x3e>
 80074c0:	18e1      	adds	r1, r4, r3
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	2030      	movs	r0, #48	@ 0x30
 80074c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074ca:	4422      	add	r2, r4
 80074cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074d4:	3302      	adds	r3, #2
 80074d6:	e7c7      	b.n	8007468 <_printf_common+0x58>
 80074d8:	2301      	movs	r3, #1
 80074da:	4622      	mov	r2, r4
 80074dc:	4641      	mov	r1, r8
 80074de:	4638      	mov	r0, r7
 80074e0:	47c8      	blx	r9
 80074e2:	3001      	adds	r0, #1
 80074e4:	d0e6      	beq.n	80074b4 <_printf_common+0xa4>
 80074e6:	3601      	adds	r6, #1
 80074e8:	e7d9      	b.n	800749e <_printf_common+0x8e>
	...

080074ec <_printf_i>:
 80074ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f0:	7e0f      	ldrb	r7, [r1, #24]
 80074f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074f4:	2f78      	cmp	r7, #120	@ 0x78
 80074f6:	4691      	mov	r9, r2
 80074f8:	4680      	mov	r8, r0
 80074fa:	460c      	mov	r4, r1
 80074fc:	469a      	mov	sl, r3
 80074fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007502:	d807      	bhi.n	8007514 <_printf_i+0x28>
 8007504:	2f62      	cmp	r7, #98	@ 0x62
 8007506:	d80a      	bhi.n	800751e <_printf_i+0x32>
 8007508:	2f00      	cmp	r7, #0
 800750a:	f000 80d2 	beq.w	80076b2 <_printf_i+0x1c6>
 800750e:	2f58      	cmp	r7, #88	@ 0x58
 8007510:	f000 80b9 	beq.w	8007686 <_printf_i+0x19a>
 8007514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007518:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800751c:	e03a      	b.n	8007594 <_printf_i+0xa8>
 800751e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007522:	2b15      	cmp	r3, #21
 8007524:	d8f6      	bhi.n	8007514 <_printf_i+0x28>
 8007526:	a101      	add	r1, pc, #4	@ (adr r1, 800752c <_printf_i+0x40>)
 8007528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800752c:	08007585 	.word	0x08007585
 8007530:	08007599 	.word	0x08007599
 8007534:	08007515 	.word	0x08007515
 8007538:	08007515 	.word	0x08007515
 800753c:	08007515 	.word	0x08007515
 8007540:	08007515 	.word	0x08007515
 8007544:	08007599 	.word	0x08007599
 8007548:	08007515 	.word	0x08007515
 800754c:	08007515 	.word	0x08007515
 8007550:	08007515 	.word	0x08007515
 8007554:	08007515 	.word	0x08007515
 8007558:	08007699 	.word	0x08007699
 800755c:	080075c3 	.word	0x080075c3
 8007560:	08007653 	.word	0x08007653
 8007564:	08007515 	.word	0x08007515
 8007568:	08007515 	.word	0x08007515
 800756c:	080076bb 	.word	0x080076bb
 8007570:	08007515 	.word	0x08007515
 8007574:	080075c3 	.word	0x080075c3
 8007578:	08007515 	.word	0x08007515
 800757c:	08007515 	.word	0x08007515
 8007580:	0800765b 	.word	0x0800765b
 8007584:	6833      	ldr	r3, [r6, #0]
 8007586:	1d1a      	adds	r2, r3, #4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6032      	str	r2, [r6, #0]
 800758c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007590:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007594:	2301      	movs	r3, #1
 8007596:	e09d      	b.n	80076d4 <_printf_i+0x1e8>
 8007598:	6833      	ldr	r3, [r6, #0]
 800759a:	6820      	ldr	r0, [r4, #0]
 800759c:	1d19      	adds	r1, r3, #4
 800759e:	6031      	str	r1, [r6, #0]
 80075a0:	0606      	lsls	r6, r0, #24
 80075a2:	d501      	bpl.n	80075a8 <_printf_i+0xbc>
 80075a4:	681d      	ldr	r5, [r3, #0]
 80075a6:	e003      	b.n	80075b0 <_printf_i+0xc4>
 80075a8:	0645      	lsls	r5, r0, #25
 80075aa:	d5fb      	bpl.n	80075a4 <_printf_i+0xb8>
 80075ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075b0:	2d00      	cmp	r5, #0
 80075b2:	da03      	bge.n	80075bc <_printf_i+0xd0>
 80075b4:	232d      	movs	r3, #45	@ 0x2d
 80075b6:	426d      	negs	r5, r5
 80075b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075bc:	4859      	ldr	r0, [pc, #356]	@ (8007724 <_printf_i+0x238>)
 80075be:	230a      	movs	r3, #10
 80075c0:	e011      	b.n	80075e6 <_printf_i+0xfa>
 80075c2:	6821      	ldr	r1, [r4, #0]
 80075c4:	6833      	ldr	r3, [r6, #0]
 80075c6:	0608      	lsls	r0, r1, #24
 80075c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80075cc:	d402      	bmi.n	80075d4 <_printf_i+0xe8>
 80075ce:	0649      	lsls	r1, r1, #25
 80075d0:	bf48      	it	mi
 80075d2:	b2ad      	uxthmi	r5, r5
 80075d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80075d6:	4853      	ldr	r0, [pc, #332]	@ (8007724 <_printf_i+0x238>)
 80075d8:	6033      	str	r3, [r6, #0]
 80075da:	bf14      	ite	ne
 80075dc:	230a      	movne	r3, #10
 80075de:	2308      	moveq	r3, #8
 80075e0:	2100      	movs	r1, #0
 80075e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075e6:	6866      	ldr	r6, [r4, #4]
 80075e8:	60a6      	str	r6, [r4, #8]
 80075ea:	2e00      	cmp	r6, #0
 80075ec:	bfa2      	ittt	ge
 80075ee:	6821      	ldrge	r1, [r4, #0]
 80075f0:	f021 0104 	bicge.w	r1, r1, #4
 80075f4:	6021      	strge	r1, [r4, #0]
 80075f6:	b90d      	cbnz	r5, 80075fc <_printf_i+0x110>
 80075f8:	2e00      	cmp	r6, #0
 80075fa:	d04b      	beq.n	8007694 <_printf_i+0x1a8>
 80075fc:	4616      	mov	r6, r2
 80075fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007602:	fb03 5711 	mls	r7, r3, r1, r5
 8007606:	5dc7      	ldrb	r7, [r0, r7]
 8007608:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800760c:	462f      	mov	r7, r5
 800760e:	42bb      	cmp	r3, r7
 8007610:	460d      	mov	r5, r1
 8007612:	d9f4      	bls.n	80075fe <_printf_i+0x112>
 8007614:	2b08      	cmp	r3, #8
 8007616:	d10b      	bne.n	8007630 <_printf_i+0x144>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	07df      	lsls	r7, r3, #31
 800761c:	d508      	bpl.n	8007630 <_printf_i+0x144>
 800761e:	6923      	ldr	r3, [r4, #16]
 8007620:	6861      	ldr	r1, [r4, #4]
 8007622:	4299      	cmp	r1, r3
 8007624:	bfde      	ittt	le
 8007626:	2330      	movle	r3, #48	@ 0x30
 8007628:	f806 3c01 	strble.w	r3, [r6, #-1]
 800762c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007630:	1b92      	subs	r2, r2, r6
 8007632:	6122      	str	r2, [r4, #16]
 8007634:	f8cd a000 	str.w	sl, [sp]
 8007638:	464b      	mov	r3, r9
 800763a:	aa03      	add	r2, sp, #12
 800763c:	4621      	mov	r1, r4
 800763e:	4640      	mov	r0, r8
 8007640:	f7ff fee6 	bl	8007410 <_printf_common>
 8007644:	3001      	adds	r0, #1
 8007646:	d14a      	bne.n	80076de <_printf_i+0x1f2>
 8007648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800764c:	b004      	add	sp, #16
 800764e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	f043 0320 	orr.w	r3, r3, #32
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	4833      	ldr	r0, [pc, #204]	@ (8007728 <_printf_i+0x23c>)
 800765c:	2778      	movs	r7, #120	@ 0x78
 800765e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	6831      	ldr	r1, [r6, #0]
 8007666:	061f      	lsls	r7, r3, #24
 8007668:	f851 5b04 	ldr.w	r5, [r1], #4
 800766c:	d402      	bmi.n	8007674 <_printf_i+0x188>
 800766e:	065f      	lsls	r7, r3, #25
 8007670:	bf48      	it	mi
 8007672:	b2ad      	uxthmi	r5, r5
 8007674:	6031      	str	r1, [r6, #0]
 8007676:	07d9      	lsls	r1, r3, #31
 8007678:	bf44      	itt	mi
 800767a:	f043 0320 	orrmi.w	r3, r3, #32
 800767e:	6023      	strmi	r3, [r4, #0]
 8007680:	b11d      	cbz	r5, 800768a <_printf_i+0x19e>
 8007682:	2310      	movs	r3, #16
 8007684:	e7ac      	b.n	80075e0 <_printf_i+0xf4>
 8007686:	4827      	ldr	r0, [pc, #156]	@ (8007724 <_printf_i+0x238>)
 8007688:	e7e9      	b.n	800765e <_printf_i+0x172>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	f023 0320 	bic.w	r3, r3, #32
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	e7f6      	b.n	8007682 <_printf_i+0x196>
 8007694:	4616      	mov	r6, r2
 8007696:	e7bd      	b.n	8007614 <_printf_i+0x128>
 8007698:	6833      	ldr	r3, [r6, #0]
 800769a:	6825      	ldr	r5, [r4, #0]
 800769c:	6961      	ldr	r1, [r4, #20]
 800769e:	1d18      	adds	r0, r3, #4
 80076a0:	6030      	str	r0, [r6, #0]
 80076a2:	062e      	lsls	r6, r5, #24
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	d501      	bpl.n	80076ac <_printf_i+0x1c0>
 80076a8:	6019      	str	r1, [r3, #0]
 80076aa:	e002      	b.n	80076b2 <_printf_i+0x1c6>
 80076ac:	0668      	lsls	r0, r5, #25
 80076ae:	d5fb      	bpl.n	80076a8 <_printf_i+0x1bc>
 80076b0:	8019      	strh	r1, [r3, #0]
 80076b2:	2300      	movs	r3, #0
 80076b4:	6123      	str	r3, [r4, #16]
 80076b6:	4616      	mov	r6, r2
 80076b8:	e7bc      	b.n	8007634 <_printf_i+0x148>
 80076ba:	6833      	ldr	r3, [r6, #0]
 80076bc:	1d1a      	adds	r2, r3, #4
 80076be:	6032      	str	r2, [r6, #0]
 80076c0:	681e      	ldr	r6, [r3, #0]
 80076c2:	6862      	ldr	r2, [r4, #4]
 80076c4:	2100      	movs	r1, #0
 80076c6:	4630      	mov	r0, r6
 80076c8:	f7f8 fd82 	bl	80001d0 <memchr>
 80076cc:	b108      	cbz	r0, 80076d2 <_printf_i+0x1e6>
 80076ce:	1b80      	subs	r0, r0, r6
 80076d0:	6060      	str	r0, [r4, #4]
 80076d2:	6863      	ldr	r3, [r4, #4]
 80076d4:	6123      	str	r3, [r4, #16]
 80076d6:	2300      	movs	r3, #0
 80076d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076dc:	e7aa      	b.n	8007634 <_printf_i+0x148>
 80076de:	6923      	ldr	r3, [r4, #16]
 80076e0:	4632      	mov	r2, r6
 80076e2:	4649      	mov	r1, r9
 80076e4:	4640      	mov	r0, r8
 80076e6:	47d0      	blx	sl
 80076e8:	3001      	adds	r0, #1
 80076ea:	d0ad      	beq.n	8007648 <_printf_i+0x15c>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	079b      	lsls	r3, r3, #30
 80076f0:	d413      	bmi.n	800771a <_printf_i+0x22e>
 80076f2:	68e0      	ldr	r0, [r4, #12]
 80076f4:	9b03      	ldr	r3, [sp, #12]
 80076f6:	4298      	cmp	r0, r3
 80076f8:	bfb8      	it	lt
 80076fa:	4618      	movlt	r0, r3
 80076fc:	e7a6      	b.n	800764c <_printf_i+0x160>
 80076fe:	2301      	movs	r3, #1
 8007700:	4632      	mov	r2, r6
 8007702:	4649      	mov	r1, r9
 8007704:	4640      	mov	r0, r8
 8007706:	47d0      	blx	sl
 8007708:	3001      	adds	r0, #1
 800770a:	d09d      	beq.n	8007648 <_printf_i+0x15c>
 800770c:	3501      	adds	r5, #1
 800770e:	68e3      	ldr	r3, [r4, #12]
 8007710:	9903      	ldr	r1, [sp, #12]
 8007712:	1a5b      	subs	r3, r3, r1
 8007714:	42ab      	cmp	r3, r5
 8007716:	dcf2      	bgt.n	80076fe <_printf_i+0x212>
 8007718:	e7eb      	b.n	80076f2 <_printf_i+0x206>
 800771a:	2500      	movs	r5, #0
 800771c:	f104 0619 	add.w	r6, r4, #25
 8007720:	e7f5      	b.n	800770e <_printf_i+0x222>
 8007722:	bf00      	nop
 8007724:	08008b34 	.word	0x08008b34
 8007728:	08008b45 	.word	0x08008b45

0800772c <__swbuf_r>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	460e      	mov	r6, r1
 8007730:	4614      	mov	r4, r2
 8007732:	4605      	mov	r5, r0
 8007734:	b118      	cbz	r0, 800773e <__swbuf_r+0x12>
 8007736:	6a03      	ldr	r3, [r0, #32]
 8007738:	b90b      	cbnz	r3, 800773e <__swbuf_r+0x12>
 800773a:	f7ff faf5 	bl	8006d28 <__sinit>
 800773e:	69a3      	ldr	r3, [r4, #24]
 8007740:	60a3      	str	r3, [r4, #8]
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	071a      	lsls	r2, r3, #28
 8007746:	d501      	bpl.n	800774c <__swbuf_r+0x20>
 8007748:	6923      	ldr	r3, [r4, #16]
 800774a:	b943      	cbnz	r3, 800775e <__swbuf_r+0x32>
 800774c:	4621      	mov	r1, r4
 800774e:	4628      	mov	r0, r5
 8007750:	f000 f82a 	bl	80077a8 <__swsetup_r>
 8007754:	b118      	cbz	r0, 800775e <__swbuf_r+0x32>
 8007756:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800775a:	4638      	mov	r0, r7
 800775c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	6922      	ldr	r2, [r4, #16]
 8007762:	1a98      	subs	r0, r3, r2
 8007764:	6963      	ldr	r3, [r4, #20]
 8007766:	b2f6      	uxtb	r6, r6
 8007768:	4283      	cmp	r3, r0
 800776a:	4637      	mov	r7, r6
 800776c:	dc05      	bgt.n	800777a <__swbuf_r+0x4e>
 800776e:	4621      	mov	r1, r4
 8007770:	4628      	mov	r0, r5
 8007772:	f7ff fccb 	bl	800710c <_fflush_r>
 8007776:	2800      	cmp	r0, #0
 8007778:	d1ed      	bne.n	8007756 <__swbuf_r+0x2a>
 800777a:	68a3      	ldr	r3, [r4, #8]
 800777c:	3b01      	subs	r3, #1
 800777e:	60a3      	str	r3, [r4, #8]
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	6022      	str	r2, [r4, #0]
 8007786:	701e      	strb	r6, [r3, #0]
 8007788:	6962      	ldr	r2, [r4, #20]
 800778a:	1c43      	adds	r3, r0, #1
 800778c:	429a      	cmp	r2, r3
 800778e:	d004      	beq.n	800779a <__swbuf_r+0x6e>
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	07db      	lsls	r3, r3, #31
 8007794:	d5e1      	bpl.n	800775a <__swbuf_r+0x2e>
 8007796:	2e0a      	cmp	r6, #10
 8007798:	d1df      	bne.n	800775a <__swbuf_r+0x2e>
 800779a:	4621      	mov	r1, r4
 800779c:	4628      	mov	r0, r5
 800779e:	f7ff fcb5 	bl	800710c <_fflush_r>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d0d9      	beq.n	800775a <__swbuf_r+0x2e>
 80077a6:	e7d6      	b.n	8007756 <__swbuf_r+0x2a>

080077a8 <__swsetup_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4b29      	ldr	r3, [pc, #164]	@ (8007850 <__swsetup_r+0xa8>)
 80077ac:	4605      	mov	r5, r0
 80077ae:	6818      	ldr	r0, [r3, #0]
 80077b0:	460c      	mov	r4, r1
 80077b2:	b118      	cbz	r0, 80077bc <__swsetup_r+0x14>
 80077b4:	6a03      	ldr	r3, [r0, #32]
 80077b6:	b90b      	cbnz	r3, 80077bc <__swsetup_r+0x14>
 80077b8:	f7ff fab6 	bl	8006d28 <__sinit>
 80077bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077c0:	0719      	lsls	r1, r3, #28
 80077c2:	d422      	bmi.n	800780a <__swsetup_r+0x62>
 80077c4:	06da      	lsls	r2, r3, #27
 80077c6:	d407      	bmi.n	80077d8 <__swsetup_r+0x30>
 80077c8:	2209      	movs	r2, #9
 80077ca:	602a      	str	r2, [r5, #0]
 80077cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077d0:	81a3      	strh	r3, [r4, #12]
 80077d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077d6:	e033      	b.n	8007840 <__swsetup_r+0x98>
 80077d8:	0758      	lsls	r0, r3, #29
 80077da:	d512      	bpl.n	8007802 <__swsetup_r+0x5a>
 80077dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077de:	b141      	cbz	r1, 80077f2 <__swsetup_r+0x4a>
 80077e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077e4:	4299      	cmp	r1, r3
 80077e6:	d002      	beq.n	80077ee <__swsetup_r+0x46>
 80077e8:	4628      	mov	r0, r5
 80077ea:	f7ff fbc1 	bl	8006f70 <_free_r>
 80077ee:	2300      	movs	r3, #0
 80077f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80077f2:	89a3      	ldrh	r3, [r4, #12]
 80077f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077f8:	81a3      	strh	r3, [r4, #12]
 80077fa:	2300      	movs	r3, #0
 80077fc:	6063      	str	r3, [r4, #4]
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	89a3      	ldrh	r3, [r4, #12]
 8007804:	f043 0308 	orr.w	r3, r3, #8
 8007808:	81a3      	strh	r3, [r4, #12]
 800780a:	6923      	ldr	r3, [r4, #16]
 800780c:	b94b      	cbnz	r3, 8007822 <__swsetup_r+0x7a>
 800780e:	89a3      	ldrh	r3, [r4, #12]
 8007810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007818:	d003      	beq.n	8007822 <__swsetup_r+0x7a>
 800781a:	4621      	mov	r1, r4
 800781c:	4628      	mov	r0, r5
 800781e:	f000 f883 	bl	8007928 <__smakebuf_r>
 8007822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007826:	f013 0201 	ands.w	r2, r3, #1
 800782a:	d00a      	beq.n	8007842 <__swsetup_r+0x9a>
 800782c:	2200      	movs	r2, #0
 800782e:	60a2      	str	r2, [r4, #8]
 8007830:	6962      	ldr	r2, [r4, #20]
 8007832:	4252      	negs	r2, r2
 8007834:	61a2      	str	r2, [r4, #24]
 8007836:	6922      	ldr	r2, [r4, #16]
 8007838:	b942      	cbnz	r2, 800784c <__swsetup_r+0xa4>
 800783a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800783e:	d1c5      	bne.n	80077cc <__swsetup_r+0x24>
 8007840:	bd38      	pop	{r3, r4, r5, pc}
 8007842:	0799      	lsls	r1, r3, #30
 8007844:	bf58      	it	pl
 8007846:	6962      	ldrpl	r2, [r4, #20]
 8007848:	60a2      	str	r2, [r4, #8]
 800784a:	e7f4      	b.n	8007836 <__swsetup_r+0x8e>
 800784c:	2000      	movs	r0, #0
 800784e:	e7f7      	b.n	8007840 <__swsetup_r+0x98>
 8007850:	20000018 	.word	0x20000018

08007854 <_raise_r>:
 8007854:	291f      	cmp	r1, #31
 8007856:	b538      	push	{r3, r4, r5, lr}
 8007858:	4605      	mov	r5, r0
 800785a:	460c      	mov	r4, r1
 800785c:	d904      	bls.n	8007868 <_raise_r+0x14>
 800785e:	2316      	movs	r3, #22
 8007860:	6003      	str	r3, [r0, #0]
 8007862:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007866:	bd38      	pop	{r3, r4, r5, pc}
 8007868:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800786a:	b112      	cbz	r2, 8007872 <_raise_r+0x1e>
 800786c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007870:	b94b      	cbnz	r3, 8007886 <_raise_r+0x32>
 8007872:	4628      	mov	r0, r5
 8007874:	f000 f830 	bl	80078d8 <_getpid_r>
 8007878:	4622      	mov	r2, r4
 800787a:	4601      	mov	r1, r0
 800787c:	4628      	mov	r0, r5
 800787e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007882:	f000 b817 	b.w	80078b4 <_kill_r>
 8007886:	2b01      	cmp	r3, #1
 8007888:	d00a      	beq.n	80078a0 <_raise_r+0x4c>
 800788a:	1c59      	adds	r1, r3, #1
 800788c:	d103      	bne.n	8007896 <_raise_r+0x42>
 800788e:	2316      	movs	r3, #22
 8007890:	6003      	str	r3, [r0, #0]
 8007892:	2001      	movs	r0, #1
 8007894:	e7e7      	b.n	8007866 <_raise_r+0x12>
 8007896:	2100      	movs	r1, #0
 8007898:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800789c:	4620      	mov	r0, r4
 800789e:	4798      	blx	r3
 80078a0:	2000      	movs	r0, #0
 80078a2:	e7e0      	b.n	8007866 <_raise_r+0x12>

080078a4 <raise>:
 80078a4:	4b02      	ldr	r3, [pc, #8]	@ (80078b0 <raise+0xc>)
 80078a6:	4601      	mov	r1, r0
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	f7ff bfd3 	b.w	8007854 <_raise_r>
 80078ae:	bf00      	nop
 80078b0:	20000018 	.word	0x20000018

080078b4 <_kill_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	4d07      	ldr	r5, [pc, #28]	@ (80078d4 <_kill_r+0x20>)
 80078b8:	2300      	movs	r3, #0
 80078ba:	4604      	mov	r4, r0
 80078bc:	4608      	mov	r0, r1
 80078be:	4611      	mov	r1, r2
 80078c0:	602b      	str	r3, [r5, #0]
 80078c2:	f7fa f8c3 	bl	8001a4c <_kill>
 80078c6:	1c43      	adds	r3, r0, #1
 80078c8:	d102      	bne.n	80078d0 <_kill_r+0x1c>
 80078ca:	682b      	ldr	r3, [r5, #0]
 80078cc:	b103      	cbz	r3, 80078d0 <_kill_r+0x1c>
 80078ce:	6023      	str	r3, [r4, #0]
 80078d0:	bd38      	pop	{r3, r4, r5, pc}
 80078d2:	bf00      	nop
 80078d4:	200007f8 	.word	0x200007f8

080078d8 <_getpid_r>:
 80078d8:	f7fa b8b0 	b.w	8001a3c <_getpid>

080078dc <__swhatbuf_r>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	460c      	mov	r4, r1
 80078e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e4:	2900      	cmp	r1, #0
 80078e6:	b096      	sub	sp, #88	@ 0x58
 80078e8:	4615      	mov	r5, r2
 80078ea:	461e      	mov	r6, r3
 80078ec:	da0d      	bge.n	800790a <__swhatbuf_r+0x2e>
 80078ee:	89a3      	ldrh	r3, [r4, #12]
 80078f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078f4:	f04f 0100 	mov.w	r1, #0
 80078f8:	bf14      	ite	ne
 80078fa:	2340      	movne	r3, #64	@ 0x40
 80078fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007900:	2000      	movs	r0, #0
 8007902:	6031      	str	r1, [r6, #0]
 8007904:	602b      	str	r3, [r5, #0]
 8007906:	b016      	add	sp, #88	@ 0x58
 8007908:	bd70      	pop	{r4, r5, r6, pc}
 800790a:	466a      	mov	r2, sp
 800790c:	f000 f848 	bl	80079a0 <_fstat_r>
 8007910:	2800      	cmp	r0, #0
 8007912:	dbec      	blt.n	80078ee <__swhatbuf_r+0x12>
 8007914:	9901      	ldr	r1, [sp, #4]
 8007916:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800791a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800791e:	4259      	negs	r1, r3
 8007920:	4159      	adcs	r1, r3
 8007922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007926:	e7eb      	b.n	8007900 <__swhatbuf_r+0x24>

08007928 <__smakebuf_r>:
 8007928:	898b      	ldrh	r3, [r1, #12]
 800792a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800792c:	079d      	lsls	r5, r3, #30
 800792e:	4606      	mov	r6, r0
 8007930:	460c      	mov	r4, r1
 8007932:	d507      	bpl.n	8007944 <__smakebuf_r+0x1c>
 8007934:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007938:	6023      	str	r3, [r4, #0]
 800793a:	6123      	str	r3, [r4, #16]
 800793c:	2301      	movs	r3, #1
 800793e:	6163      	str	r3, [r4, #20]
 8007940:	b003      	add	sp, #12
 8007942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007944:	ab01      	add	r3, sp, #4
 8007946:	466a      	mov	r2, sp
 8007948:	f7ff ffc8 	bl	80078dc <__swhatbuf_r>
 800794c:	9f00      	ldr	r7, [sp, #0]
 800794e:	4605      	mov	r5, r0
 8007950:	4639      	mov	r1, r7
 8007952:	4630      	mov	r0, r6
 8007954:	f7ff f892 	bl	8006a7c <_malloc_r>
 8007958:	b948      	cbnz	r0, 800796e <__smakebuf_r+0x46>
 800795a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800795e:	059a      	lsls	r2, r3, #22
 8007960:	d4ee      	bmi.n	8007940 <__smakebuf_r+0x18>
 8007962:	f023 0303 	bic.w	r3, r3, #3
 8007966:	f043 0302 	orr.w	r3, r3, #2
 800796a:	81a3      	strh	r3, [r4, #12]
 800796c:	e7e2      	b.n	8007934 <__smakebuf_r+0xc>
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	6020      	str	r0, [r4, #0]
 8007972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	9b01      	ldr	r3, [sp, #4]
 800797a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800797e:	b15b      	cbz	r3, 8007998 <__smakebuf_r+0x70>
 8007980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007984:	4630      	mov	r0, r6
 8007986:	f000 f81d 	bl	80079c4 <_isatty_r>
 800798a:	b128      	cbz	r0, 8007998 <__smakebuf_r+0x70>
 800798c:	89a3      	ldrh	r3, [r4, #12]
 800798e:	f023 0303 	bic.w	r3, r3, #3
 8007992:	f043 0301 	orr.w	r3, r3, #1
 8007996:	81a3      	strh	r3, [r4, #12]
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	431d      	orrs	r5, r3
 800799c:	81a5      	strh	r5, [r4, #12]
 800799e:	e7cf      	b.n	8007940 <__smakebuf_r+0x18>

080079a0 <_fstat_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4d07      	ldr	r5, [pc, #28]	@ (80079c0 <_fstat_r+0x20>)
 80079a4:	2300      	movs	r3, #0
 80079a6:	4604      	mov	r4, r0
 80079a8:	4608      	mov	r0, r1
 80079aa:	4611      	mov	r1, r2
 80079ac:	602b      	str	r3, [r5, #0]
 80079ae:	f7fa f8ad 	bl	8001b0c <_fstat>
 80079b2:	1c43      	adds	r3, r0, #1
 80079b4:	d102      	bne.n	80079bc <_fstat_r+0x1c>
 80079b6:	682b      	ldr	r3, [r5, #0]
 80079b8:	b103      	cbz	r3, 80079bc <_fstat_r+0x1c>
 80079ba:	6023      	str	r3, [r4, #0]
 80079bc:	bd38      	pop	{r3, r4, r5, pc}
 80079be:	bf00      	nop
 80079c0:	200007f8 	.word	0x200007f8

080079c4 <_isatty_r>:
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	4d06      	ldr	r5, [pc, #24]	@ (80079e0 <_isatty_r+0x1c>)
 80079c8:	2300      	movs	r3, #0
 80079ca:	4604      	mov	r4, r0
 80079cc:	4608      	mov	r0, r1
 80079ce:	602b      	str	r3, [r5, #0]
 80079d0:	f7fa f8ac 	bl	8001b2c <_isatty>
 80079d4:	1c43      	adds	r3, r0, #1
 80079d6:	d102      	bne.n	80079de <_isatty_r+0x1a>
 80079d8:	682b      	ldr	r3, [r5, #0]
 80079da:	b103      	cbz	r3, 80079de <_isatty_r+0x1a>
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	200007f8 	.word	0x200007f8
 80079e4:	00000000 	.word	0x00000000

080079e8 <sin>:
 80079e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079ea:	ec53 2b10 	vmov	r2, r3, d0
 80079ee:	4826      	ldr	r0, [pc, #152]	@ (8007a88 <sin+0xa0>)
 80079f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80079f4:	4281      	cmp	r1, r0
 80079f6:	d807      	bhi.n	8007a08 <sin+0x20>
 80079f8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007a80 <sin+0x98>
 80079fc:	2000      	movs	r0, #0
 80079fe:	b005      	add	sp, #20
 8007a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a04:	f000 b90c 	b.w	8007c20 <__kernel_sin>
 8007a08:	4820      	ldr	r0, [pc, #128]	@ (8007a8c <sin+0xa4>)
 8007a0a:	4281      	cmp	r1, r0
 8007a0c:	d908      	bls.n	8007a20 <sin+0x38>
 8007a0e:	4610      	mov	r0, r2
 8007a10:	4619      	mov	r1, r3
 8007a12:	f7f8 fc31 	bl	8000278 <__aeabi_dsub>
 8007a16:	ec41 0b10 	vmov	d0, r0, r1
 8007a1a:	b005      	add	sp, #20
 8007a1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a20:	4668      	mov	r0, sp
 8007a22:	f000 f9b9 	bl	8007d98 <__ieee754_rem_pio2>
 8007a26:	f000 0003 	and.w	r0, r0, #3
 8007a2a:	2801      	cmp	r0, #1
 8007a2c:	d00c      	beq.n	8007a48 <sin+0x60>
 8007a2e:	2802      	cmp	r0, #2
 8007a30:	d011      	beq.n	8007a56 <sin+0x6e>
 8007a32:	b9e8      	cbnz	r0, 8007a70 <sin+0x88>
 8007a34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a38:	ed9d 0b00 	vldr	d0, [sp]
 8007a3c:	2001      	movs	r0, #1
 8007a3e:	f000 f8ef 	bl	8007c20 <__kernel_sin>
 8007a42:	ec51 0b10 	vmov	r0, r1, d0
 8007a46:	e7e6      	b.n	8007a16 <sin+0x2e>
 8007a48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a4c:	ed9d 0b00 	vldr	d0, [sp]
 8007a50:	f000 f81e 	bl	8007a90 <__kernel_cos>
 8007a54:	e7f5      	b.n	8007a42 <sin+0x5a>
 8007a56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a5a:	ed9d 0b00 	vldr	d0, [sp]
 8007a5e:	2001      	movs	r0, #1
 8007a60:	f000 f8de 	bl	8007c20 <__kernel_sin>
 8007a64:	ec53 2b10 	vmov	r2, r3, d0
 8007a68:	4610      	mov	r0, r2
 8007a6a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007a6e:	e7d2      	b.n	8007a16 <sin+0x2e>
 8007a70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a74:	ed9d 0b00 	vldr	d0, [sp]
 8007a78:	f000 f80a 	bl	8007a90 <__kernel_cos>
 8007a7c:	e7f2      	b.n	8007a64 <sin+0x7c>
 8007a7e:	bf00      	nop
	...
 8007a88:	3fe921fb 	.word	0x3fe921fb
 8007a8c:	7fefffff 	.word	0x7fefffff

08007a90 <__kernel_cos>:
 8007a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	ec57 6b10 	vmov	r6, r7, d0
 8007a98:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007a9c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007aa0:	ed8d 1b00 	vstr	d1, [sp]
 8007aa4:	d206      	bcs.n	8007ab4 <__kernel_cos+0x24>
 8007aa6:	4630      	mov	r0, r6
 8007aa8:	4639      	mov	r1, r7
 8007aaa:	f7f9 f837 	bl	8000b1c <__aeabi_d2iz>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	f000 8088 	beq.w	8007bc4 <__kernel_cos+0x134>
 8007ab4:	4632      	mov	r2, r6
 8007ab6:	463b      	mov	r3, r7
 8007ab8:	4630      	mov	r0, r6
 8007aba:	4639      	mov	r1, r7
 8007abc:	f7f8 fd94 	bl	80005e8 <__aeabi_dmul>
 8007ac0:	4b51      	ldr	r3, [pc, #324]	@ (8007c08 <__kernel_cos+0x178>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	460d      	mov	r5, r1
 8007ac8:	f7f8 fd8e 	bl	80005e8 <__aeabi_dmul>
 8007acc:	a340      	add	r3, pc, #256	@ (adr r3, 8007bd0 <__kernel_cos+0x140>)
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	4682      	mov	sl, r0
 8007ad4:	468b      	mov	fp, r1
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	f7f8 fd85 	bl	80005e8 <__aeabi_dmul>
 8007ade:	a33e      	add	r3, pc, #248	@ (adr r3, 8007bd8 <__kernel_cos+0x148>)
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	f7f8 fbca 	bl	800027c <__adddf3>
 8007ae8:	4622      	mov	r2, r4
 8007aea:	462b      	mov	r3, r5
 8007aec:	f7f8 fd7c 	bl	80005e8 <__aeabi_dmul>
 8007af0:	a33b      	add	r3, pc, #236	@ (adr r3, 8007be0 <__kernel_cos+0x150>)
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	f7f8 fbbf 	bl	8000278 <__aeabi_dsub>
 8007afa:	4622      	mov	r2, r4
 8007afc:	462b      	mov	r3, r5
 8007afe:	f7f8 fd73 	bl	80005e8 <__aeabi_dmul>
 8007b02:	a339      	add	r3, pc, #228	@ (adr r3, 8007be8 <__kernel_cos+0x158>)
 8007b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b08:	f7f8 fbb8 	bl	800027c <__adddf3>
 8007b0c:	4622      	mov	r2, r4
 8007b0e:	462b      	mov	r3, r5
 8007b10:	f7f8 fd6a 	bl	80005e8 <__aeabi_dmul>
 8007b14:	a336      	add	r3, pc, #216	@ (adr r3, 8007bf0 <__kernel_cos+0x160>)
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	f7f8 fbad 	bl	8000278 <__aeabi_dsub>
 8007b1e:	4622      	mov	r2, r4
 8007b20:	462b      	mov	r3, r5
 8007b22:	f7f8 fd61 	bl	80005e8 <__aeabi_dmul>
 8007b26:	a334      	add	r3, pc, #208	@ (adr r3, 8007bf8 <__kernel_cos+0x168>)
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	f7f8 fba6 	bl	800027c <__adddf3>
 8007b30:	4622      	mov	r2, r4
 8007b32:	462b      	mov	r3, r5
 8007b34:	f7f8 fd58 	bl	80005e8 <__aeabi_dmul>
 8007b38:	4622      	mov	r2, r4
 8007b3a:	462b      	mov	r3, r5
 8007b3c:	f7f8 fd54 	bl	80005e8 <__aeabi_dmul>
 8007b40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b44:	4604      	mov	r4, r0
 8007b46:	460d      	mov	r5, r1
 8007b48:	4630      	mov	r0, r6
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	f7f8 fd4c 	bl	80005e8 <__aeabi_dmul>
 8007b50:	460b      	mov	r3, r1
 8007b52:	4602      	mov	r2, r0
 8007b54:	4629      	mov	r1, r5
 8007b56:	4620      	mov	r0, r4
 8007b58:	f7f8 fb8e 	bl	8000278 <__aeabi_dsub>
 8007b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8007c0c <__kernel_cos+0x17c>)
 8007b5e:	4598      	cmp	r8, r3
 8007b60:	4606      	mov	r6, r0
 8007b62:	460f      	mov	r7, r1
 8007b64:	d810      	bhi.n	8007b88 <__kernel_cos+0xf8>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	4659      	mov	r1, fp
 8007b6e:	f7f8 fb83 	bl	8000278 <__aeabi_dsub>
 8007b72:	460b      	mov	r3, r1
 8007b74:	4926      	ldr	r1, [pc, #152]	@ (8007c10 <__kernel_cos+0x180>)
 8007b76:	4602      	mov	r2, r0
 8007b78:	2000      	movs	r0, #0
 8007b7a:	f7f8 fb7d 	bl	8000278 <__aeabi_dsub>
 8007b7e:	ec41 0b10 	vmov	d0, r0, r1
 8007b82:	b003      	add	sp, #12
 8007b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b88:	4b22      	ldr	r3, [pc, #136]	@ (8007c14 <__kernel_cos+0x184>)
 8007b8a:	4921      	ldr	r1, [pc, #132]	@ (8007c10 <__kernel_cos+0x180>)
 8007b8c:	4598      	cmp	r8, r3
 8007b8e:	bf8c      	ite	hi
 8007b90:	4d21      	ldrhi	r5, [pc, #132]	@ (8007c18 <__kernel_cos+0x188>)
 8007b92:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8007b96:	2400      	movs	r4, #0
 8007b98:	4622      	mov	r2, r4
 8007b9a:	462b      	mov	r3, r5
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	f7f8 fb6b 	bl	8000278 <__aeabi_dsub>
 8007ba2:	4622      	mov	r2, r4
 8007ba4:	4680      	mov	r8, r0
 8007ba6:	4689      	mov	r9, r1
 8007ba8:	462b      	mov	r3, r5
 8007baa:	4650      	mov	r0, sl
 8007bac:	4659      	mov	r1, fp
 8007bae:	f7f8 fb63 	bl	8000278 <__aeabi_dsub>
 8007bb2:	4632      	mov	r2, r6
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	f7f8 fb5f 	bl	8000278 <__aeabi_dsub>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	e7da      	b.n	8007b7a <__kernel_cos+0xea>
 8007bc4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007c00 <__kernel_cos+0x170>
 8007bc8:	e7db      	b.n	8007b82 <__kernel_cos+0xf2>
 8007bca:	bf00      	nop
 8007bcc:	f3af 8000 	nop.w
 8007bd0:	be8838d4 	.word	0xbe8838d4
 8007bd4:	bda8fae9 	.word	0xbda8fae9
 8007bd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8007bdc:	3e21ee9e 	.word	0x3e21ee9e
 8007be0:	809c52ad 	.word	0x809c52ad
 8007be4:	3e927e4f 	.word	0x3e927e4f
 8007be8:	19cb1590 	.word	0x19cb1590
 8007bec:	3efa01a0 	.word	0x3efa01a0
 8007bf0:	16c15177 	.word	0x16c15177
 8007bf4:	3f56c16c 	.word	0x3f56c16c
 8007bf8:	5555554c 	.word	0x5555554c
 8007bfc:	3fa55555 	.word	0x3fa55555
 8007c00:	00000000 	.word	0x00000000
 8007c04:	3ff00000 	.word	0x3ff00000
 8007c08:	3fe00000 	.word	0x3fe00000
 8007c0c:	3fd33332 	.word	0x3fd33332
 8007c10:	3ff00000 	.word	0x3ff00000
 8007c14:	3fe90000 	.word	0x3fe90000
 8007c18:	3fd20000 	.word	0x3fd20000
 8007c1c:	00000000 	.word	0x00000000

08007c20 <__kernel_sin>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	ec55 4b10 	vmov	r4, r5, d0
 8007c28:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007c32:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007c36:	4680      	mov	r8, r0
 8007c38:	d205      	bcs.n	8007c46 <__kernel_sin+0x26>
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	f7f8 ff6d 	bl	8000b1c <__aeabi_d2iz>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d052      	beq.n	8007cec <__kernel_sin+0xcc>
 8007c46:	4622      	mov	r2, r4
 8007c48:	462b      	mov	r3, r5
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	f7f8 fccb 	bl	80005e8 <__aeabi_dmul>
 8007c52:	4682      	mov	sl, r0
 8007c54:	468b      	mov	fp, r1
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	4629      	mov	r1, r5
 8007c5e:	f7f8 fcc3 	bl	80005e8 <__aeabi_dmul>
 8007c62:	a342      	add	r3, pc, #264	@ (adr r3, 8007d6c <__kernel_sin+0x14c>)
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	e9cd 0100 	strd	r0, r1, [sp]
 8007c6c:	4650      	mov	r0, sl
 8007c6e:	4659      	mov	r1, fp
 8007c70:	f7f8 fcba 	bl	80005e8 <__aeabi_dmul>
 8007c74:	a33f      	add	r3, pc, #252	@ (adr r3, 8007d74 <__kernel_sin+0x154>)
 8007c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7a:	f7f8 fafd 	bl	8000278 <__aeabi_dsub>
 8007c7e:	4652      	mov	r2, sl
 8007c80:	465b      	mov	r3, fp
 8007c82:	f7f8 fcb1 	bl	80005e8 <__aeabi_dmul>
 8007c86:	a33d      	add	r3, pc, #244	@ (adr r3, 8007d7c <__kernel_sin+0x15c>)
 8007c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8c:	f7f8 faf6 	bl	800027c <__adddf3>
 8007c90:	4652      	mov	r2, sl
 8007c92:	465b      	mov	r3, fp
 8007c94:	f7f8 fca8 	bl	80005e8 <__aeabi_dmul>
 8007c98:	a33a      	add	r3, pc, #232	@ (adr r3, 8007d84 <__kernel_sin+0x164>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	f7f8 faeb 	bl	8000278 <__aeabi_dsub>
 8007ca2:	4652      	mov	r2, sl
 8007ca4:	465b      	mov	r3, fp
 8007ca6:	f7f8 fc9f 	bl	80005e8 <__aeabi_dmul>
 8007caa:	a338      	add	r3, pc, #224	@ (adr r3, 8007d8c <__kernel_sin+0x16c>)
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	f7f8 fae4 	bl	800027c <__adddf3>
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	460f      	mov	r7, r1
 8007cb8:	f1b8 0f00 	cmp.w	r8, #0
 8007cbc:	d11b      	bne.n	8007cf6 <__kernel_sin+0xd6>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4650      	mov	r0, sl
 8007cc4:	4659      	mov	r1, fp
 8007cc6:	f7f8 fc8f 	bl	80005e8 <__aeabi_dmul>
 8007cca:	a325      	add	r3, pc, #148	@ (adr r3, 8007d60 <__kernel_sin+0x140>)
 8007ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd0:	f7f8 fad2 	bl	8000278 <__aeabi_dsub>
 8007cd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cd8:	f7f8 fc86 	bl	80005e8 <__aeabi_dmul>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	4629      	mov	r1, r5
 8007ce4:	f7f8 faca 	bl	800027c <__adddf3>
 8007ce8:	4604      	mov	r4, r0
 8007cea:	460d      	mov	r5, r1
 8007cec:	ec45 4b10 	vmov	d0, r4, r5
 8007cf0:	b005      	add	sp, #20
 8007cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8007d68 <__kernel_sin+0x148>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f7f8 fc73 	bl	80005e8 <__aeabi_dmul>
 8007d02:	4632      	mov	r2, r6
 8007d04:	4680      	mov	r8, r0
 8007d06:	4689      	mov	r9, r1
 8007d08:	463b      	mov	r3, r7
 8007d0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d0e:	f7f8 fc6b 	bl	80005e8 <__aeabi_dmul>
 8007d12:	4602      	mov	r2, r0
 8007d14:	460b      	mov	r3, r1
 8007d16:	4640      	mov	r0, r8
 8007d18:	4649      	mov	r1, r9
 8007d1a:	f7f8 faad 	bl	8000278 <__aeabi_dsub>
 8007d1e:	4652      	mov	r2, sl
 8007d20:	465b      	mov	r3, fp
 8007d22:	f7f8 fc61 	bl	80005e8 <__aeabi_dmul>
 8007d26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d2a:	f7f8 faa5 	bl	8000278 <__aeabi_dsub>
 8007d2e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007d60 <__kernel_sin+0x140>)
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	4606      	mov	r6, r0
 8007d36:	460f      	mov	r7, r1
 8007d38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d3c:	f7f8 fc54 	bl	80005e8 <__aeabi_dmul>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	4630      	mov	r0, r6
 8007d46:	4639      	mov	r1, r7
 8007d48:	f7f8 fa98 	bl	800027c <__adddf3>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	4620      	mov	r0, r4
 8007d52:	4629      	mov	r1, r5
 8007d54:	f7f8 fa90 	bl	8000278 <__aeabi_dsub>
 8007d58:	e7c6      	b.n	8007ce8 <__kernel_sin+0xc8>
 8007d5a:	bf00      	nop
 8007d5c:	f3af 8000 	nop.w
 8007d60:	55555549 	.word	0x55555549
 8007d64:	3fc55555 	.word	0x3fc55555
 8007d68:	3fe00000 	.word	0x3fe00000
 8007d6c:	5acfd57c 	.word	0x5acfd57c
 8007d70:	3de5d93a 	.word	0x3de5d93a
 8007d74:	8a2b9ceb 	.word	0x8a2b9ceb
 8007d78:	3e5ae5e6 	.word	0x3e5ae5e6
 8007d7c:	57b1fe7d 	.word	0x57b1fe7d
 8007d80:	3ec71de3 	.word	0x3ec71de3
 8007d84:	19c161d5 	.word	0x19c161d5
 8007d88:	3f2a01a0 	.word	0x3f2a01a0
 8007d8c:	1110f8a6 	.word	0x1110f8a6
 8007d90:	3f811111 	.word	0x3f811111
 8007d94:	00000000 	.word	0x00000000

08007d98 <__ieee754_rem_pio2>:
 8007d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9c:	ec57 6b10 	vmov	r6, r7, d0
 8007da0:	4bc5      	ldr	r3, [pc, #788]	@ (80080b8 <__ieee754_rem_pio2+0x320>)
 8007da2:	b08d      	sub	sp, #52	@ 0x34
 8007da4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007da8:	4598      	cmp	r8, r3
 8007daa:	4604      	mov	r4, r0
 8007dac:	9704      	str	r7, [sp, #16]
 8007dae:	d807      	bhi.n	8007dc0 <__ieee754_rem_pio2+0x28>
 8007db0:	2200      	movs	r2, #0
 8007db2:	2300      	movs	r3, #0
 8007db4:	ed80 0b00 	vstr	d0, [r0]
 8007db8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007dbc:	2500      	movs	r5, #0
 8007dbe:	e028      	b.n	8007e12 <__ieee754_rem_pio2+0x7a>
 8007dc0:	4bbe      	ldr	r3, [pc, #760]	@ (80080bc <__ieee754_rem_pio2+0x324>)
 8007dc2:	4598      	cmp	r8, r3
 8007dc4:	d878      	bhi.n	8007eb8 <__ieee754_rem_pio2+0x120>
 8007dc6:	9b04      	ldr	r3, [sp, #16]
 8007dc8:	4dbd      	ldr	r5, [pc, #756]	@ (80080c0 <__ieee754_rem_pio2+0x328>)
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	4630      	mov	r0, r6
 8007dce:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008080 <__ieee754_rem_pio2+0x2e8>)
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	dd38      	ble.n	8007e4a <__ieee754_rem_pio2+0xb2>
 8007dd8:	f7f8 fa4e 	bl	8000278 <__aeabi_dsub>
 8007ddc:	45a8      	cmp	r8, r5
 8007dde:	4606      	mov	r6, r0
 8007de0:	460f      	mov	r7, r1
 8007de2:	d01a      	beq.n	8007e1a <__ieee754_rem_pio2+0x82>
 8007de4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008088 <__ieee754_rem_pio2+0x2f0>)
 8007de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dea:	f7f8 fa45 	bl	8000278 <__aeabi_dsub>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4680      	mov	r8, r0
 8007df4:	4689      	mov	r9, r1
 8007df6:	4630      	mov	r0, r6
 8007df8:	4639      	mov	r1, r7
 8007dfa:	f7f8 fa3d 	bl	8000278 <__aeabi_dsub>
 8007dfe:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008088 <__ieee754_rem_pio2+0x2f0>)
 8007e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e04:	f7f8 fa38 	bl	8000278 <__aeabi_dsub>
 8007e08:	e9c4 8900 	strd	r8, r9, [r4]
 8007e0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007e10:	2501      	movs	r5, #1
 8007e12:	4628      	mov	r0, r5
 8007e14:	b00d      	add	sp, #52	@ 0x34
 8007e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1a:	a39d      	add	r3, pc, #628	@ (adr r3, 8008090 <__ieee754_rem_pio2+0x2f8>)
 8007e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e20:	f7f8 fa2a 	bl	8000278 <__aeabi_dsub>
 8007e24:	a39c      	add	r3, pc, #624	@ (adr r3, 8008098 <__ieee754_rem_pio2+0x300>)
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	460f      	mov	r7, r1
 8007e2e:	f7f8 fa23 	bl	8000278 <__aeabi_dsub>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4680      	mov	r8, r0
 8007e38:	4689      	mov	r9, r1
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	f7f8 fa1b 	bl	8000278 <__aeabi_dsub>
 8007e42:	a395      	add	r3, pc, #596	@ (adr r3, 8008098 <__ieee754_rem_pio2+0x300>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	e7dc      	b.n	8007e04 <__ieee754_rem_pio2+0x6c>
 8007e4a:	f7f8 fa17 	bl	800027c <__adddf3>
 8007e4e:	45a8      	cmp	r8, r5
 8007e50:	4606      	mov	r6, r0
 8007e52:	460f      	mov	r7, r1
 8007e54:	d018      	beq.n	8007e88 <__ieee754_rem_pio2+0xf0>
 8007e56:	a38c      	add	r3, pc, #560	@ (adr r3, 8008088 <__ieee754_rem_pio2+0x2f0>)
 8007e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5c:	f7f8 fa0e 	bl	800027c <__adddf3>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4680      	mov	r8, r0
 8007e66:	4689      	mov	r9, r1
 8007e68:	4630      	mov	r0, r6
 8007e6a:	4639      	mov	r1, r7
 8007e6c:	f7f8 fa04 	bl	8000278 <__aeabi_dsub>
 8007e70:	a385      	add	r3, pc, #532	@ (adr r3, 8008088 <__ieee754_rem_pio2+0x2f0>)
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f7f8 fa01 	bl	800027c <__adddf3>
 8007e7a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007e7e:	e9c4 8900 	strd	r8, r9, [r4]
 8007e82:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007e86:	e7c4      	b.n	8007e12 <__ieee754_rem_pio2+0x7a>
 8007e88:	a381      	add	r3, pc, #516	@ (adr r3, 8008090 <__ieee754_rem_pio2+0x2f8>)
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	f7f8 f9f5 	bl	800027c <__adddf3>
 8007e92:	a381      	add	r3, pc, #516	@ (adr r3, 8008098 <__ieee754_rem_pio2+0x300>)
 8007e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e98:	4606      	mov	r6, r0
 8007e9a:	460f      	mov	r7, r1
 8007e9c:	f7f8 f9ee 	bl	800027c <__adddf3>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	4689      	mov	r9, r1
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	4639      	mov	r1, r7
 8007eac:	f7f8 f9e4 	bl	8000278 <__aeabi_dsub>
 8007eb0:	a379      	add	r3, pc, #484	@ (adr r3, 8008098 <__ieee754_rem_pio2+0x300>)
 8007eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb6:	e7de      	b.n	8007e76 <__ieee754_rem_pio2+0xde>
 8007eb8:	4b82      	ldr	r3, [pc, #520]	@ (80080c4 <__ieee754_rem_pio2+0x32c>)
 8007eba:	4598      	cmp	r8, r3
 8007ebc:	f200 80d1 	bhi.w	8008062 <__ieee754_rem_pio2+0x2ca>
 8007ec0:	f000 f966 	bl	8008190 <fabs>
 8007ec4:	ec57 6b10 	vmov	r6, r7, d0
 8007ec8:	a375      	add	r3, pc, #468	@ (adr r3, 80080a0 <__ieee754_rem_pio2+0x308>)
 8007eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ece:	4630      	mov	r0, r6
 8007ed0:	4639      	mov	r1, r7
 8007ed2:	f7f8 fb89 	bl	80005e8 <__aeabi_dmul>
 8007ed6:	4b7c      	ldr	r3, [pc, #496]	@ (80080c8 <__ieee754_rem_pio2+0x330>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f7f8 f9cf 	bl	800027c <__adddf3>
 8007ede:	f7f8 fe1d 	bl	8000b1c <__aeabi_d2iz>
 8007ee2:	4605      	mov	r5, r0
 8007ee4:	f7f8 fb16 	bl	8000514 <__aeabi_i2d>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ef0:	a363      	add	r3, pc, #396	@ (adr r3, 8008080 <__ieee754_rem_pio2+0x2e8>)
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	f7f8 fb77 	bl	80005e8 <__aeabi_dmul>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4630      	mov	r0, r6
 8007f00:	4639      	mov	r1, r7
 8007f02:	f7f8 f9b9 	bl	8000278 <__aeabi_dsub>
 8007f06:	a360      	add	r3, pc, #384	@ (adr r3, 8008088 <__ieee754_rem_pio2+0x2f0>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	4682      	mov	sl, r0
 8007f0e:	468b      	mov	fp, r1
 8007f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f14:	f7f8 fb68 	bl	80005e8 <__aeabi_dmul>
 8007f18:	2d1f      	cmp	r5, #31
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	460f      	mov	r7, r1
 8007f1e:	dc0c      	bgt.n	8007f3a <__ieee754_rem_pio2+0x1a2>
 8007f20:	4b6a      	ldr	r3, [pc, #424]	@ (80080cc <__ieee754_rem_pio2+0x334>)
 8007f22:	1e6a      	subs	r2, r5, #1
 8007f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f28:	4543      	cmp	r3, r8
 8007f2a:	d006      	beq.n	8007f3a <__ieee754_rem_pio2+0x1a2>
 8007f2c:	4632      	mov	r2, r6
 8007f2e:	463b      	mov	r3, r7
 8007f30:	4650      	mov	r0, sl
 8007f32:	4659      	mov	r1, fp
 8007f34:	f7f8 f9a0 	bl	8000278 <__aeabi_dsub>
 8007f38:	e00e      	b.n	8007f58 <__ieee754_rem_pio2+0x1c0>
 8007f3a:	463b      	mov	r3, r7
 8007f3c:	4632      	mov	r2, r6
 8007f3e:	4650      	mov	r0, sl
 8007f40:	4659      	mov	r1, fp
 8007f42:	f7f8 f999 	bl	8000278 <__aeabi_dsub>
 8007f46:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007f4a:	9305      	str	r3, [sp, #20]
 8007f4c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007f50:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007f54:	2b10      	cmp	r3, #16
 8007f56:	dc02      	bgt.n	8007f5e <__ieee754_rem_pio2+0x1c6>
 8007f58:	e9c4 0100 	strd	r0, r1, [r4]
 8007f5c:	e039      	b.n	8007fd2 <__ieee754_rem_pio2+0x23a>
 8007f5e:	a34c      	add	r3, pc, #304	@ (adr r3, 8008090 <__ieee754_rem_pio2+0x2f8>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f68:	f7f8 fb3e 	bl	80005e8 <__aeabi_dmul>
 8007f6c:	4606      	mov	r6, r0
 8007f6e:	460f      	mov	r7, r1
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4650      	mov	r0, sl
 8007f76:	4659      	mov	r1, fp
 8007f78:	f7f8 f97e 	bl	8000278 <__aeabi_dsub>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4680      	mov	r8, r0
 8007f82:	4689      	mov	r9, r1
 8007f84:	4650      	mov	r0, sl
 8007f86:	4659      	mov	r1, fp
 8007f88:	f7f8 f976 	bl	8000278 <__aeabi_dsub>
 8007f8c:	4632      	mov	r2, r6
 8007f8e:	463b      	mov	r3, r7
 8007f90:	f7f8 f972 	bl	8000278 <__aeabi_dsub>
 8007f94:	a340      	add	r3, pc, #256	@ (adr r3, 8008098 <__ieee754_rem_pio2+0x300>)
 8007f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	460f      	mov	r7, r1
 8007f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa2:	f7f8 fb21 	bl	80005e8 <__aeabi_dmul>
 8007fa6:	4632      	mov	r2, r6
 8007fa8:	463b      	mov	r3, r7
 8007faa:	f7f8 f965 	bl	8000278 <__aeabi_dsub>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	460f      	mov	r7, r1
 8007fb6:	4640      	mov	r0, r8
 8007fb8:	4649      	mov	r1, r9
 8007fba:	f7f8 f95d 	bl	8000278 <__aeabi_dsub>
 8007fbe:	9a05      	ldr	r2, [sp, #20]
 8007fc0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2b31      	cmp	r3, #49	@ 0x31
 8007fc8:	dc20      	bgt.n	800800c <__ieee754_rem_pio2+0x274>
 8007fca:	e9c4 0100 	strd	r0, r1, [r4]
 8007fce:	46c2      	mov	sl, r8
 8007fd0:	46cb      	mov	fp, r9
 8007fd2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007fd6:	4650      	mov	r0, sl
 8007fd8:	4642      	mov	r2, r8
 8007fda:	464b      	mov	r3, r9
 8007fdc:	4659      	mov	r1, fp
 8007fde:	f7f8 f94b 	bl	8000278 <__aeabi_dsub>
 8007fe2:	463b      	mov	r3, r7
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	f7f8 f947 	bl	8000278 <__aeabi_dsub>
 8007fea:	9b04      	ldr	r3, [sp, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ff2:	f6bf af0e 	bge.w	8007e12 <__ieee754_rem_pio2+0x7a>
 8007ff6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007ffa:	6063      	str	r3, [r4, #4]
 8007ffc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008000:	f8c4 8000 	str.w	r8, [r4]
 8008004:	60a0      	str	r0, [r4, #8]
 8008006:	60e3      	str	r3, [r4, #12]
 8008008:	426d      	negs	r5, r5
 800800a:	e702      	b.n	8007e12 <__ieee754_rem_pio2+0x7a>
 800800c:	a326      	add	r3, pc, #152	@ (adr r3, 80080a8 <__ieee754_rem_pio2+0x310>)
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008016:	f7f8 fae7 	bl	80005e8 <__aeabi_dmul>
 800801a:	4606      	mov	r6, r0
 800801c:	460f      	mov	r7, r1
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4640      	mov	r0, r8
 8008024:	4649      	mov	r1, r9
 8008026:	f7f8 f927 	bl	8000278 <__aeabi_dsub>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4682      	mov	sl, r0
 8008030:	468b      	mov	fp, r1
 8008032:	4640      	mov	r0, r8
 8008034:	4649      	mov	r1, r9
 8008036:	f7f8 f91f 	bl	8000278 <__aeabi_dsub>
 800803a:	4632      	mov	r2, r6
 800803c:	463b      	mov	r3, r7
 800803e:	f7f8 f91b 	bl	8000278 <__aeabi_dsub>
 8008042:	a31b      	add	r3, pc, #108	@ (adr r3, 80080b0 <__ieee754_rem_pio2+0x318>)
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	4606      	mov	r6, r0
 800804a:	460f      	mov	r7, r1
 800804c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008050:	f7f8 faca 	bl	80005e8 <__aeabi_dmul>
 8008054:	4632      	mov	r2, r6
 8008056:	463b      	mov	r3, r7
 8008058:	f7f8 f90e 	bl	8000278 <__aeabi_dsub>
 800805c:	4606      	mov	r6, r0
 800805e:	460f      	mov	r7, r1
 8008060:	e764      	b.n	8007f2c <__ieee754_rem_pio2+0x194>
 8008062:	4b1b      	ldr	r3, [pc, #108]	@ (80080d0 <__ieee754_rem_pio2+0x338>)
 8008064:	4598      	cmp	r8, r3
 8008066:	d935      	bls.n	80080d4 <__ieee754_rem_pio2+0x33c>
 8008068:	4632      	mov	r2, r6
 800806a:	463b      	mov	r3, r7
 800806c:	4630      	mov	r0, r6
 800806e:	4639      	mov	r1, r7
 8008070:	f7f8 f902 	bl	8000278 <__aeabi_dsub>
 8008074:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008078:	e9c4 0100 	strd	r0, r1, [r4]
 800807c:	e69e      	b.n	8007dbc <__ieee754_rem_pio2+0x24>
 800807e:	bf00      	nop
 8008080:	54400000 	.word	0x54400000
 8008084:	3ff921fb 	.word	0x3ff921fb
 8008088:	1a626331 	.word	0x1a626331
 800808c:	3dd0b461 	.word	0x3dd0b461
 8008090:	1a600000 	.word	0x1a600000
 8008094:	3dd0b461 	.word	0x3dd0b461
 8008098:	2e037073 	.word	0x2e037073
 800809c:	3ba3198a 	.word	0x3ba3198a
 80080a0:	6dc9c883 	.word	0x6dc9c883
 80080a4:	3fe45f30 	.word	0x3fe45f30
 80080a8:	2e000000 	.word	0x2e000000
 80080ac:	3ba3198a 	.word	0x3ba3198a
 80080b0:	252049c1 	.word	0x252049c1
 80080b4:	397b839a 	.word	0x397b839a
 80080b8:	3fe921fb 	.word	0x3fe921fb
 80080bc:	4002d97b 	.word	0x4002d97b
 80080c0:	3ff921fb 	.word	0x3ff921fb
 80080c4:	413921fb 	.word	0x413921fb
 80080c8:	3fe00000 	.word	0x3fe00000
 80080cc:	08008b58 	.word	0x08008b58
 80080d0:	7fefffff 	.word	0x7fefffff
 80080d4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80080d8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80080dc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80080e0:	4630      	mov	r0, r6
 80080e2:	460f      	mov	r7, r1
 80080e4:	f7f8 fd1a 	bl	8000b1c <__aeabi_d2iz>
 80080e8:	f7f8 fa14 	bl	8000514 <__aeabi_i2d>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4630      	mov	r0, r6
 80080f2:	4639      	mov	r1, r7
 80080f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80080f8:	f7f8 f8be 	bl	8000278 <__aeabi_dsub>
 80080fc:	4b22      	ldr	r3, [pc, #136]	@ (8008188 <__ieee754_rem_pio2+0x3f0>)
 80080fe:	2200      	movs	r2, #0
 8008100:	f7f8 fa72 	bl	80005e8 <__aeabi_dmul>
 8008104:	460f      	mov	r7, r1
 8008106:	4606      	mov	r6, r0
 8008108:	f7f8 fd08 	bl	8000b1c <__aeabi_d2iz>
 800810c:	f7f8 fa02 	bl	8000514 <__aeabi_i2d>
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	4630      	mov	r0, r6
 8008116:	4639      	mov	r1, r7
 8008118:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800811c:	f7f8 f8ac 	bl	8000278 <__aeabi_dsub>
 8008120:	4b19      	ldr	r3, [pc, #100]	@ (8008188 <__ieee754_rem_pio2+0x3f0>)
 8008122:	2200      	movs	r2, #0
 8008124:	f7f8 fa60 	bl	80005e8 <__aeabi_dmul>
 8008128:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800812c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008130:	f04f 0803 	mov.w	r8, #3
 8008134:	2600      	movs	r6, #0
 8008136:	2700      	movs	r7, #0
 8008138:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800813c:	4632      	mov	r2, r6
 800813e:	463b      	mov	r3, r7
 8008140:	46c2      	mov	sl, r8
 8008142:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008146:	f7f8 fcb7 	bl	8000ab8 <__aeabi_dcmpeq>
 800814a:	2800      	cmp	r0, #0
 800814c:	d1f4      	bne.n	8008138 <__ieee754_rem_pio2+0x3a0>
 800814e:	4b0f      	ldr	r3, [pc, #60]	@ (800818c <__ieee754_rem_pio2+0x3f4>)
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	2302      	movs	r3, #2
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	462a      	mov	r2, r5
 8008158:	4653      	mov	r3, sl
 800815a:	4621      	mov	r1, r4
 800815c:	a806      	add	r0, sp, #24
 800815e:	f000 f81f 	bl	80081a0 <__kernel_rem_pio2>
 8008162:	9b04      	ldr	r3, [sp, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	4605      	mov	r5, r0
 8008168:	f6bf ae53 	bge.w	8007e12 <__ieee754_rem_pio2+0x7a>
 800816c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008170:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008174:	e9c4 2300 	strd	r2, r3, [r4]
 8008178:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800817c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008180:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008184:	e740      	b.n	8008008 <__ieee754_rem_pio2+0x270>
 8008186:	bf00      	nop
 8008188:	41700000 	.word	0x41700000
 800818c:	08008bd8 	.word	0x08008bd8

08008190 <fabs>:
 8008190:	ec51 0b10 	vmov	r0, r1, d0
 8008194:	4602      	mov	r2, r0
 8008196:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800819a:	ec43 2b10 	vmov	d0, r2, r3
 800819e:	4770      	bx	lr

080081a0 <__kernel_rem_pio2>:
 80081a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a4:	ed2d 8b02 	vpush	{d8}
 80081a8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80081ac:	f112 0f14 	cmn.w	r2, #20
 80081b0:	9306      	str	r3, [sp, #24]
 80081b2:	9104      	str	r1, [sp, #16]
 80081b4:	4bbe      	ldr	r3, [pc, #760]	@ (80084b0 <__kernel_rem_pio2+0x310>)
 80081b6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80081b8:	9008      	str	r0, [sp, #32]
 80081ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	9b06      	ldr	r3, [sp, #24]
 80081c2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80081c6:	bfa8      	it	ge
 80081c8:	1ed4      	subge	r4, r2, #3
 80081ca:	9305      	str	r3, [sp, #20]
 80081cc:	bfb2      	itee	lt
 80081ce:	2400      	movlt	r4, #0
 80081d0:	2318      	movge	r3, #24
 80081d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80081d6:	f06f 0317 	mvn.w	r3, #23
 80081da:	fb04 3303 	mla	r3, r4, r3, r3
 80081de:	eb03 0b02 	add.w	fp, r3, r2
 80081e2:	9b00      	ldr	r3, [sp, #0]
 80081e4:	9a05      	ldr	r2, [sp, #20]
 80081e6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80084a0 <__kernel_rem_pio2+0x300>
 80081ea:	eb03 0802 	add.w	r8, r3, r2
 80081ee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80081f0:	1aa7      	subs	r7, r4, r2
 80081f2:	ae20      	add	r6, sp, #128	@ 0x80
 80081f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80081f8:	2500      	movs	r5, #0
 80081fa:	4545      	cmp	r5, r8
 80081fc:	dd13      	ble.n	8008226 <__kernel_rem_pio2+0x86>
 80081fe:	9b06      	ldr	r3, [sp, #24]
 8008200:	aa20      	add	r2, sp, #128	@ 0x80
 8008202:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008206:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800820a:	f04f 0800 	mov.w	r8, #0
 800820e:	9b00      	ldr	r3, [sp, #0]
 8008210:	4598      	cmp	r8, r3
 8008212:	dc31      	bgt.n	8008278 <__kernel_rem_pio2+0xd8>
 8008214:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80084a0 <__kernel_rem_pio2+0x300>
 8008218:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800821c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008220:	462f      	mov	r7, r5
 8008222:	2600      	movs	r6, #0
 8008224:	e01b      	b.n	800825e <__kernel_rem_pio2+0xbe>
 8008226:	42ef      	cmn	r7, r5
 8008228:	d407      	bmi.n	800823a <__kernel_rem_pio2+0x9a>
 800822a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800822e:	f7f8 f971 	bl	8000514 <__aeabi_i2d>
 8008232:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008236:	3501      	adds	r5, #1
 8008238:	e7df      	b.n	80081fa <__kernel_rem_pio2+0x5a>
 800823a:	ec51 0b18 	vmov	r0, r1, d8
 800823e:	e7f8      	b.n	8008232 <__kernel_rem_pio2+0x92>
 8008240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008244:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008248:	f7f8 f9ce 	bl	80005e8 <__aeabi_dmul>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008254:	f7f8 f812 	bl	800027c <__adddf3>
 8008258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800825c:	3601      	adds	r6, #1
 800825e:	9b05      	ldr	r3, [sp, #20]
 8008260:	429e      	cmp	r6, r3
 8008262:	f1a7 0708 	sub.w	r7, r7, #8
 8008266:	ddeb      	ble.n	8008240 <__kernel_rem_pio2+0xa0>
 8008268:	ed9d 7b02 	vldr	d7, [sp, #8]
 800826c:	f108 0801 	add.w	r8, r8, #1
 8008270:	ecaa 7b02 	vstmia	sl!, {d7}
 8008274:	3508      	adds	r5, #8
 8008276:	e7ca      	b.n	800820e <__kernel_rem_pio2+0x6e>
 8008278:	9b00      	ldr	r3, [sp, #0]
 800827a:	f8dd 8000 	ldr.w	r8, [sp]
 800827e:	aa0c      	add	r2, sp, #48	@ 0x30
 8008280:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008284:	930a      	str	r3, [sp, #40]	@ 0x28
 8008286:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008288:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800828c:	9309      	str	r3, [sp, #36]	@ 0x24
 800828e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8008292:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008294:	ab98      	add	r3, sp, #608	@ 0x260
 8008296:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800829a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800829e:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082a2:	ac0c      	add	r4, sp, #48	@ 0x30
 80082a4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80082a6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80082aa:	46a1      	mov	r9, r4
 80082ac:	46c2      	mov	sl, r8
 80082ae:	f1ba 0f00 	cmp.w	sl, #0
 80082b2:	f1a5 0508 	sub.w	r5, r5, #8
 80082b6:	dc77      	bgt.n	80083a8 <__kernel_rem_pio2+0x208>
 80082b8:	4658      	mov	r0, fp
 80082ba:	ed9d 0b02 	vldr	d0, [sp, #8]
 80082be:	f000 fac7 	bl	8008850 <scalbn>
 80082c2:	ec57 6b10 	vmov	r6, r7, d0
 80082c6:	2200      	movs	r2, #0
 80082c8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80082cc:	4630      	mov	r0, r6
 80082ce:	4639      	mov	r1, r7
 80082d0:	f7f8 f98a 	bl	80005e8 <__aeabi_dmul>
 80082d4:	ec41 0b10 	vmov	d0, r0, r1
 80082d8:	f000 fb3a 	bl	8008950 <floor>
 80082dc:	4b75      	ldr	r3, [pc, #468]	@ (80084b4 <__kernel_rem_pio2+0x314>)
 80082de:	ec51 0b10 	vmov	r0, r1, d0
 80082e2:	2200      	movs	r2, #0
 80082e4:	f7f8 f980 	bl	80005e8 <__aeabi_dmul>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	4630      	mov	r0, r6
 80082ee:	4639      	mov	r1, r7
 80082f0:	f7f7 ffc2 	bl	8000278 <__aeabi_dsub>
 80082f4:	460f      	mov	r7, r1
 80082f6:	4606      	mov	r6, r0
 80082f8:	f7f8 fc10 	bl	8000b1c <__aeabi_d2iz>
 80082fc:	9002      	str	r0, [sp, #8]
 80082fe:	f7f8 f909 	bl	8000514 <__aeabi_i2d>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4630      	mov	r0, r6
 8008308:	4639      	mov	r1, r7
 800830a:	f7f7 ffb5 	bl	8000278 <__aeabi_dsub>
 800830e:	f1bb 0f00 	cmp.w	fp, #0
 8008312:	4606      	mov	r6, r0
 8008314:	460f      	mov	r7, r1
 8008316:	dd6c      	ble.n	80083f2 <__kernel_rem_pio2+0x252>
 8008318:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800831c:	ab0c      	add	r3, sp, #48	@ 0x30
 800831e:	9d02      	ldr	r5, [sp, #8]
 8008320:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008324:	f1cb 0018 	rsb	r0, fp, #24
 8008328:	fa43 f200 	asr.w	r2, r3, r0
 800832c:	4415      	add	r5, r2
 800832e:	4082      	lsls	r2, r0
 8008330:	1a9b      	subs	r3, r3, r2
 8008332:	aa0c      	add	r2, sp, #48	@ 0x30
 8008334:	9502      	str	r5, [sp, #8]
 8008336:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800833a:	f1cb 0217 	rsb	r2, fp, #23
 800833e:	fa43 f902 	asr.w	r9, r3, r2
 8008342:	f1b9 0f00 	cmp.w	r9, #0
 8008346:	dd64      	ble.n	8008412 <__kernel_rem_pio2+0x272>
 8008348:	9b02      	ldr	r3, [sp, #8]
 800834a:	2200      	movs	r2, #0
 800834c:	3301      	adds	r3, #1
 800834e:	9302      	str	r3, [sp, #8]
 8008350:	4615      	mov	r5, r2
 8008352:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8008356:	4590      	cmp	r8, r2
 8008358:	f300 80b8 	bgt.w	80084cc <__kernel_rem_pio2+0x32c>
 800835c:	f1bb 0f00 	cmp.w	fp, #0
 8008360:	dd07      	ble.n	8008372 <__kernel_rem_pio2+0x1d2>
 8008362:	f1bb 0f01 	cmp.w	fp, #1
 8008366:	f000 80bf 	beq.w	80084e8 <__kernel_rem_pio2+0x348>
 800836a:	f1bb 0f02 	cmp.w	fp, #2
 800836e:	f000 80c6 	beq.w	80084fe <__kernel_rem_pio2+0x35e>
 8008372:	f1b9 0f02 	cmp.w	r9, #2
 8008376:	d14c      	bne.n	8008412 <__kernel_rem_pio2+0x272>
 8008378:	4632      	mov	r2, r6
 800837a:	463b      	mov	r3, r7
 800837c:	494e      	ldr	r1, [pc, #312]	@ (80084b8 <__kernel_rem_pio2+0x318>)
 800837e:	2000      	movs	r0, #0
 8008380:	f7f7 ff7a 	bl	8000278 <__aeabi_dsub>
 8008384:	4606      	mov	r6, r0
 8008386:	460f      	mov	r7, r1
 8008388:	2d00      	cmp	r5, #0
 800838a:	d042      	beq.n	8008412 <__kernel_rem_pio2+0x272>
 800838c:	4658      	mov	r0, fp
 800838e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80084a8 <__kernel_rem_pio2+0x308>
 8008392:	f000 fa5d 	bl	8008850 <scalbn>
 8008396:	4630      	mov	r0, r6
 8008398:	4639      	mov	r1, r7
 800839a:	ec53 2b10 	vmov	r2, r3, d0
 800839e:	f7f7 ff6b 	bl	8000278 <__aeabi_dsub>
 80083a2:	4606      	mov	r6, r0
 80083a4:	460f      	mov	r7, r1
 80083a6:	e034      	b.n	8008412 <__kernel_rem_pio2+0x272>
 80083a8:	4b44      	ldr	r3, [pc, #272]	@ (80084bc <__kernel_rem_pio2+0x31c>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083b0:	f7f8 f91a 	bl	80005e8 <__aeabi_dmul>
 80083b4:	f7f8 fbb2 	bl	8000b1c <__aeabi_d2iz>
 80083b8:	f7f8 f8ac 	bl	8000514 <__aeabi_i2d>
 80083bc:	4b40      	ldr	r3, [pc, #256]	@ (80084c0 <__kernel_rem_pio2+0x320>)
 80083be:	2200      	movs	r2, #0
 80083c0:	4606      	mov	r6, r0
 80083c2:	460f      	mov	r7, r1
 80083c4:	f7f8 f910 	bl	80005e8 <__aeabi_dmul>
 80083c8:	4602      	mov	r2, r0
 80083ca:	460b      	mov	r3, r1
 80083cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083d0:	f7f7 ff52 	bl	8000278 <__aeabi_dsub>
 80083d4:	f7f8 fba2 	bl	8000b1c <__aeabi_d2iz>
 80083d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083dc:	f849 0b04 	str.w	r0, [r9], #4
 80083e0:	4639      	mov	r1, r7
 80083e2:	4630      	mov	r0, r6
 80083e4:	f7f7 ff4a 	bl	800027c <__adddf3>
 80083e8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80083ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083f0:	e75d      	b.n	80082ae <__kernel_rem_pio2+0x10e>
 80083f2:	d107      	bne.n	8008404 <__kernel_rem_pio2+0x264>
 80083f4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80083f8:	aa0c      	add	r2, sp, #48	@ 0x30
 80083fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083fe:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8008402:	e79e      	b.n	8008342 <__kernel_rem_pio2+0x1a2>
 8008404:	4b2f      	ldr	r3, [pc, #188]	@ (80084c4 <__kernel_rem_pio2+0x324>)
 8008406:	2200      	movs	r2, #0
 8008408:	f7f8 fb74 	bl	8000af4 <__aeabi_dcmpge>
 800840c:	2800      	cmp	r0, #0
 800840e:	d143      	bne.n	8008498 <__kernel_rem_pio2+0x2f8>
 8008410:	4681      	mov	r9, r0
 8008412:	2200      	movs	r2, #0
 8008414:	2300      	movs	r3, #0
 8008416:	4630      	mov	r0, r6
 8008418:	4639      	mov	r1, r7
 800841a:	f7f8 fb4d 	bl	8000ab8 <__aeabi_dcmpeq>
 800841e:	2800      	cmp	r0, #0
 8008420:	f000 80bf 	beq.w	80085a2 <__kernel_rem_pio2+0x402>
 8008424:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8008428:	2200      	movs	r2, #0
 800842a:	9900      	ldr	r1, [sp, #0]
 800842c:	428b      	cmp	r3, r1
 800842e:	da6e      	bge.n	800850e <__kernel_rem_pio2+0x36e>
 8008430:	2a00      	cmp	r2, #0
 8008432:	f000 8089 	beq.w	8008548 <__kernel_rem_pio2+0x3a8>
 8008436:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800843a:	ab0c      	add	r3, sp, #48	@ 0x30
 800843c:	f1ab 0b18 	sub.w	fp, fp, #24
 8008440:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0f6      	beq.n	8008436 <__kernel_rem_pio2+0x296>
 8008448:	4658      	mov	r0, fp
 800844a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80084a8 <__kernel_rem_pio2+0x308>
 800844e:	f000 f9ff 	bl	8008850 <scalbn>
 8008452:	f108 0301 	add.w	r3, r8, #1
 8008456:	00da      	lsls	r2, r3, #3
 8008458:	9205      	str	r2, [sp, #20]
 800845a:	ec55 4b10 	vmov	r4, r5, d0
 800845e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008460:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80084bc <__kernel_rem_pio2+0x31c>
 8008464:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8008468:	4646      	mov	r6, r8
 800846a:	f04f 0a00 	mov.w	sl, #0
 800846e:	2e00      	cmp	r6, #0
 8008470:	f280 80cf 	bge.w	8008612 <__kernel_rem_pio2+0x472>
 8008474:	4644      	mov	r4, r8
 8008476:	2c00      	cmp	r4, #0
 8008478:	f2c0 80fd 	blt.w	8008676 <__kernel_rem_pio2+0x4d6>
 800847c:	4b12      	ldr	r3, [pc, #72]	@ (80084c8 <__kernel_rem_pio2+0x328>)
 800847e:	461f      	mov	r7, r3
 8008480:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008482:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008486:	9306      	str	r3, [sp, #24]
 8008488:	f04f 0a00 	mov.w	sl, #0
 800848c:	f04f 0b00 	mov.w	fp, #0
 8008490:	2600      	movs	r6, #0
 8008492:	eba8 0504 	sub.w	r5, r8, r4
 8008496:	e0e2      	b.n	800865e <__kernel_rem_pio2+0x4be>
 8008498:	f04f 0902 	mov.w	r9, #2
 800849c:	e754      	b.n	8008348 <__kernel_rem_pio2+0x1a8>
 800849e:	bf00      	nop
	...
 80084ac:	3ff00000 	.word	0x3ff00000
 80084b0:	08008d20 	.word	0x08008d20
 80084b4:	40200000 	.word	0x40200000
 80084b8:	3ff00000 	.word	0x3ff00000
 80084bc:	3e700000 	.word	0x3e700000
 80084c0:	41700000 	.word	0x41700000
 80084c4:	3fe00000 	.word	0x3fe00000
 80084c8:	08008ce0 	.word	0x08008ce0
 80084cc:	f854 3b04 	ldr.w	r3, [r4], #4
 80084d0:	b945      	cbnz	r5, 80084e4 <__kernel_rem_pio2+0x344>
 80084d2:	b123      	cbz	r3, 80084de <__kernel_rem_pio2+0x33e>
 80084d4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80084d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80084dc:	2301      	movs	r3, #1
 80084de:	3201      	adds	r2, #1
 80084e0:	461d      	mov	r5, r3
 80084e2:	e738      	b.n	8008356 <__kernel_rem_pio2+0x1b6>
 80084e4:	1acb      	subs	r3, r1, r3
 80084e6:	e7f7      	b.n	80084d8 <__kernel_rem_pio2+0x338>
 80084e8:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80084ec:	ab0c      	add	r3, sp, #48	@ 0x30
 80084ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80084f6:	a90c      	add	r1, sp, #48	@ 0x30
 80084f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80084fc:	e739      	b.n	8008372 <__kernel_rem_pio2+0x1d2>
 80084fe:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8008502:	ab0c      	add	r3, sp, #48	@ 0x30
 8008504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008508:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800850c:	e7f3      	b.n	80084f6 <__kernel_rem_pio2+0x356>
 800850e:	a90c      	add	r1, sp, #48	@ 0x30
 8008510:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008514:	3b01      	subs	r3, #1
 8008516:	430a      	orrs	r2, r1
 8008518:	e787      	b.n	800842a <__kernel_rem_pio2+0x28a>
 800851a:	3401      	adds	r4, #1
 800851c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008520:	2a00      	cmp	r2, #0
 8008522:	d0fa      	beq.n	800851a <__kernel_rem_pio2+0x37a>
 8008524:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008526:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800852a:	eb0d 0503 	add.w	r5, sp, r3
 800852e:	9b06      	ldr	r3, [sp, #24]
 8008530:	aa20      	add	r2, sp, #128	@ 0x80
 8008532:	4443      	add	r3, r8
 8008534:	f108 0701 	add.w	r7, r8, #1
 8008538:	3d98      	subs	r5, #152	@ 0x98
 800853a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800853e:	4444      	add	r4, r8
 8008540:	42bc      	cmp	r4, r7
 8008542:	da04      	bge.n	800854e <__kernel_rem_pio2+0x3ae>
 8008544:	46a0      	mov	r8, r4
 8008546:	e6a2      	b.n	800828e <__kernel_rem_pio2+0xee>
 8008548:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800854a:	2401      	movs	r4, #1
 800854c:	e7e6      	b.n	800851c <__kernel_rem_pio2+0x37c>
 800854e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008550:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8008554:	f7f7 ffde 	bl	8000514 <__aeabi_i2d>
 8008558:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8008820 <__kernel_rem_pio2+0x680>
 800855c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008560:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008564:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008568:	46b2      	mov	sl, r6
 800856a:	f04f 0800 	mov.w	r8, #0
 800856e:	9b05      	ldr	r3, [sp, #20]
 8008570:	4598      	cmp	r8, r3
 8008572:	dd05      	ble.n	8008580 <__kernel_rem_pio2+0x3e0>
 8008574:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008578:	3701      	adds	r7, #1
 800857a:	eca5 7b02 	vstmia	r5!, {d7}
 800857e:	e7df      	b.n	8008540 <__kernel_rem_pio2+0x3a0>
 8008580:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8008584:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008588:	f7f8 f82e 	bl	80005e8 <__aeabi_dmul>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008594:	f7f7 fe72 	bl	800027c <__adddf3>
 8008598:	f108 0801 	add.w	r8, r8, #1
 800859c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085a0:	e7e5      	b.n	800856e <__kernel_rem_pio2+0x3ce>
 80085a2:	f1cb 0000 	rsb	r0, fp, #0
 80085a6:	ec47 6b10 	vmov	d0, r6, r7
 80085aa:	f000 f951 	bl	8008850 <scalbn>
 80085ae:	ec55 4b10 	vmov	r4, r5, d0
 80085b2:	4b9d      	ldr	r3, [pc, #628]	@ (8008828 <__kernel_rem_pio2+0x688>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	4620      	mov	r0, r4
 80085b8:	4629      	mov	r1, r5
 80085ba:	f7f8 fa9b 	bl	8000af4 <__aeabi_dcmpge>
 80085be:	b300      	cbz	r0, 8008602 <__kernel_rem_pio2+0x462>
 80085c0:	4b9a      	ldr	r3, [pc, #616]	@ (800882c <__kernel_rem_pio2+0x68c>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	4620      	mov	r0, r4
 80085c6:	4629      	mov	r1, r5
 80085c8:	f7f8 f80e 	bl	80005e8 <__aeabi_dmul>
 80085cc:	f7f8 faa6 	bl	8000b1c <__aeabi_d2iz>
 80085d0:	4606      	mov	r6, r0
 80085d2:	f7f7 ff9f 	bl	8000514 <__aeabi_i2d>
 80085d6:	4b94      	ldr	r3, [pc, #592]	@ (8008828 <__kernel_rem_pio2+0x688>)
 80085d8:	2200      	movs	r2, #0
 80085da:	f7f8 f805 	bl	80005e8 <__aeabi_dmul>
 80085de:	460b      	mov	r3, r1
 80085e0:	4602      	mov	r2, r0
 80085e2:	4629      	mov	r1, r5
 80085e4:	4620      	mov	r0, r4
 80085e6:	f7f7 fe47 	bl	8000278 <__aeabi_dsub>
 80085ea:	f7f8 fa97 	bl	8000b1c <__aeabi_d2iz>
 80085ee:	ab0c      	add	r3, sp, #48	@ 0x30
 80085f0:	f10b 0b18 	add.w	fp, fp, #24
 80085f4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80085f8:	f108 0801 	add.w	r8, r8, #1
 80085fc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8008600:	e722      	b.n	8008448 <__kernel_rem_pio2+0x2a8>
 8008602:	4620      	mov	r0, r4
 8008604:	4629      	mov	r1, r5
 8008606:	f7f8 fa89 	bl	8000b1c <__aeabi_d2iz>
 800860a:	ab0c      	add	r3, sp, #48	@ 0x30
 800860c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8008610:	e71a      	b.n	8008448 <__kernel_rem_pio2+0x2a8>
 8008612:	ab0c      	add	r3, sp, #48	@ 0x30
 8008614:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008618:	f7f7 ff7c 	bl	8000514 <__aeabi_i2d>
 800861c:	4622      	mov	r2, r4
 800861e:	462b      	mov	r3, r5
 8008620:	f7f7 ffe2 	bl	80005e8 <__aeabi_dmul>
 8008624:	4652      	mov	r2, sl
 8008626:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800862a:	465b      	mov	r3, fp
 800862c:	4620      	mov	r0, r4
 800862e:	4629      	mov	r1, r5
 8008630:	f7f7 ffda 	bl	80005e8 <__aeabi_dmul>
 8008634:	3e01      	subs	r6, #1
 8008636:	4604      	mov	r4, r0
 8008638:	460d      	mov	r5, r1
 800863a:	e718      	b.n	800846e <__kernel_rem_pio2+0x2ce>
 800863c:	9906      	ldr	r1, [sp, #24]
 800863e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8008642:	9106      	str	r1, [sp, #24]
 8008644:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8008648:	f7f7 ffce 	bl	80005e8 <__aeabi_dmul>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4650      	mov	r0, sl
 8008652:	4659      	mov	r1, fp
 8008654:	f7f7 fe12 	bl	800027c <__adddf3>
 8008658:	3601      	adds	r6, #1
 800865a:	4682      	mov	sl, r0
 800865c:	468b      	mov	fp, r1
 800865e:	9b00      	ldr	r3, [sp, #0]
 8008660:	429e      	cmp	r6, r3
 8008662:	dc01      	bgt.n	8008668 <__kernel_rem_pio2+0x4c8>
 8008664:	42b5      	cmp	r5, r6
 8008666:	dae9      	bge.n	800863c <__kernel_rem_pio2+0x49c>
 8008668:	ab48      	add	r3, sp, #288	@ 0x120
 800866a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800866e:	e9c5 ab00 	strd	sl, fp, [r5]
 8008672:	3c01      	subs	r4, #1
 8008674:	e6ff      	b.n	8008476 <__kernel_rem_pio2+0x2d6>
 8008676:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008678:	2b02      	cmp	r3, #2
 800867a:	dc0b      	bgt.n	8008694 <__kernel_rem_pio2+0x4f4>
 800867c:	2b00      	cmp	r3, #0
 800867e:	dc39      	bgt.n	80086f4 <__kernel_rem_pio2+0x554>
 8008680:	d05d      	beq.n	800873e <__kernel_rem_pio2+0x59e>
 8008682:	9b02      	ldr	r3, [sp, #8]
 8008684:	f003 0007 	and.w	r0, r3, #7
 8008688:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800868c:	ecbd 8b02 	vpop	{d8}
 8008690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008694:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008696:	2b03      	cmp	r3, #3
 8008698:	d1f3      	bne.n	8008682 <__kernel_rem_pio2+0x4e2>
 800869a:	9b05      	ldr	r3, [sp, #20]
 800869c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80086a0:	eb0d 0403 	add.w	r4, sp, r3
 80086a4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80086a8:	4625      	mov	r5, r4
 80086aa:	46c2      	mov	sl, r8
 80086ac:	f1ba 0f00 	cmp.w	sl, #0
 80086b0:	f1a5 0508 	sub.w	r5, r5, #8
 80086b4:	dc6b      	bgt.n	800878e <__kernel_rem_pio2+0x5ee>
 80086b6:	4645      	mov	r5, r8
 80086b8:	2d01      	cmp	r5, #1
 80086ba:	f1a4 0408 	sub.w	r4, r4, #8
 80086be:	f300 8087 	bgt.w	80087d0 <__kernel_rem_pio2+0x630>
 80086c2:	9c05      	ldr	r4, [sp, #20]
 80086c4:	ab48      	add	r3, sp, #288	@ 0x120
 80086c6:	441c      	add	r4, r3
 80086c8:	2000      	movs	r0, #0
 80086ca:	2100      	movs	r1, #0
 80086cc:	f1b8 0f01 	cmp.w	r8, #1
 80086d0:	f300 809c 	bgt.w	800880c <__kernel_rem_pio2+0x66c>
 80086d4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80086d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80086dc:	f1b9 0f00 	cmp.w	r9, #0
 80086e0:	f040 80a6 	bne.w	8008830 <__kernel_rem_pio2+0x690>
 80086e4:	9b04      	ldr	r3, [sp, #16]
 80086e6:	e9c3 7800 	strd	r7, r8, [r3]
 80086ea:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80086ee:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80086f2:	e7c6      	b.n	8008682 <__kernel_rem_pio2+0x4e2>
 80086f4:	9d05      	ldr	r5, [sp, #20]
 80086f6:	ab48      	add	r3, sp, #288	@ 0x120
 80086f8:	441d      	add	r5, r3
 80086fa:	4644      	mov	r4, r8
 80086fc:	2000      	movs	r0, #0
 80086fe:	2100      	movs	r1, #0
 8008700:	2c00      	cmp	r4, #0
 8008702:	da35      	bge.n	8008770 <__kernel_rem_pio2+0x5d0>
 8008704:	f1b9 0f00 	cmp.w	r9, #0
 8008708:	d038      	beq.n	800877c <__kernel_rem_pio2+0x5dc>
 800870a:	4602      	mov	r2, r0
 800870c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008710:	9c04      	ldr	r4, [sp, #16]
 8008712:	e9c4 2300 	strd	r2, r3, [r4]
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800871e:	f7f7 fdab 	bl	8000278 <__aeabi_dsub>
 8008722:	ad4a      	add	r5, sp, #296	@ 0x128
 8008724:	2401      	movs	r4, #1
 8008726:	45a0      	cmp	r8, r4
 8008728:	da2b      	bge.n	8008782 <__kernel_rem_pio2+0x5e2>
 800872a:	f1b9 0f00 	cmp.w	r9, #0
 800872e:	d002      	beq.n	8008736 <__kernel_rem_pio2+0x596>
 8008730:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008734:	4619      	mov	r1, r3
 8008736:	9b04      	ldr	r3, [sp, #16]
 8008738:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800873c:	e7a1      	b.n	8008682 <__kernel_rem_pio2+0x4e2>
 800873e:	9c05      	ldr	r4, [sp, #20]
 8008740:	ab48      	add	r3, sp, #288	@ 0x120
 8008742:	441c      	add	r4, r3
 8008744:	2000      	movs	r0, #0
 8008746:	2100      	movs	r1, #0
 8008748:	f1b8 0f00 	cmp.w	r8, #0
 800874c:	da09      	bge.n	8008762 <__kernel_rem_pio2+0x5c2>
 800874e:	f1b9 0f00 	cmp.w	r9, #0
 8008752:	d002      	beq.n	800875a <__kernel_rem_pio2+0x5ba>
 8008754:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008758:	4619      	mov	r1, r3
 800875a:	9b04      	ldr	r3, [sp, #16]
 800875c:	e9c3 0100 	strd	r0, r1, [r3]
 8008760:	e78f      	b.n	8008682 <__kernel_rem_pio2+0x4e2>
 8008762:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008766:	f7f7 fd89 	bl	800027c <__adddf3>
 800876a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800876e:	e7eb      	b.n	8008748 <__kernel_rem_pio2+0x5a8>
 8008770:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008774:	f7f7 fd82 	bl	800027c <__adddf3>
 8008778:	3c01      	subs	r4, #1
 800877a:	e7c1      	b.n	8008700 <__kernel_rem_pio2+0x560>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	e7c6      	b.n	8008710 <__kernel_rem_pio2+0x570>
 8008782:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008786:	f7f7 fd79 	bl	800027c <__adddf3>
 800878a:	3401      	adds	r4, #1
 800878c:	e7cb      	b.n	8008726 <__kernel_rem_pio2+0x586>
 800878e:	ed95 7b00 	vldr	d7, [r5]
 8008792:	ed8d 7b00 	vstr	d7, [sp]
 8008796:	ed95 7b02 	vldr	d7, [r5, #8]
 800879a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800879e:	ec53 2b17 	vmov	r2, r3, d7
 80087a2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80087a6:	f7f7 fd69 	bl	800027c <__adddf3>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4606      	mov	r6, r0
 80087b0:	460f      	mov	r7, r1
 80087b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087b6:	f7f7 fd5f 	bl	8000278 <__aeabi_dsub>
 80087ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087be:	f7f7 fd5d 	bl	800027c <__adddf3>
 80087c2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80087c6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80087ca:	e9c5 6700 	strd	r6, r7, [r5]
 80087ce:	e76d      	b.n	80086ac <__kernel_rem_pio2+0x50c>
 80087d0:	ed94 7b00 	vldr	d7, [r4]
 80087d4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80087d8:	ec51 0b17 	vmov	r0, r1, d7
 80087dc:	4652      	mov	r2, sl
 80087de:	465b      	mov	r3, fp
 80087e0:	ed8d 7b00 	vstr	d7, [sp]
 80087e4:	f7f7 fd4a 	bl	800027c <__adddf3>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4606      	mov	r6, r0
 80087ee:	460f      	mov	r7, r1
 80087f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087f4:	f7f7 fd40 	bl	8000278 <__aeabi_dsub>
 80087f8:	4652      	mov	r2, sl
 80087fa:	465b      	mov	r3, fp
 80087fc:	f7f7 fd3e 	bl	800027c <__adddf3>
 8008800:	3d01      	subs	r5, #1
 8008802:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008806:	e9c4 6700 	strd	r6, r7, [r4]
 800880a:	e755      	b.n	80086b8 <__kernel_rem_pio2+0x518>
 800880c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008810:	f7f7 fd34 	bl	800027c <__adddf3>
 8008814:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008818:	e758      	b.n	80086cc <__kernel_rem_pio2+0x52c>
 800881a:	bf00      	nop
 800881c:	f3af 8000 	nop.w
	...
 8008828:	41700000 	.word	0x41700000
 800882c:	3e700000 	.word	0x3e700000
 8008830:	9b04      	ldr	r3, [sp, #16]
 8008832:	9a04      	ldr	r2, [sp, #16]
 8008834:	601f      	str	r7, [r3, #0]
 8008836:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800883a:	605c      	str	r4, [r3, #4]
 800883c:	609d      	str	r5, [r3, #8]
 800883e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008842:	60d3      	str	r3, [r2, #12]
 8008844:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008848:	6110      	str	r0, [r2, #16]
 800884a:	6153      	str	r3, [r2, #20]
 800884c:	e719      	b.n	8008682 <__kernel_rem_pio2+0x4e2>
 800884e:	bf00      	nop

08008850 <scalbn>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	ec55 4b10 	vmov	r4, r5, d0
 8008856:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800885a:	4606      	mov	r6, r0
 800885c:	462b      	mov	r3, r5
 800885e:	b991      	cbnz	r1, 8008886 <scalbn+0x36>
 8008860:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008864:	4323      	orrs	r3, r4
 8008866:	d03d      	beq.n	80088e4 <scalbn+0x94>
 8008868:	4b35      	ldr	r3, [pc, #212]	@ (8008940 <scalbn+0xf0>)
 800886a:	4620      	mov	r0, r4
 800886c:	4629      	mov	r1, r5
 800886e:	2200      	movs	r2, #0
 8008870:	f7f7 feba 	bl	80005e8 <__aeabi_dmul>
 8008874:	4b33      	ldr	r3, [pc, #204]	@ (8008944 <scalbn+0xf4>)
 8008876:	429e      	cmp	r6, r3
 8008878:	4604      	mov	r4, r0
 800887a:	460d      	mov	r5, r1
 800887c:	da0f      	bge.n	800889e <scalbn+0x4e>
 800887e:	a328      	add	r3, pc, #160	@ (adr r3, 8008920 <scalbn+0xd0>)
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	e01e      	b.n	80088c4 <scalbn+0x74>
 8008886:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800888a:	4291      	cmp	r1, r2
 800888c:	d10b      	bne.n	80088a6 <scalbn+0x56>
 800888e:	4622      	mov	r2, r4
 8008890:	4620      	mov	r0, r4
 8008892:	4629      	mov	r1, r5
 8008894:	f7f7 fcf2 	bl	800027c <__adddf3>
 8008898:	4604      	mov	r4, r0
 800889a:	460d      	mov	r5, r1
 800889c:	e022      	b.n	80088e4 <scalbn+0x94>
 800889e:	460b      	mov	r3, r1
 80088a0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80088a4:	3936      	subs	r1, #54	@ 0x36
 80088a6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80088aa:	4296      	cmp	r6, r2
 80088ac:	dd0d      	ble.n	80088ca <scalbn+0x7a>
 80088ae:	2d00      	cmp	r5, #0
 80088b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008928 <scalbn+0xd8>)
 80088b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088b6:	da02      	bge.n	80088be <scalbn+0x6e>
 80088b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8008930 <scalbn+0xe0>)
 80088ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088be:	a31a      	add	r3, pc, #104	@ (adr r3, 8008928 <scalbn+0xd8>)
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	f7f7 fe90 	bl	80005e8 <__aeabi_dmul>
 80088c8:	e7e6      	b.n	8008898 <scalbn+0x48>
 80088ca:	1872      	adds	r2, r6, r1
 80088cc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80088d0:	428a      	cmp	r2, r1
 80088d2:	dcec      	bgt.n	80088ae <scalbn+0x5e>
 80088d4:	2a00      	cmp	r2, #0
 80088d6:	dd08      	ble.n	80088ea <scalbn+0x9a>
 80088d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80088dc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80088e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80088e4:	ec45 4b10 	vmov	d0, r4, r5
 80088e8:	bd70      	pop	{r4, r5, r6, pc}
 80088ea:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80088ee:	da08      	bge.n	8008902 <scalbn+0xb2>
 80088f0:	2d00      	cmp	r5, #0
 80088f2:	a10b      	add	r1, pc, #44	@ (adr r1, 8008920 <scalbn+0xd0>)
 80088f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088f8:	dac1      	bge.n	800887e <scalbn+0x2e>
 80088fa:	a10f      	add	r1, pc, #60	@ (adr r1, 8008938 <scalbn+0xe8>)
 80088fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008900:	e7bd      	b.n	800887e <scalbn+0x2e>
 8008902:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008906:	3236      	adds	r2, #54	@ 0x36
 8008908:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800890c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008910:	4620      	mov	r0, r4
 8008912:	4b0d      	ldr	r3, [pc, #52]	@ (8008948 <scalbn+0xf8>)
 8008914:	4629      	mov	r1, r5
 8008916:	2200      	movs	r2, #0
 8008918:	e7d4      	b.n	80088c4 <scalbn+0x74>
 800891a:	bf00      	nop
 800891c:	f3af 8000 	nop.w
 8008920:	c2f8f359 	.word	0xc2f8f359
 8008924:	01a56e1f 	.word	0x01a56e1f
 8008928:	8800759c 	.word	0x8800759c
 800892c:	7e37e43c 	.word	0x7e37e43c
 8008930:	8800759c 	.word	0x8800759c
 8008934:	fe37e43c 	.word	0xfe37e43c
 8008938:	c2f8f359 	.word	0xc2f8f359
 800893c:	81a56e1f 	.word	0x81a56e1f
 8008940:	43500000 	.word	0x43500000
 8008944:	ffff3cb0 	.word	0xffff3cb0
 8008948:	3c900000 	.word	0x3c900000
 800894c:	00000000 	.word	0x00000000

08008950 <floor>:
 8008950:	ec51 0b10 	vmov	r0, r1, d0
 8008954:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800895c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008960:	2e13      	cmp	r6, #19
 8008962:	460c      	mov	r4, r1
 8008964:	4605      	mov	r5, r0
 8008966:	4680      	mov	r8, r0
 8008968:	dc34      	bgt.n	80089d4 <floor+0x84>
 800896a:	2e00      	cmp	r6, #0
 800896c:	da17      	bge.n	800899e <floor+0x4e>
 800896e:	a332      	add	r3, pc, #200	@ (adr r3, 8008a38 <floor+0xe8>)
 8008970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008974:	f7f7 fc82 	bl	800027c <__adddf3>
 8008978:	2200      	movs	r2, #0
 800897a:	2300      	movs	r3, #0
 800897c:	f7f8 f8c4 	bl	8000b08 <__aeabi_dcmpgt>
 8008980:	b150      	cbz	r0, 8008998 <floor+0x48>
 8008982:	2c00      	cmp	r4, #0
 8008984:	da55      	bge.n	8008a32 <floor+0xe2>
 8008986:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800898a:	432c      	orrs	r4, r5
 800898c:	2500      	movs	r5, #0
 800898e:	42ac      	cmp	r4, r5
 8008990:	4c2b      	ldr	r4, [pc, #172]	@ (8008a40 <floor+0xf0>)
 8008992:	bf08      	it	eq
 8008994:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008998:	4621      	mov	r1, r4
 800899a:	4628      	mov	r0, r5
 800899c:	e023      	b.n	80089e6 <floor+0x96>
 800899e:	4f29      	ldr	r7, [pc, #164]	@ (8008a44 <floor+0xf4>)
 80089a0:	4137      	asrs	r7, r6
 80089a2:	ea01 0307 	and.w	r3, r1, r7
 80089a6:	4303      	orrs	r3, r0
 80089a8:	d01d      	beq.n	80089e6 <floor+0x96>
 80089aa:	a323      	add	r3, pc, #140	@ (adr r3, 8008a38 <floor+0xe8>)
 80089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b0:	f7f7 fc64 	bl	800027c <__adddf3>
 80089b4:	2200      	movs	r2, #0
 80089b6:	2300      	movs	r3, #0
 80089b8:	f7f8 f8a6 	bl	8000b08 <__aeabi_dcmpgt>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d0eb      	beq.n	8008998 <floor+0x48>
 80089c0:	2c00      	cmp	r4, #0
 80089c2:	bfbe      	ittt	lt
 80089c4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80089c8:	4133      	asrlt	r3, r6
 80089ca:	18e4      	addlt	r4, r4, r3
 80089cc:	ea24 0407 	bic.w	r4, r4, r7
 80089d0:	2500      	movs	r5, #0
 80089d2:	e7e1      	b.n	8008998 <floor+0x48>
 80089d4:	2e33      	cmp	r6, #51	@ 0x33
 80089d6:	dd0a      	ble.n	80089ee <floor+0x9e>
 80089d8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80089dc:	d103      	bne.n	80089e6 <floor+0x96>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	f7f7 fc4b 	bl	800027c <__adddf3>
 80089e6:	ec41 0b10 	vmov	d0, r0, r1
 80089ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ee:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80089f2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80089f6:	40df      	lsrs	r7, r3
 80089f8:	4207      	tst	r7, r0
 80089fa:	d0f4      	beq.n	80089e6 <floor+0x96>
 80089fc:	a30e      	add	r3, pc, #56	@ (adr r3, 8008a38 <floor+0xe8>)
 80089fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a02:	f7f7 fc3b 	bl	800027c <__adddf3>
 8008a06:	2200      	movs	r2, #0
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f7f8 f87d 	bl	8000b08 <__aeabi_dcmpgt>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d0c2      	beq.n	8008998 <floor+0x48>
 8008a12:	2c00      	cmp	r4, #0
 8008a14:	da0a      	bge.n	8008a2c <floor+0xdc>
 8008a16:	2e14      	cmp	r6, #20
 8008a18:	d101      	bne.n	8008a1e <floor+0xce>
 8008a1a:	3401      	adds	r4, #1
 8008a1c:	e006      	b.n	8008a2c <floor+0xdc>
 8008a1e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8008a22:	2301      	movs	r3, #1
 8008a24:	40b3      	lsls	r3, r6
 8008a26:	441d      	add	r5, r3
 8008a28:	4545      	cmp	r5, r8
 8008a2a:	d3f6      	bcc.n	8008a1a <floor+0xca>
 8008a2c:	ea25 0507 	bic.w	r5, r5, r7
 8008a30:	e7b2      	b.n	8008998 <floor+0x48>
 8008a32:	2500      	movs	r5, #0
 8008a34:	462c      	mov	r4, r5
 8008a36:	e7af      	b.n	8008998 <floor+0x48>
 8008a38:	8800759c 	.word	0x8800759c
 8008a3c:	7e37e43c 	.word	0x7e37e43c
 8008a40:	bff00000 	.word	0xbff00000
 8008a44:	000fffff 	.word	0x000fffff

08008a48 <_init>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	bf00      	nop
 8008a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4e:	bc08      	pop	{r3}
 8008a50:	469e      	mov	lr, r3
 8008a52:	4770      	bx	lr

08008a54 <_fini>:
 8008a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a56:	bf00      	nop
 8008a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5a:	bc08      	pop	{r3}
 8008a5c:	469e      	mov	lr, r3
 8008a5e:	4770      	bx	lr
